/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace IFastAccess {
  export type FlagsStruct = { isGovernor: boolean; isMember: boolean };

  export type FlagsStructOutput = [boolean, boolean] & {
    isGovernor: boolean;
    isMember: boolean;
  };
}

export interface FastAccessInterface extends utils.Interface {
  functions: {
    "addGovernor(address)": FunctionFragment;
    "addMember(address)": FunctionFragment;
    "flags(address)": FunctionFragment;
    "governorCount()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isGovernor(address)": FunctionFragment;
    "isMember(address)": FunctionFragment;
    "memberCount()": FunctionFragment;
    "paginateGovernors(uint256,uint256)": FunctionFragment;
    "paginateMembers(uint256,uint256)": FunctionFragment;
    "reg()": FunctionFragment;
    "removeGovernor(address)": FunctionFragment;
    "removeMember(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addGovernor"
      | "addMember"
      | "flags"
      | "governorCount"
      | "initialize"
      | "isGovernor"
      | "isMember"
      | "memberCount"
      | "paginateGovernors"
      | "paginateMembers"
      | "reg"
      | "removeGovernor"
      | "removeMember"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "addMember", values: [string]): string;
  encodeFunctionData(functionFragment: "flags", values: [string]): string;
  encodeFunctionData(
    functionFragment: "governorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "isMember", values: [string]): string;
  encodeFunctionData(
    functionFragment: "memberCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paginateGovernors",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paginateMembers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "reg", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flags", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "memberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paginateGovernors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paginateMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;

  events: {
    "GovernorAdded(address)": EventFragment;
    "GovernorRemoved(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MemberAdded(address)": EventFragment;
    "MemberRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GovernorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberRemoved"): EventFragment;
}

export interface GovernorAddedEventObject {
  governor: string;
}
export type GovernorAddedEvent = TypedEvent<[string], GovernorAddedEventObject>;

export type GovernorAddedEventFilter = TypedEventFilter<GovernorAddedEvent>;

export interface GovernorRemovedEventObject {
  governor: string;
}
export type GovernorRemovedEvent = TypedEvent<
  [string],
  GovernorRemovedEventObject
>;

export type GovernorRemovedEventFilter = TypedEventFilter<GovernorRemovedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MemberAddedEventObject {
  member: string;
}
export type MemberAddedEvent = TypedEvent<[string], MemberAddedEventObject>;

export type MemberAddedEventFilter = TypedEventFilter<MemberAddedEvent>;

export interface MemberRemovedEventObject {
  member: string;
}
export type MemberRemovedEvent = TypedEvent<[string], MemberRemovedEventObject>;

export type MemberRemovedEventFilter = TypedEventFilter<MemberRemovedEvent>;

export interface FastAccess extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FastAccessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addGovernor(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMember(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flags(
      a: string,
      overrides?: CallOverrides
    ): Promise<[IFastAccess.FlagsStructOutput]>;

    governorCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      pReg: string,
      governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isGovernor(a: string, overrides?: CallOverrides): Promise<[boolean]>;

    isMember(a: string, overrides?: CallOverrides): Promise<[boolean]>;

    memberCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    paginateGovernors(
      index: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber]>;

    paginateMembers(
      index: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber]>;

    reg(overrides?: CallOverrides): Promise<[string]>;

    removeGovernor(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMember(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addGovernor(
    a: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMember(
    a: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flags(
    a: string,
    overrides?: CallOverrides
  ): Promise<IFastAccess.FlagsStructOutput>;

  governorCount(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    pReg: string,
    governor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isGovernor(a: string, overrides?: CallOverrides): Promise<boolean>;

  isMember(a: string, overrides?: CallOverrides): Promise<boolean>;

  memberCount(overrides?: CallOverrides): Promise<BigNumber>;

  paginateGovernors(
    index: BigNumberish,
    perPage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber]>;

  paginateMembers(
    index: BigNumberish,
    perPage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber]>;

  reg(overrides?: CallOverrides): Promise<string>;

  removeGovernor(
    a: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMember(
    a: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addGovernor(a: string, overrides?: CallOverrides): Promise<void>;

    addMember(a: string, overrides?: CallOverrides): Promise<void>;

    flags(
      a: string,
      overrides?: CallOverrides
    ): Promise<IFastAccess.FlagsStructOutput>;

    governorCount(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      pReg: string,
      governor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isGovernor(a: string, overrides?: CallOverrides): Promise<boolean>;

    isMember(a: string, overrides?: CallOverrides): Promise<boolean>;

    memberCount(overrides?: CallOverrides): Promise<BigNumber>;

    paginateGovernors(
      index: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber]>;

    paginateMembers(
      index: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber]>;

    reg(overrides?: CallOverrides): Promise<string>;

    removeGovernor(a: string, overrides?: CallOverrides): Promise<void>;

    removeMember(a: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "GovernorAdded(address)"(
      governor?: string | null
    ): GovernorAddedEventFilter;
    GovernorAdded(governor?: string | null): GovernorAddedEventFilter;

    "GovernorRemoved(address)"(
      governor?: string | null
    ): GovernorRemovedEventFilter;
    GovernorRemoved(governor?: string | null): GovernorRemovedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MemberAdded(address)"(member?: string | null): MemberAddedEventFilter;
    MemberAdded(member?: string | null): MemberAddedEventFilter;

    "MemberRemoved(address)"(member?: string | null): MemberRemovedEventFilter;
    MemberRemoved(member?: string | null): MemberRemovedEventFilter;
  };

  estimateGas: {
    addGovernor(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMember(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flags(a: string, overrides?: CallOverrides): Promise<BigNumber>;

    governorCount(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      pReg: string,
      governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isGovernor(a: string, overrides?: CallOverrides): Promise<BigNumber>;

    isMember(a: string, overrides?: CallOverrides): Promise<BigNumber>;

    memberCount(overrides?: CallOverrides): Promise<BigNumber>;

    paginateGovernors(
      index: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paginateMembers(
      index: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reg(overrides?: CallOverrides): Promise<BigNumber>;

    removeGovernor(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMember(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addGovernor(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMember(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flags(a: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governorCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      pReg: string,
      governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isGovernor(
      a: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMember(
      a: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paginateGovernors(
      index: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paginateMembers(
      index: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeGovernor(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMember(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
