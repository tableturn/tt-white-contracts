/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface SpcInterface extends utils.Interface {
  functions: {
    "addMember(address)": FunctionFragment;
    "drainEth()": FunctionFragment;
    "fastTokenCount()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isMember(address)": FunctionFragment;
    "memberCount()": FunctionFragment;
    "paginateFastTokens(uint256,uint256)": FunctionFragment;
    "paginateMembers(uint256,uint256)": FunctionFragment;
    "provisionWithEth()": FunctionFragment;
    "registerFastRegistry(address)": FunctionFragment;
    "removeMember(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addMember"
      | "drainEth"
      | "fastTokenCount"
      | "initialize"
      | "isMember"
      | "memberCount"
      | "paginateFastTokens"
      | "paginateMembers"
      | "provisionWithEth"
      | "registerFastRegistry"
      | "removeMember"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addMember", values: [string]): string;
  encodeFunctionData(functionFragment: "drainEth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fastTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "isMember", values: [string]): string;
  encodeFunctionData(
    functionFragment: "memberCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paginateFastTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paginateMembers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "provisionWithEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerFastRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drainEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fastTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "memberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paginateFastTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paginateMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provisionWithEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerFastRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;

  events: {
    "EthDrained(address,uint256)": EventFragment;
    "EthReceived(address,uint256)": EventFragment;
    "FastRegistered(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MemberAdded(address)": EventFragment;
    "MemberRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EthDrained"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FastRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberRemoved"): EventFragment;
}

export interface EthDrainedEventObject {
  to: string;
  amount: BigNumber;
}
export type EthDrainedEvent = TypedEvent<
  [string, BigNumber],
  EthDrainedEventObject
>;

export type EthDrainedEventFilter = TypedEventFilter<EthDrainedEvent>;

export interface EthReceivedEventObject {
  from: string;
  amount: BigNumber;
}
export type EthReceivedEvent = TypedEvent<
  [string, BigNumber],
  EthReceivedEventObject
>;

export type EthReceivedEventFilter = TypedEventFilter<EthReceivedEvent>;

export interface FastRegisteredEventObject {
  registry: string;
}
export type FastRegisteredEvent = TypedEvent<
  [string],
  FastRegisteredEventObject
>;

export type FastRegisteredEventFilter = TypedEventFilter<FastRegisteredEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MemberAddedEventObject {
  member: string;
}
export type MemberAddedEvent = TypedEvent<[string], MemberAddedEventObject>;

export type MemberAddedEventFilter = TypedEventFilter<MemberAddedEvent>;

export interface MemberRemovedEventObject {
  member: string;
}
export type MemberRemovedEvent = TypedEvent<[string], MemberRemovedEventObject>;

export type MemberRemovedEventFilter = TypedEventFilter<MemberRemovedEvent>;

export interface Spc extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SpcInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMember(
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    drainEth(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fastTokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isMember(candidate: string, overrides?: CallOverrides): Promise<[boolean]>;

    memberCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    paginateFastTokens(
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber]>;

    paginateMembers(
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber]>;

    provisionWithEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerFastRegistry(
      registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMember(
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMember(
    member: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  drainEth(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fastTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _member: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isMember(candidate: string, overrides?: CallOverrides): Promise<boolean>;

  memberCount(overrides?: CallOverrides): Promise<BigNumber>;

  paginateFastTokens(
    cursor: BigNumberish,
    perPage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber]>;

  paginateMembers(
    cursor: BigNumberish,
    perPage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber]>;

  provisionWithEth(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerFastRegistry(
    registry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMember(
    member: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMember(member: string, overrides?: CallOverrides): Promise<void>;

    drainEth(overrides?: CallOverrides): Promise<void>;

    fastTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_member: string, overrides?: CallOverrides): Promise<void>;

    isMember(candidate: string, overrides?: CallOverrides): Promise<boolean>;

    memberCount(overrides?: CallOverrides): Promise<BigNumber>;

    paginateFastTokens(
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber]>;

    paginateMembers(
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber]>;

    provisionWithEth(overrides?: CallOverrides): Promise<void>;

    registerFastRegistry(
      registry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMember(member: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "EthDrained(address,uint256)"(
      to?: string | null,
      amount?: null
    ): EthDrainedEventFilter;
    EthDrained(to?: string | null, amount?: null): EthDrainedEventFilter;

    "EthReceived(address,uint256)"(
      from?: string | null,
      amount?: null
    ): EthReceivedEventFilter;
    EthReceived(from?: string | null, amount?: null): EthReceivedEventFilter;

    "FastRegistered(address)"(
      registry?: string | null
    ): FastRegisteredEventFilter;
    FastRegistered(registry?: string | null): FastRegisteredEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MemberAdded(address)"(member?: string | null): MemberAddedEventFilter;
    MemberAdded(member?: string | null): MemberAddedEventFilter;

    "MemberRemoved(address)"(member?: string | null): MemberRemovedEventFilter;
    MemberRemoved(member?: string | null): MemberRemovedEventFilter;
  };

  estimateGas: {
    addMember(
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    drainEth(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fastTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isMember(candidate: string, overrides?: CallOverrides): Promise<BigNumber>;

    memberCount(overrides?: CallOverrides): Promise<BigNumber>;

    paginateFastTokens(
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paginateMembers(
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    provisionWithEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerFastRegistry(
      registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMember(
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMember(
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    drainEth(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fastTokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isMember(
      candidate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paginateFastTokens(
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paginateMembers(
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    provisionWithEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerFastRegistry(
      registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMember(
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
