/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace IFastHistory {
  export type MintingProofStruct = {
    amount: BigNumberish;
    blockNumber: BigNumberish;
    ref: string;
  };

  export type MintingProofStructOutput = [BigNumber, BigNumber, string] & {
    amount: BigNumber;
    blockNumber: BigNumber;
    ref: string;
  };

  export type TransferProofStruct = {
    from: string;
    spender: string;
    to: string;
    amount: BigNumberish;
    blockNumber: BigNumberish;
    ref: string;
  };

  export type TransferProofStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    from: string;
    spender: string;
    to: string;
    amount: BigNumber;
    blockNumber: BigNumber;
    ref: string;
  };
}

export interface FastHistoryInterface extends utils.Interface {
  functions: {
    "addMintingProof(uint256,string)": FunctionFragment;
    "addTransferProof(address,address,address,uint256,string)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "mintingProofCount()": FunctionFragment;
    "paginateMintingProofs(uint256,uint256)": FunctionFragment;
    "paginateTransferProofs(uint256,uint256)": FunctionFragment;
    "paginateTransferProofsByInvolvee(address,uint256,uint256)": FunctionFragment;
    "reg()": FunctionFragment;
    "transferProofCount()": FunctionFragment;
    "transferProofInvolvements(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addMintingProof"
      | "addTransferProof"
      | "initialize"
      | "mintingProofCount"
      | "paginateMintingProofs"
      | "paginateTransferProofs"
      | "paginateTransferProofsByInvolvee"
      | "reg"
      | "transferProofCount"
      | "transferProofInvolvements"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addMintingProof",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addTransferProof",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mintingProofCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paginateMintingProofs",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paginateTransferProofs",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paginateTransferProofsByInvolvee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "reg", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferProofCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferProofInvolvements",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addMintingProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTransferProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintingProofCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paginateMintingProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paginateTransferProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paginateTransferProofsByInvolvee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferProofCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferProofInvolvements",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface FastHistory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FastHistoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMintingProof(
      amount: BigNumberish,
      ref: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTransferProof(
      spender: string,
      from: string,
      to: string,
      amount: BigNumberish,
      ref: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _reg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintingProofCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    paginateMintingProofs(
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IFastHistory.MintingProofStructOutput[], BigNumber]>;

    paginateTransferProofs(
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IFastHistory.TransferProofStructOutput[], BigNumber]>;

    paginateTransferProofsByInvolvee(
      involvee: string,
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber]>;

    reg(overrides?: CallOverrides): Promise<[string]>;

    transferProofCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferProofInvolvements(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addMintingProof(
    amount: BigNumberish,
    ref: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTransferProof(
    spender: string,
    from: string,
    to: string,
    amount: BigNumberish,
    ref: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _reg: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintingProofCount(overrides?: CallOverrides): Promise<BigNumber>;

  paginateMintingProofs(
    cursor: BigNumberish,
    perPage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[IFastHistory.MintingProofStructOutput[], BigNumber]>;

  paginateTransferProofs(
    cursor: BigNumberish,
    perPage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[IFastHistory.TransferProofStructOutput[], BigNumber]>;

  paginateTransferProofsByInvolvee(
    involvee: string,
    cursor: BigNumberish,
    perPage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber]>;

  reg(overrides?: CallOverrides): Promise<string>;

  transferProofCount(overrides?: CallOverrides): Promise<BigNumber>;

  transferProofInvolvements(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addMintingProof(
      amount: BigNumberish,
      ref: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addTransferProof(
      spender: string,
      from: string,
      to: string,
      amount: BigNumberish,
      ref: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(_reg: string, overrides?: CallOverrides): Promise<void>;

    mintingProofCount(overrides?: CallOverrides): Promise<BigNumber>;

    paginateMintingProofs(
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IFastHistory.MintingProofStructOutput[], BigNumber]>;

    paginateTransferProofs(
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IFastHistory.TransferProofStructOutput[], BigNumber]>;

    paginateTransferProofsByInvolvee(
      involvee: string,
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber]>;

    reg(overrides?: CallOverrides): Promise<string>;

    transferProofCount(overrides?: CallOverrides): Promise<BigNumber>;

    transferProofInvolvements(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    addMintingProof(
      amount: BigNumberish,
      ref: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTransferProof(
      spender: string,
      from: string,
      to: string,
      amount: BigNumberish,
      ref: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _reg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintingProofCount(overrides?: CallOverrides): Promise<BigNumber>;

    paginateMintingProofs(
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paginateTransferProofs(
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paginateTransferProofsByInvolvee(
      involvee: string,
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reg(overrides?: CallOverrides): Promise<BigNumber>;

    transferProofCount(overrides?: CallOverrides): Promise<BigNumber>;

    transferProofInvolvements(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMintingProof(
      amount: BigNumberish,
      ref: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTransferProof(
      spender: string,
      from: string,
      to: string,
      amount: BigNumberish,
      ref: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _reg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintingProofCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paginateMintingProofs(
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paginateTransferProofs(
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paginateTransferProofsByInvolvee(
      involvee: string,
      cursor: BigNumberish,
      perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferProofCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferProofInvolvements(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
