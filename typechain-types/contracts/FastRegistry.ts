/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface FastRegistryInterface extends utils.Interface {
  functions: {
    "access()": FunctionFragment;
    "drainEth()": FunctionFragment;
    "ensureEthProvisioning(address,uint256)": FunctionFragment;
    "history()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "provisionWithEth()": FunctionFragment;
    "setAccessAddress(address)": FunctionFragment;
    "setHistoryAddress(address)": FunctionFragment;
    "setSpcAddress(address)": FunctionFragment;
    "setTokenAddress(address)": FunctionFragment;
    "spc()": FunctionFragment;
    "token()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "access"
      | "drainEth"
      | "ensureEthProvisioning"
      | "history"
      | "initialize"
      | "provisionWithEth"
      | "setAccessAddress"
      | "setHistoryAddress"
      | "setSpcAddress"
      | "setTokenAddress"
      | "spc"
      | "token"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "access", values?: undefined): string;
  encodeFunctionData(functionFragment: "drainEth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ensureEthProvisioning",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "history", values?: undefined): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "provisionWithEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccessAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setHistoryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpcAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "spc", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "access", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drainEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ensureEthProvisioning",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "history", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provisionWithEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccessAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHistoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "EthDrained(address,uint256)": EventFragment;
    "EthReceived(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EthDrained"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface EthDrainedEventObject {
  to: string;
  amount: BigNumber;
}
export type EthDrainedEvent = TypedEvent<
  [string, BigNumber],
  EthDrainedEventObject
>;

export type EthDrainedEventFilter = TypedEventFilter<EthDrainedEvent>;

export interface EthReceivedEventObject {
  from: string;
  amount: BigNumber;
}
export type EthReceivedEvent = TypedEvent<
  [string, BigNumber],
  EthReceivedEventObject
>;

export type EthReceivedEventFilter = TypedEventFilter<EthReceivedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface FastRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FastRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    access(overrides?: CallOverrides): Promise<[string]>;

    drainEth(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ensureEthProvisioning(
      a: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    history(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _spc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    provisionWithEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAccessAddress(
      _access: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHistoryAddress(
      _history: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSpcAddress(
      _spc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenAddress(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spc(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  access(overrides?: CallOverrides): Promise<string>;

  drainEth(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ensureEthProvisioning(
    a: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  history(overrides?: CallOverrides): Promise<string>;

  initialize(
    _spc: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  provisionWithEth(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAccessAddress(
    _access: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHistoryAddress(
    _history: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSpcAddress(
    _spc: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenAddress(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spc(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    access(overrides?: CallOverrides): Promise<string>;

    drainEth(overrides?: CallOverrides): Promise<void>;

    ensureEthProvisioning(
      a: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    history(overrides?: CallOverrides): Promise<string>;

    initialize(_spc: string, overrides?: CallOverrides): Promise<void>;

    provisionWithEth(overrides?: CallOverrides): Promise<void>;

    setAccessAddress(_access: string, overrides?: CallOverrides): Promise<void>;

    setHistoryAddress(
      _history: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpcAddress(_spc: string, overrides?: CallOverrides): Promise<void>;

    setTokenAddress(_token: string, overrides?: CallOverrides): Promise<void>;

    spc(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "EthDrained(address,uint256)"(
      to?: string | null,
      amount?: null
    ): EthDrainedEventFilter;
    EthDrained(to?: string | null, amount?: null): EthDrainedEventFilter;

    "EthReceived(address,uint256)"(
      from?: string | null,
      amount?: null
    ): EthReceivedEventFilter;
    EthReceived(from?: string | null, amount?: null): EthReceivedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    access(overrides?: CallOverrides): Promise<BigNumber>;

    drainEth(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ensureEthProvisioning(
      a: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    history(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _spc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    provisionWithEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAccessAddress(
      _access: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHistoryAddress(
      _history: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSpcAddress(
      _spc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenAddress(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spc(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    access(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    drainEth(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ensureEthProvisioning(
      a: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    history(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _spc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    provisionWithEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAccessAddress(
      _access: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHistoryAddress(
      _history: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSpcAddress(
      _spc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenAddress(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
