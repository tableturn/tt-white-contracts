/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FastRegistry,
  FastRegistryInterface,
} from "../../contracts/FastRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "access",
        type: "address",
      },
    ],
    name: "AccessAddressSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "EthDrained",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "EthReceived",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "history",
        type: "address",
      },
    ],
    name: "HistoryAddressSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "TokenAddressSet",
    type: "event",
  },
  {
    inputs: [],
    name: "access",
    outputs: [
      {
        internalType: "contract IFastAccess",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "drainEth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "a",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "ensureEthProvisioning",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "history",
    outputs: [
      {
        internalType: "contract IFastHistory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISpc",
        name: "_spc",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "provisionWithEth",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IFastAccess",
        name: "_access",
        type: "address",
      },
    ],
    name: "setAccessAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IFastHistory",
        name: "_history",
        type: "address",
      },
    ],
    name: "setHistoryAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IFastToken",
        name: "_token",
        type: "address",
      },
    ],
    name: "setTokenAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "spc",
    outputs: [
      {
        internalType: "contract ISpc",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IFastToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061120f806100206000396000f3fe60806040526004361061009c5760003560e01c806371907f171161006457806371907f171461013d57806385acb0cc1461016857806398daac8314610193578063ad5f7ab0146101be578063c4d66de8146101e7578063fc0c546a146102035761009c565b80630baac66f146100a1578063104dcee9146100b857806326a4e8d2146100e1578063317366391461010a5780633eca424b14610133575b600080fd5b3480156100ad57600080fd5b506100b661022e565b005b3480156100c457600080fd5b506100df60048036038101906100da9190610bda565b6103b7565b005b3480156100ed57600080fd5b5061010860048036038101906101039190610c91565b6104ee565b005b34801561011657600080fd5b50610131600480360381019061012c9190610c68565b61061e565b005b61013b61074e565b005b34801561014957600080fd5b5061015261079e565b60405161015f9190610dd0565b60405180910390f35b34801561017457600080fd5b5061017d6107c4565b60405161018a9190610e21565b60405180910390f35b34801561019f57600080fd5b506101a86107ea565b6040516101b59190610deb565b60405180910390f35b3480156101ca57600080fd5b506101e560048036038101906101e09190610c3f565b610810565b005b61020160048036038101906101fc9190610cba565b610940565b005b34801561020f57600080fd5b50610218610a0e565b6040516102259190610e06565b60405180910390f35b33600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b815260040161028a9190610db5565b60206040518083038186803b1580156102a257600080fd5b505afa1580156102b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102da9190610c16565b610319576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090610e97565b60405180910390fd5b60004790503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610364573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fd5a7a0257eadbfea7ac4432ca8fe62ac277d64736ab6ef67f11abf238a1e0f1a826040516103ab9190610eb7565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610447576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043e90610e57565b60405180910390fd5b600047905080821115610458578091505b818373ffffffffffffffffffffffffffffffffffffffff16311061047c57506104ea565b8273ffffffffffffffffffffffffffffffffffffffff16318261049f9190610ee3565b91508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156104e7573d6000803e3d6000fd5b50505b5050565b33600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b815260040161054a9190610db5565b60206040518083038186803b15801561056257600080fd5b505afa158015610576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059a9190610c16565b6105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090610e97565b60405180910390fd5b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b33600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b815260040161067a9190610db5565b60206040518083038186803b15801561069257600080fd5b505afa1580156106a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ca9190610c16565b610709576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070090610e97565b60405180910390fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b3373ffffffffffffffffffffffffffffffffffffffff167f85177f287940f2f05425a4029951af0e047a7f9c4eaa9a6e6917bcd869f86695346040516107949190610eb7565b60405180910390a2565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b33600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b815260040161086c9190610db5565b60206040518083038186803b15801561088457600080fd5b505afa158015610898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bc9190610c16565b6108fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f290610e97565b60405180910390fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600061094c6001610a34565b90508015610970576001600060016101000a81548160ff0219169083151502179055505b81600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610a0a5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610a019190610e3c565b60405180910390a15b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900460ff1615610aab5760018260ff16148015610a635750610a6130610b24565b155b610aa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9990610e77565b60405180910390fd5b60009050610b1f565b8160ff1660008054906101000a900460ff1660ff1610610b00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af790610e77565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600081359050610b5681611138565b92915050565b600081519050610b6b8161114f565b92915050565b600081359050610b8081611166565b92915050565b600081359050610b958161117d565b92915050565b600081359050610baa81611194565b92915050565b600081359050610bbf816111ab565b92915050565b600081359050610bd4816111c2565b92915050565b60008060408385031215610bed57600080fd5b6000610bfb85828601610b47565b9250506020610c0c85828601610bc5565b9150509250929050565b600060208284031215610c2857600080fd5b6000610c3684828501610b5c565b91505092915050565b600060208284031215610c5157600080fd5b6000610c5f84828501610b71565b91505092915050565b600060208284031215610c7a57600080fd5b6000610c8884828501610b86565b91505092915050565b600060208284031215610ca357600080fd5b6000610cb184828501610b9b565b91505092915050565b600060208284031215610ccc57600080fd5b6000610cda84828501610bb0565b91505092915050565b610cec81610f17565b82525050565b610cfb81610fc6565b82525050565b610d0a81610fea565b82525050565b610d198161100e565b82525050565b610d2881611032565b82525050565b610d3781611056565b82525050565b6000610d4a601983610ed2565b9150610d5582611097565b602082019050919050565b6000610d6d602e83610ed2565b9150610d78826110c0565b604082019050919050565b6000610d90601683610ed2565b9150610d9b8261110f565b602082019050919050565b610daf81610faf565b82525050565b6000602082019050610dca6000830184610ce3565b92915050565b6000602082019050610de56000830184610cf2565b92915050565b6000602082019050610e006000830184610d01565b92915050565b6000602082019050610e1b6000830184610d10565b92915050565b6000602082019050610e366000830184610d1f565b92915050565b6000602082019050610e516000830184610d2e565b92915050565b60006020820190508181036000830152610e7081610d3d565b9050919050565b60006020820190508181036000830152610e9081610d60565b9050919050565b60006020820190508181036000830152610eb081610d83565b9050919050565b6000602082019050610ecc6000830184610da6565b92915050565b600082825260208201905092915050565b6000610eee82610faf565b9150610ef983610faf565b925082821015610f0c57610f0b611068565b5b828203905092915050565b6000610f2282610f8f565b9050919050565b6000610f3482610f8f565b9050919050565b60008115159050919050565b6000610f5282610f17565b9050919050565b6000610f6482610f17565b9050919050565b6000610f7682610f17565b9050919050565b6000610f8882610f17565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000610fd182610fd8565b9050919050565b6000610fe382610f8f565b9050919050565b6000610ff582610ffc565b9050919050565b600061100782610f8f565b9050919050565b600061101982611020565b9050919050565b600061102b82610f8f565b9050919050565b600061103d82611044565b9050919050565b600061104f82610f8f565b9050919050565b600061106182610fb9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f43616e6e6f742062652063616c6c6564206469726563746c7900000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4d697373696e6720535043206d656d6265727368697000000000000000000000600082015250565b61114181610f29565b811461114c57600080fd5b50565b61115881610f3b565b811461116357600080fd5b50565b61116f81610f47565b811461117a57600080fd5b50565b61118681610f59565b811461119157600080fd5b50565b61119d81610f6b565b81146111a857600080fd5b50565b6111b481610f7d565b81146111bf57600080fd5b50565b6111cb81610faf565b81146111d657600080fd5b5056fea26469706673582212205a8883ec33b4e02845785a5113671aa276273fe59f9bd6feeee923baa1d384e264736f6c63430008040033";

type FastRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FastRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FastRegistry__factory extends ContractFactory {
  constructor(...args: FastRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FastRegistry> {
    return super.deploy(overrides || {}) as Promise<FastRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FastRegistry {
    return super.attach(address) as FastRegistry;
  }
  override connect(signer: Signer): FastRegistry__factory {
    return super.connect(signer) as FastRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FastRegistryInterface {
    return new utils.Interface(_abi) as FastRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FastRegistry {
    return new Contract(address, _abi, signerOrProvider) as FastRegistry;
  }
}
