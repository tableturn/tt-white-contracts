/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FastRegistry,
  FastRegistryInterface,
} from "../../contracts/FastRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "access",
        type: "address",
      },
    ],
    name: "AccessAddressSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "EthDrained",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "EthReceived",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "history",
        type: "address",
      },
    ],
    name: "HistoryAddressSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "TokenAddressSet",
    type: "event",
  },
  {
    inputs: [],
    name: "access",
    outputs: [
      {
        internalType: "contract IFastAccess",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "drainEth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "history",
    outputs: [
      {
        internalType: "contract IFastHistory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISpc",
        name: "_spc",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "payUpTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "provisionWithEth",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IFastAccess",
        name: "_access",
        type: "address",
      },
    ],
    name: "setAccessAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IFastHistory",
        name: "_history",
        type: "address",
      },
    ],
    name: "setHistoryAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IFastToken",
        name: "_token",
        type: "address",
      },
    ],
    name: "setTokenAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "spc",
    outputs: [
      {
        internalType: "contract ISpc",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IFastToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506111fe806100206000396000f3fe60806040526004361061009c5760003560e01c806385acb0cc1161006457806385acb0cc1461013f5780638a80e9551461016a57806398daac8314610193578063ad5f7ab0146101be578063c4d66de8146101e7578063fc0c546a146102035761009c565b80630baac66f146100a157806326a4e8d2146100b857806331736639146100e15780633eca424b1461010a57806371907f1714610114575b600080fd5b3480156100ad57600080fd5b506100b661022e565b005b3480156100c457600080fd5b506100df60048036038101906100da9190610c80565b6103b7565b005b3480156100ed57600080fd5b5061010860048036038101906101039190610c57565b6104e7565b005b610112610617565b005b34801561012057600080fd5b50610129610667565b6040516101369190610dbf565b60405180910390f35b34801561014b57600080fd5b5061015461068d565b6040516101619190610e10565b60405180910390f35b34801561017657600080fd5b50610191600480360381019061018c9190610bc9565b6106b3565b005b34801561019f57600080fd5b506101a86107d9565b6040516101b59190610dda565b60405180910390f35b3480156101ca57600080fd5b506101e560048036038101906101e09190610c2e565b6107ff565b005b61020160048036038101906101fc9190610ca9565b61092f565b005b34801561020f57600080fd5b506102186109fd565b6040516102259190610df5565b60405180910390f35b33600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b815260040161028a9190610da4565b60206040518083038186803b1580156102a257600080fd5b505afa1580156102b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102da9190610c05565b610319576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090610e86565b60405180910390fd5b60004790503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610364573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fd5a7a0257eadbfea7ac4432ca8fe62ac277d64736ab6ef67f11abf238a1e0f1a826040516103ab9190610ea6565b60405180910390a25050565b33600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b81526004016104139190610da4565b60206040518083038186803b15801561042b57600080fd5b505afa15801561043f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104639190610c05565b6104a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049990610e86565b60405180910390fd5b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b33600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b81526004016105439190610da4565b60206040518083038186803b15801561055b57600080fd5b505afa15801561056f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105939190610c05565b6105d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c990610e86565b60405180910390fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b3373ffffffffffffffffffffffffffffffffffffffff167f85177f287940f2f05425a4029951af0e047a7f9c4eaa9a6e6917bcd869f866953460405161065d9190610ea6565b60405180910390a2565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610743576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073a90610e46565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1631905081811061076c57506107d5565b80826107789190610ed2565b915060004790508281101561078b578092505b8373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501580156107d1573d6000803e3d6000fd5b5050505b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b33600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b815260040161085b9190610da4565b60206040518083038186803b15801561087357600080fd5b505afa158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab9190610c05565b6108ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e190610e86565b60405180910390fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600061093b6001610a23565b9050801561095f576001600060016101000a81548160ff0219169083151502179055505b81600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156109f95760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516109f09190610e2b565b60405180910390a15b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900460ff1615610a9a5760018260ff16148015610a525750610a5030610b13565b155b610a91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8890610e66565b60405180910390fd5b60009050610b0e565b8160ff1660008054906101000a900460ff1660ff1610610aef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae690610e66565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600081359050610b4581611127565b92915050565b600081519050610b5a8161113e565b92915050565b600081359050610b6f81611155565b92915050565b600081359050610b848161116c565b92915050565b600081359050610b9981611183565b92915050565b600081359050610bae8161119a565b92915050565b600081359050610bc3816111b1565b92915050565b60008060408385031215610bdc57600080fd5b6000610bea85828601610b36565b9250506020610bfb85828601610bb4565b9150509250929050565b600060208284031215610c1757600080fd5b6000610c2584828501610b4b565b91505092915050565b600060208284031215610c4057600080fd5b6000610c4e84828501610b60565b91505092915050565b600060208284031215610c6957600080fd5b6000610c7784828501610b75565b91505092915050565b600060208284031215610c9257600080fd5b6000610ca084828501610b8a565b91505092915050565b600060208284031215610cbb57600080fd5b6000610cc984828501610b9f565b91505092915050565b610cdb81610f06565b82525050565b610cea81610fb5565b82525050565b610cf981610fd9565b82525050565b610d0881610ffd565b82525050565b610d1781611021565b82525050565b610d2681611045565b82525050565b6000610d39601983610ec1565b9150610d4482611086565b602082019050919050565b6000610d5c602e83610ec1565b9150610d67826110af565b604082019050919050565b6000610d7f601683610ec1565b9150610d8a826110fe565b602082019050919050565b610d9e81610f9e565b82525050565b6000602082019050610db96000830184610cd2565b92915050565b6000602082019050610dd46000830184610ce1565b92915050565b6000602082019050610def6000830184610cf0565b92915050565b6000602082019050610e0a6000830184610cff565b92915050565b6000602082019050610e256000830184610d0e565b92915050565b6000602082019050610e406000830184610d1d565b92915050565b60006020820190508181036000830152610e5f81610d2c565b9050919050565b60006020820190508181036000830152610e7f81610d4f565b9050919050565b60006020820190508181036000830152610e9f81610d72565b9050919050565b6000602082019050610ebb6000830184610d95565b92915050565b600082825260208201905092915050565b6000610edd82610f9e565b9150610ee883610f9e565b925082821015610efb57610efa611057565b5b828203905092915050565b6000610f1182610f7e565b9050919050565b6000610f2382610f7e565b9050919050565b60008115159050919050565b6000610f4182610f06565b9050919050565b6000610f5382610f06565b9050919050565b6000610f6582610f06565b9050919050565b6000610f7782610f06565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000610fc082610fc7565b9050919050565b6000610fd282610f7e565b9050919050565b6000610fe482610feb565b9050919050565b6000610ff682610f7e565b9050919050565b60006110088261100f565b9050919050565b600061101a82610f7e565b9050919050565b600061102c82611033565b9050919050565b600061103e82610f7e565b9050919050565b600061105082610fa8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f43616e6e6f742062652063616c6c6564206469726563746c7900000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4d697373696e6720535043206d656d6265727368697000000000000000000000600082015250565b61113081610f18565b811461113b57600080fd5b50565b61114781610f2a565b811461115257600080fd5b50565b61115e81610f36565b811461116957600080fd5b50565b61117581610f48565b811461118057600080fd5b50565b61118c81610f5a565b811461119757600080fd5b50565b6111a381610f6c565b81146111ae57600080fd5b50565b6111ba81610f9e565b81146111c557600080fd5b5056fea264697066735822122080c3856fbd776ca835a49610bdda5dd1cbcf380bfe6375f09b7bd57faecbc6f364736f6c63430008040033";

type FastRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FastRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FastRegistry__factory extends ContractFactory {
  constructor(...args: FastRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FastRegistry> {
    return super.deploy(overrides || {}) as Promise<FastRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FastRegistry {
    return super.attach(address) as FastRegistry;
  }
  override connect(signer: Signer): FastRegistry__factory {
    return super.connect(signer) as FastRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FastRegistryInterface {
    return new utils.Interface(_abi) as FastRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FastRegistry {
    return new Contract(address, _abi, signerOrProvider) as FastRegistry;
  }
}
