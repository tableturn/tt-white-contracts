/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PaginationLib,
  PaginationLibInterface,
} from "../../../contracts/lib/PaginationLib";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "collection",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "cursor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "perPage",
        type: "uint256",
      },
    ],
    name: "addresses",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "ref",
            type: "string",
          },
        ],
        internalType: "struct IFastHistory.MintingProof[]",
        name: "collection",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "cursor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "perPage",
        type: "uint256",
      },
    ],
    name: "mintingProofs",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "ref",
            type: "string",
          },
        ],
        internalType: "struct IFastHistory.MintingProof[]",
        name: "",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "spender",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "ref",
            type: "string",
          },
        ],
        internalType: "struct IFastHistory.TransferProof[]",
        name: "collection",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "cursor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "perPage",
        type: "uint256",
      },
    ],
    name: "transferProofs",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "spender",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "ref",
            type: "string",
          },
        ],
        internalType: "struct IFastHistory.TransferProof[]",
        name: "",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "collection",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "cursor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "perPage",
        type: "uint256",
      },
    ],
    name: "uint256s",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x611ef3610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c806320027aba1461005b5780633152ca341461008c578063bd33e7e6146100bd578063f135976a146100ee575b600080fd5b61007560048036038101906100709190611634565b61011f565b604051610083929190611a68565b60405180910390f35b6100a660048036038101906100a191906115cd565b6104cd565b6040516100b4929190611a38565b60405180910390f35b6100d760048036038101906100d29190611566565b610885565b6040516100e5929190611a08565b60405180910390f35b610108600480360381019061010391906114ff565b610c3d565b6040516101169291906119d8565b60405180910390f35b6060600061014f7f990cc816169af3a685aa8178292067809d9eb5375ba3a277246296b04b0d01c560001b611019565b61017b7fb6597effc5769d5e641784021fa365abdb781a142e9bf1d5c6652c3ff8d1371a60001b611019565b6101a77f8383c07dfc2f72475d4a334c1ff7c109d8ec16f8641a2cbb5e3d6169cb7b461660001b611019565b6000855190506101d97fa134ead5e068cb758e4fb366dd5e4bfdd677220bab04a6c341b43e690df24b7c60001b611019565b6102057ff5e7ec09d0e5cb273d7063fd3effd3b5df85776e08704bb07939ead61124f0df60001b611019565b600085826102139190611cf4565b851161021f578461022c565b858261022b9190611cf4565b5b905061025a7fbdb2e58c2e243c4581261a5c80c5ef6f8f8bc757a1d9d6e39938f4e74931f3cb60001b611019565b6102867fdc24b745c8ed8348d3fccffd2549735b9512d7583e685553235fba5220ee9fa060001b611019565b60008167ffffffffffffffff8111156102c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156102f65781602001602082028036833780820191505090505b5090506103257f02f0a8037cb57acefe0c8d4782fab37df5f485d5cbda1171e12732053d5d77f360001b611019565b6103517fb95aa02a4fec240f9b89e419913e0ab868ac16a8f5cf6f7393b9be9be6315c0960001b611019565b60005b82811015610458576103887f1863af10ce46edaec9eb19f4781ea7485b9a7f0703414cf816e389c3dd58d5e560001b611019565b6103b47fd34cbe1827bfe77e64f0ff9108eb6e8e9044c851d2272b8fe5ea4cbbefab89e160001b611019565b8881896103c19190611c9e565b815181106103f8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151828281518110610439577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061045090611dd7565b915050610354565b506104857ff6d9c6bd02fd48362ef90edbf24f5589f19b32cff522155ee611c3b4c25635e260001b611019565b6104b17f58d8d22ed26ff6c4be7c2ef2d81fcdf7d470909d7a50fc182347367deb121fcd60001b611019565b8082886104be9190611c9e565b94509450505050935093915050565b606060006104fd7f962c66d4d4fccabf0d55ea7ad6af2bddc68d7f73cfdb3a367646a19f3676fca160001b611019565b6105297f293b0aae9086ee0f794aec4d1c7a6da32c4811e99aea2c9ec39af6efcaf4f67760001b611019565b6105557f38cd87d3e600de533b36bedd1523353856aabfabea532aa1f21bf9a0578e696460001b611019565b6000855190506105877f975e462eb16298e1e7f97e1cbc9e8b0da38e12e17c40c7d485bf3668c2e33f3860001b611019565b6105b37fb3fa5d84e577feb2040eb3dc77b0fe8d754c559ad22cd256e175ecc60d27cc3d60001b611019565b600085826105c19190611cf4565b85116105cd57846105da565b85826105d99190611cf4565b5b90506106087fb8c54dde3fe3aa7ebfdd210070cd14a4ed892104be3e4bfd0fbe5f9bccee777f60001b611019565b6106347f9e6cb07ce80c57e769c76b0da0972afd6ab7f51d1578870e71d07d3cad8f311660001b611019565b60008167ffffffffffffffff811115610676577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156106af57816020015b61069c61101c565b8152602001906001900390816106945790505b5090506106de7fc735309b24ff47e3bb83a8832fa85bdde7ca072792c29f0ca2e9671ca66b757260001b611019565b61070a7f0547ad4c92495df0cb471e61bbd8c282f5de93dcd75c034650341c9704e1f62e60001b611019565b60005b82811015610810576107417fa4f3303dda82625fa6a00f5f923e8afc9ebfabccaa0a619374e6363df711435860001b611019565b61076d7f56c43e2b107dea1354229189df73418f2e391e31b0ac070d29f5c6e23aabb4a960001b611019565b88818961077a9190611c9e565b815181106107b1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518282815181106107f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250808061080890611dd7565b91505061070d565b5061083d7f930a6d44ca33c95ab61772aadec59a4e203ccd3bbde29c9c11e5d4633dc85a1c60001b611019565b6108697ff2d6e1dd2f66260fbfc3ffb4d8953b6ff412a666d44ba4ea801de40c3aad1c7260001b611019565b8082886108769190611c9e565b94509450505050935093915050565b606060006108b57fa65ce8629e4c65f8e20b7da0ec23358be75ba980ff93e6ab91ddf077aeb1c59960001b611019565b6108e17fda665d19acef247b095c631ce43f33f93bf43014af222cc8db4197bf279677cd60001b611019565b61090d7f02423d98dea3e55f948792b4c75df61346b3852f033f1e3545ad6fe65ed6f03d60001b611019565b60008551905061093f7f3f2f006edc755ac4803b49601f3301445c5539b8056df454ab45e7fe3730e56360001b611019565b61096b7f356a6e98f3c75e854568b9b0b115c68622e810299e45e70feedddee07a8f4b5b60001b611019565b600085826109799190611cf4565b85116109855784610992565b85826109919190611cf4565b5b90506109c07fe041f79a9409f736c835ee97fa47cc9c62c13d6587fa11a15ecbc9fd93c755b760001b611019565b6109ec7f11176e405b29ad391d7256035ee0436914ba2a1e8712057bf6bee521ce81565460001b611019565b60008167ffffffffffffffff811115610a2e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610a6757816020015b610a54611094565b815260200190600190039081610a4c5790505b509050610a967fdc68632332bbee063a15689b86646dead05e49d43f983d02ff6d8cf943dc68b460001b611019565b610ac27f62a5456c2b42c0799d1fa5fb7da55e5d4073ec94658759c2b2c7fade3a1fd5f960001b611019565b60005b82811015610bc857610af97fcbbd797e52cb32301d9172e4a958aa3203ee317cfba117e37aca0b0b74f4110d60001b611019565b610b257f9e74f686ebc0bd171ad1c80977b26c220e6c01191566ec9aca85713a306e4b7f60001b611019565b888189610b329190611c9e565b81518110610b69577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151828281518110610baa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508080610bc090611dd7565b915050610ac5565b50610bf57f694a47fe5a70a35402d7ea372da7fd22c36981bf6deff0ffe0652e49814c9dfe60001b611019565b610c217ffd40b94626f74000e724936f2d8ced5fce31a39e865973a16f7d8175ad480d2460001b611019565b808288610c2e9190611c9e565b94509450505050935093915050565b60606000610c6d7f1196706d9eed5c964c663c04b716ff4c7738b9ef6d405c7e6c7381c603007f1360001b611019565b610c997fcd6058163e13c6a48ad680106b841ed5481eece885e1d1fac66de4d1872e7c9060001b611019565b610cc57ffa2ef3ddec681c6d04b202fdf5c1d41b3648e15cf8cad632456de54a4ecabb7860001b611019565b600085519050610cf77f90aece92a4eca6c72f4d385c7507495e4b18bc72d01d4f8194ce44fe4bc049b960001b611019565b610d237fcc8a566493d542a98c00e63b7d96f15f2525577f647060c8887c0a6168939bcc60001b611019565b60008582610d319190611cf4565b8511610d3d5784610d4a565b8582610d499190611cf4565b5b9050610d787feadeac9544792fd82d8034738f1bc22c75017fb00999ee0cce5b469440f23d9b60001b611019565b610da47fac28a54659010f73aafd5ac9bcb9d6b76ba23039ef6edc1c3d93a0122994d18f60001b611019565b60008167ffffffffffffffff811115610de6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610e145781602001602082028036833780820191505090505b509050610e437f38a71ca1ae551e10b8ee89edf6623618de7cfa3830d5ffc7f5af722f45ad8b9f60001b611019565b610e6f7f88f16b5656e241a69f64f02097198dafe633eabbed2b5f3e5ee5ebc4b2ff969a60001b611019565b60005b82811015610fa457610ea67ff87962c5c56cd84ab56c225341f15e91ee16442382c99e35f66cd8452a0b2f0d60001b611019565b610ed27f2674806cabdf34059c42b89400a3af25a277e3337501c2e21290384947ee7c8260001b611019565b888189610edf9190611c9e565b81518110610f16577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151828281518110610f57577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080610f9c90611dd7565b915050610e72565b50610fd17f2f10af5a61d39bc555e709794a8ff76d63cf8ae139436c756bde9da0e4c51ef360001b611019565b610ffd7fb1f0d7dfd7ea1897665c864907d82c111f498e80644d3837362bc4c53e6340f160001b611019565b80828861100a9190611c9e565b94509450505050935093915050565b50565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b60405180606001604052806000815260200160008152602001606081525090565b60006110c86110c384611abd565b611a98565b905080838252602082019050828560208602820111156110e757600080fd5b60005b8581101561111757816110fd88826112d7565b8452602084019350602083019250506001810190506110ea565b5050509392505050565b600061113461112f84611ae9565b611a98565b9050808382526020820190508285602086028201111561115357600080fd5b60005b8581101561119d57813567ffffffffffffffff81111561117557600080fd5b80860161118289826113be565b85526020850194506020840193505050600181019050611156565b5050509392505050565b60006111ba6111b584611b15565b611a98565b905080838252602082019050828560208602820111156111d957600080fd5b60005b8581101561122357813567ffffffffffffffff8111156111fb57600080fd5b8086016112088982611436565b855260208501945060208401935050506001810190506111dc565b5050509392505050565b600061124061123b84611b41565b611a98565b9050808382526020820190508285602086028201111561125f57600080fd5b60005b8581101561128f578161127588826114ea565b845260208401935060208301925050600181019050611262565b5050509392505050565b60006112ac6112a784611b6d565b611a98565b9050828152602081018484840111156112c457600080fd5b6112cf848285611d64565b509392505050565b6000813590506112e681611e8f565b92915050565b600082601f8301126112fd57600080fd5b813561130d8482602086016110b5565b91505092915050565b600082601f83011261132757600080fd5b8135611337848260208601611121565b91505092915050565b600082601f83011261135157600080fd5b81356113618482602086016111a7565b91505092915050565b600082601f83011261137b57600080fd5b813561138b84826020860161122d565b91505092915050565b600082601f8301126113a557600080fd5b81356113b5848260208601611299565b91505092915050565b6000606082840312156113d057600080fd5b6113da6060611a98565b905060006113ea848285016114ea565b60008301525060206113fe848285016114ea565b602083015250604082013567ffffffffffffffff81111561141e57600080fd5b61142a84828501611394565b60408301525092915050565b600060c0828403121561144857600080fd5b61145260c0611a98565b90506000611462848285016112d7565b6000830152506020611476848285016112d7565b602083015250604061148a848285016112d7565b604083015250606061149e848285016114ea565b60608301525060806114b2848285016114ea565b60808301525060a082013567ffffffffffffffff8111156114d257600080fd5b6114de84828501611394565b60a08301525092915050565b6000813590506114f981611ea6565b92915050565b60008060006060848603121561151457600080fd5b600084013567ffffffffffffffff81111561152e57600080fd5b61153a868287016112ec565b935050602061154b868287016114ea565b925050604061155c868287016114ea565b9150509250925092565b60008060006060848603121561157b57600080fd5b600084013567ffffffffffffffff81111561159557600080fd5b6115a186828701611316565b93505060206115b2868287016114ea565b92505060406115c3868287016114ea565b9150509250925092565b6000806000606084860312156115e257600080fd5b600084013567ffffffffffffffff8111156115fc57600080fd5b61160886828701611340565b9350506020611619868287016114ea565b925050604061162a868287016114ea565b9150509250925092565b60008060006060848603121561164957600080fd5b600084013567ffffffffffffffff81111561166357600080fd5b61166f8682870161136a565b9350506020611680868287016114ea565b9250506040611691868287016114ea565b9150509250925092565b60006116a783836116f3565b60208301905092915050565b60006116bf83836118e1565b905092915050565b60006116d38383611931565b905092915050565b60006116e783836119c9565b60208301905092915050565b6116fc81611d28565b82525050565b600061170d82611bde565b6117178185611c49565b935061172283611b9e565b8060005b8381101561175357815161173a888261169b565b975061174583611c15565b925050600181019050611726565b5085935050505092915050565b600061176b82611be9565b6117758185611c5a565b93508360208202850161178785611bae565b8060005b858110156117c357848403895281516117a485826116b3565b94506117af83611c22565b925060208a0199505060018101905061178b565b50829750879550505050505092915050565b60006117e082611bf4565b6117ea8185611c6b565b9350836020820285016117fc85611bbe565b8060005b85811015611838578484038952815161181985826116c7565b945061182483611c2f565b925060208a01995050600181019050611800565b50829750879550505050505092915050565b600061185582611bff565b61185f8185611c7c565b935061186a83611bce565b8060005b8381101561189b57815161188288826116db565b975061188d83611c3c565b92505060018101905061186e565b5085935050505092915050565b60006118b382611c0a565b6118bd8185611c8d565b93506118cd818560208601611d73565b6118d681611e7e565b840191505092915050565b60006060830160008301516118f960008601826119c9565b50602083015161190c60208601826119c9565b506040830151848203604086015261192482826118a8565b9150508091505092915050565b600060c08301600083015161194960008601826116f3565b50602083015161195c60208601826116f3565b50604083015161196f60408601826116f3565b50606083015161198260608601826119c9565b50608083015161199560808601826119c9565b5060a083015184820360a08601526119ad82826118a8565b9150508091505092915050565b6119c381611d5a565b82525050565b6119d281611d5a565b82525050565b600060408201905081810360008301526119f28185611702565b9050611a0160208301846119ba565b9392505050565b60006040820190508181036000830152611a228185611760565b9050611a3160208301846119ba565b9392505050565b60006040820190508181036000830152611a5281856117d5565b9050611a6160208301846119ba565b9392505050565b60006040820190508181036000830152611a82818561184a565b9050611a9160208301846119ba565b9392505050565b6000611aa2611ab3565b9050611aae8282611da6565b919050565b6000604051905090565b600067ffffffffffffffff821115611ad857611ad7611e4f565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611b0457611b03611e4f565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611b3057611b2f611e4f565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611b5c57611b5b611e4f565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611b8857611b87611e4f565b5b611b9182611e7e565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611ca982611d5a565b9150611cb483611d5a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ce957611ce8611e20565b5b828201905092915050565b6000611cff82611d5a565b9150611d0a83611d5a565b925082821015611d1d57611d1c611e20565b5b828203905092915050565b6000611d3382611d3a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611d91578082015181840152602081019050611d76565b83811115611da0576000848401525b50505050565b611daf82611e7e565b810181811067ffffffffffffffff82111715611dce57611dcd611e4f565b5b80604052505050565b6000611de282611d5a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611e1557611e14611e20565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b611e9881611d28565b8114611ea357600080fd5b50565b611eaf81611d5a565b8114611eba57600080fd5b5056fea26469706673582212208bd917e6957c6496fe5937fbb52b74bcae3a8735b485c69dccf07ceebd0255c364736f6c63430008040033";

type PaginationLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PaginationLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PaginationLib__factory extends ContractFactory {
  constructor(...args: PaginationLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PaginationLib> {
    return super.deploy(overrides || {}) as Promise<PaginationLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PaginationLib {
    return super.attach(address) as PaginationLib;
  }
  override connect(signer: Signer): PaginationLib__factory {
    return super.connect(signer) as PaginationLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PaginationLibInterface {
    return new utils.Interface(_abi) as PaginationLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PaginationLib {
    return new Contract(address, _abi, signerOrProvider) as PaginationLib;
  }
}
