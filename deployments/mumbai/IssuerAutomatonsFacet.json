{
  "address": "0x23Be0C4f0b2B088A93E5C5fE7cc2c2C2ed822a7A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresAutomatonsManager",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "automaton",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "privileges",
          "type": "uint32"
        }
      ],
      "name": "AutomatonPrivilegesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "automaton",
          "type": "address"
        }
      ],
      "name": "AutomatonRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fast",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "oldGroup",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "newGroup",
          "type": "string"
        }
      ],
      "name": "FastGroupChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fast",
          "type": "address"
        }
      ],
      "name": "FastRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fast",
          "type": "address"
        }
      ],
      "name": "FastUnregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fast",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "GovernorshipAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fast",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "GovernorshipRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "automaton",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "privilege",
          "type": "uint32"
        }
      ],
      "name": "automatonCan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "automatonCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "automaton",
          "type": "address"
        }
      ],
      "name": "automatonPrivileges",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        }
      ],
      "name": "isAutomaton",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perPage",
          "type": "uint256"
        }
      ],
      "name": "paginateAutomatons",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        }
      ],
      "name": "removeAutomaton",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "privileges",
          "type": "uint32"
        }
      ],
      "name": "setAutomatonPrivileges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x52cd6a8ca61f26e1e2f93ca16281f31a5dd71855254e9f23679336f276d8b909",
  "receipt": {
    "to": "0x6DF2D25d8C6FD680730ee658b530A05a99BB769a",
    "from": "0x717634cfe06FFAB2CEAA7fcf1b9019813f4B25FE",
    "contractAddress": null,
    "transactionIndex": 4,
    "gasUsed": "710556",
    "logsBloom": "0x
    "blockHash": "0xc4deaa8f600107d58ff63c06075d582be4805444fde16fcaf937e18855588554",
    "transactionHash": "0x52cd6a8ca61f26e1e2f93ca16281f31a5dd71855254e9f23679336f276d8b909",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 37041069,
        "transactionHash": "0x52cd6a8ca61f26e1e2f93ca16281f31a5dd71855254e9f23679336f276d8b909",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000717634cfe06ffab2ceaa7fcf1b9019813f4b25fe",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000050c7e6bf230000000000000000000000000000000000000000000000000001f39ca075da9e59e000000000000000000000000000000000000000000002049d5e2164abedb43c40000000000000000000000000000000000000000000000001f34bd88f1b7b59e000000000000000000000000000000000000000000002049d5e722c92acd73c4",
        "logIndex": 16,
        "blockHash": "0xc4deaa8f600107d58ff63c06075d582be4805444fde16fcaf937e18855588554"
      }
    ],
    "blockNumber": 37041069,
    "cumulativeGasUsed": "1321806",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "5460a1ef181a4ee1ce5c8952690c0806",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresAutomatonsManager\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"automaton\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"privileges\",\"type\":\"uint32\"}],\"name\":\"AutomatonPrivilegesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"automaton\",\"type\":\"address\"}],\"name\":\"AutomatonRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fast\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"oldGroup\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newGroup\",\"type\":\"string\"}],\"name\":\"FastGroupChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fast\",\"type\":\"address\"}],\"name\":\"FastRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fast\",\"type\":\"address\"}],\"name\":\"FastUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fast\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"GovernorshipAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fast\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"GovernorshipRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"automaton\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"privilege\",\"type\":\"uint32\"}],\"name\":\"automatonCan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"automatonCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"automaton\",\"type\":\"address\"}],\"name\":\"automatonPrivileges\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isAutomaton\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perPage\",\"type\":\"uint256\"}],\"name\":\"paginateAutomatons\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"removeAutomaton\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"privileges\",\"type\":\"uint32\"}],\"name\":\"setAutomatonPrivileges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"automatonCount()\":{\"returns\":{\"_0\":\"The number of automatons in this marketplace.\"}},\"automatonPrivileges(address)\":{\"params\":{\"automaton\":\"is the address to test.\"},\"returns\":{\"_0\":\"An `uint256` bitfield.\"}},\"isAutomaton(address)\":{\"params\":{\"candidate\":\"is the address to test.\"},\"returns\":{\"_0\":\"A `boolean` flag.\"}},\"paginateAutomatons(uint256,uint256)\":{\"params\":{\"cursor\":\"is the index at which to start.\",\"perPage\":\"is how many records should be returned at most.\"},\"returns\":{\"_0\":\"A `address[]` list of values at most `perPage` big.\",\"_1\":\"A `uint256` index to the next page.\"}},\"removeAutomaton(address)\":{\"params\":{\"candidate\":\"is the automaton to remove.\"}},\"setAutomatonPrivileges(address,uint32)\":{\"params\":{\"candidate\":\"is the automaton address to which the privileges should be assigned.\",\"privileges\":\"is a bitfield of privileges to apply.\"}}},\"title\":\"The Issuer Smart Contract.\",\"version\":1},\"userdoc\":{\"errors\":{\"RequiresAutomatonsManager(address)\":[{\"notice\":\"Errors.\"}]},\"events\":{\"AutomatonPrivilegesSet(address,uint32)\":{\"notice\":\"Emited when an automaton is added or changed.\"},\"AutomatonRemoved(address)\":{\"notice\":\"Emited when an automaton is removed.\"},\"FastGroupChanged(address,string,string)\":{\"notice\":\"FAST groupping events.\"},\"FastRegistered(address)\":{\"notice\":\"Emited when a new FAST is registered.\"},\"FastUnregistered(address)\":{\"notice\":\"Emited when a FAST is removed from the Issuer contract.\"},\"GovernorshipRemoved(address,address)\":{\"notice\":\"Governors.\"}},\"kind\":\"user\",\"methods\":{\"automatonCount()\":{\"notice\":\"Counts the numbers of automatons present in this Fast.\"},\"automatonPrivileges(address)\":{\"notice\":\"Returns the privileges for a given automaton address, or zero if no privileges exist.\"},\"isAutomaton(address)\":{\"notice\":\"Queries whether a given address is an automaton for this Fast or not.\"},\"paginateAutomatons(uint256,uint256)\":{\"notice\":\"Paginates the automatons of this Fast based on a starting cursor and a number of records per page.\"},\"removeAutomaton(address)\":{\"notice\":\"Removes an automaton completely.\"},\"setAutomatonPrivileges(address,uint32)\":{\"notice\":\"Sets privileges for a given automaton address.\"}},\"notice\":\"The Issuer Automatons facet is in charge of keeping track of automaton accounts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/issuer/IssuerAutomatonsFacet.sol\":\"IssuerAutomatonsFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/common/AHasAutomatons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../lib/LibAddressSet.sol\\\";\\nimport \\\"../lib/LibPaginate.sol\\\";\\nimport \\\"../common/lib/LibHasAutomatons.sol\\\";\\n\\n/**\\n * @title The Fast Smart Contract.\\n * @notice The Fast Automatons abstract contract is in charge of keeping track of automaton accounts.\\n */\\nabstract contract AHasAutomatons {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Errors.\\n\\n  error RequiresAutomatonsManager(address who);\\n\\n  /// Events.\\n\\n  /**\\n   * @notice Emited when an automaton is added or changed.\\n   * @param automaton is the address of the automaton.\\n   * @param privileges is the new bitfield assigned to this automaton.\\n   */\\n  event AutomatonPrivilegesSet(address indexed automaton, uint32 indexed privileges);\\n\\n  /**\\n   * @notice Emited when an automaton is removed.\\n   * @param automaton is the address of the removed automaton.\\n   */\\n  event AutomatonRemoved(address indexed automaton);\\n\\n  // Must be overriden.\\n  function isAutomatonsManager(address who) internal view virtual returns (bool);\\n\\n  // May be overriden.\\n  function onAutomatonAdded(address member) internal virtual {}\\n\\n  // May be overriden.\\n  function onAutomatonRemoved(address member) internal virtual {}\\n\\n  /// Automatons management.\\n\\n  /**\\n   * @notice Queries whether a given address is an automaton for this Fast or not.\\n   * @param candidate is the address to test.\\n   * @return A `boolean` flag.\\n   */\\n  function isAutomaton(address candidate) external view returns (bool) {\\n    return LibHasAutomatons.data().automatonSet.contains(candidate);\\n  }\\n\\n  /**\\n   * @notice Returns the privileges for a given automaton address, or zero if no privileges exist.\\n   * @param automaton is the address to test.\\n   * @return An `uint256` bitfield.\\n   */\\n  function automatonPrivileges(address automaton) external view returns (uint32) {\\n    return LibHasAutomatons.data().automatonPrivileges[automaton];\\n  }\\n\\n  function automatonCan(address automaton, uint32 privilege) external view returns (bool) {\\n    return (LibHasAutomatons.data().automatonPrivileges[automaton] & privilege) != 0;\\n  }\\n\\n  /**\\n   * @notice Counts the numbers of automatons present in this Fast.\\n   * @return The number of automatons in this marketplace.\\n   */\\n  function automatonCount() external view returns (uint256) {\\n    return LibHasAutomatons.data().automatonSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Paginates the automatons of this Fast based on a starting cursor and a number of records per page.\\n   * @param cursor is the index at which to start.\\n   * @param perPage is how many records should be returned at most.\\n   * @return A `address[]` list of values at most `perPage` big.\\n   * @return A `uint256` index to the next page.\\n   */\\n  function paginateAutomatons(uint256 cursor, uint256 perPage) external view returns (address[] memory, uint256) {\\n    return LibPaginate.addresses(LibHasAutomatons.data().automatonSet.values, cursor, perPage);\\n  }\\n\\n  /**\\n   * @notice Sets privileges for a given automaton address.\\n   * @param candidate is the automaton address to which the privileges should be assigned.\\n   * @param privileges is a bitfield of privileges to apply.\\n   */\\n  function setAutomatonPrivileges(address candidate, uint32 privileges) external onlyAutomatonManager(msg.sender) {\\n    LibHasAutomatons.Data storage ds = LibHasAutomatons.data();\\n    ds.automatonSet.add(candidate, true);\\n    ds.automatonPrivileges[candidate] = privileges;\\n    emit AutomatonPrivilegesSet(candidate, privileges);\\n  }\\n\\n  /**\\n   * @notice Removes an automaton completely.\\n   * @param candidate is the automaton to remove.\\n   */\\n  function removeAutomaton(address candidate) external onlyAutomatonManager(msg.sender) {\\n    LibHasAutomatons.Data storage ds = LibHasAutomatons.data();\\n    ds.automatonSet.remove(candidate, false);\\n    delete ds.automatonPrivileges[candidate];\\n    emit AutomatonRemoved(candidate);\\n  }\\n\\n  /// Modifiers.\\n\\n  modifier onlyAutomatonManager(address who) {\\n    if (!isAutomatonsManager(who)) revert RequiresAutomatonsManager(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x953780331b801357c0324bc901c9d11733823f3e424fde528eb9524f704499e0\",\"license\":\"MIT\"},\"contracts/common/AHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../lib/LibAddressSet.sol\\\";\\nimport \\\"../lib/LibPaginate.sol\\\";\\nimport \\\"../common/lib/LibHasMembers.sol\\\";\\nimport \\\"../interfaces/ICustomErrors.sol\\\";\\n\\n/**\\n * @title The Fast Smart Contract.\\n * @notice The Fast Members abstract contract is in charge of keeping track of automaton accounts.\\n */\\nabstract contract AHasMembers {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Errors.\\n\\n  /// @notice Happens when a function is called by an address that is not a members manager.\\n  error RequiresMembersManager(address who);\\n  /// @notice Happens when an address is used as a member but is not valid.\\n  error RequiresValidMember(address who);\\n\\n  /// Events.\\n\\n  /**\\n   * @notice Emited when a member is added to the implementing contract.\\n   * @param member is the address of the added member.\\n   */\\n  event MemberAdded(address indexed member);\\n  /**\\n   * @notice Emited when a member is removed to the implementing contract.\\n   * @param member is the address of the removed member.\\n   */\\n  event MemberRemoved(address indexed member);\\n\\n  /**\\n   * @notice Checks whether the given address is a members manager or not.\\n   * @dev Must be implemented by the inheriting contract.\\n   * @param who is the address to test.\\n   */\\n  function isMembersManager(address who) internal view virtual returns (bool);\\n\\n  /**\\n   * @notice Checks whether the given address can be added as a member or not.\\n   * @dev Must be implemented by the inheriting contract.\\n   * @param who is the address to test.\\n   */\\n  function isValidMember(address who) internal view virtual returns (bool);\\n\\n  /**\\n   * @notice This callback is called when a member is added to the contract.\\n   * @dev May be overriden by the inheriting contract.\\n   * @param member is the address which was added.\\n   */\\n  function onMemberAdded(address member) internal virtual {}\\n\\n  /**\\n   * @notice This callback is called when a member is removed to the contract.\\n   * @dev May be overriden by the inheriting contract.\\n   * @param member is the address which was removed.\\n   */\\n  function onMemberRemoved(address member) internal virtual {}\\n\\n  // Members management.\\n\\n  /**\\n   * @notice Queries whether a given address is a member or not.\\n   * @param who is the address to test.\\n   * @return A `bool` equal to `true` when `candidate` is a member.\\n   */\\n  function isMember(address who) external view returns (bool) {\\n    return LibHasMembers.data().memberSet.contains(who);\\n  }\\n\\n  /**\\n   * @notice Queries the number of members.\\n   * @return An `uint256`.\\n   */\\n  function memberCount() external view returns (uint256) {\\n    return LibHasMembers.data().memberSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Queries pages of members based on a start index and a page size.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginateMembers(uint256 index, uint256 perPage) external view returns (address[] memory, uint256) {\\n    return LibPaginate.addresses(LibHasMembers.data().memberSet.values, index, perPage);\\n  }\\n\\n  /**\\n   * @notice Adds a member to the list of known members.\\n   * @param who is the address to be added.\\n   */\\n  function addMember(address who) external onlyMemberManager(msg.sender) onlyValidMember(who) {\\n    // Add the member.\\n    LibHasMembers.data().memberSet.add(who, false);\\n    // Notify via callback.\\n    onMemberAdded(who);\\n    // Emit!\\n    emit MemberAdded(who);\\n  }\\n\\n  /**\\n   * @notice Removes a member from this contract.\\n   * @param member The address of the member to be removed.\\n   * @notice Requires that the caller is a member of this Issuer.\\n   * @notice Emits a `AHasMembers.MemberRemoved` event.\\n   */\\n  function removeMember(address member) external onlyMemberManager(msg.sender) {\\n    // Notify via callback.\\n    onMemberRemoved(member);\\n    // Remove member.\\n    LibHasMembers.data().memberSet.remove(member, false);\\n    // Emit!\\n    emit MemberRemoved(member);\\n  }\\n\\n  /// Modifiers.\\n\\n  modifier onlyMemberManager(address who) {\\n    if (!isMembersManager(who)) revert RequiresMembersManager(who);\\n    _;\\n  }\\n\\n  modifier onlyValidMember(address who) {\\n    if (!isValidMember(who)) revert RequiresValidMember(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xe9876fc4ec6dadc0d7e37e5562cb359b4b1dc6d188651893e73fc541be1e56a3\",\"license\":\"MIT\"},\"contracts/common/lib/LibHasAutomatons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../lib/LibAddressSet.sol\\\";\\n\\nlibrary LibHasAutomatons {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is `keccak256('HasAutomatons.storage.Main')`.\\n  bytes32 internal constant STORAGE_SLOT = 0x3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b9183;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we hold our automatons data.\\n    LibAddressSet.Data automatonSet;\\n    /// @notice This is where we store privileges for each of our automaton account.\\n    mapping(address => uint32) automatonPrivileges;\\n  }\\n\\n  function data() internal pure returns (Data storage s) {\\n    assembly {\\n      s.slot := STORAGE_SLOT\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4fea753864796a68c0b1ef3137fcc43c3707a426e5f4ef37b35711ed77be34d3\",\"license\":\"MIT\"},\"contracts/common/lib/LibHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../lib/LibAddressSet.sol\\\";\\n\\nlibrary LibHasMembers {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is `keccak256('HasMembers.storage.Main')`.\\n  bytes32 internal constant STORAGE_SLOT = 0xd56529bfa3ed57257eed4751494e1d0c0f212cfe38768380e006e3bee06ffb91;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we hold our automatons data.\\n    LibAddressSet.Data memberSet;\\n  }\\n\\n  function data() internal pure returns (Data storage s) {\\n    assembly {\\n      s.slot := STORAGE_SLOT\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x03ea8d9c47249e9456deba85130e859afd6eba800e330527bcb9bc3438adb6a4\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastHistory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @notice This library centralises shared functionality between FAST diamonds facets that have to do with transfer\\n * history tracking.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable.\\n */\\nlibrary LibFastHistory {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage.History'):\\n  bytes32 internal constant STORAGE_SLOT = 0x6bc8b61a9dd5fc049ea98027492a801d74e35fdf4d80d7fecd551a16e88fdbb4;\\n\\n  // Storage structures.\\n\\n  /**\\n   * @notice The history data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice All minting proofs are kept here.\\n    SupplyProof[] supplyProofs;\\n    /// @notice All transfer proofs are kept here.\\n    TransferProof[] transferProofs;\\n    /// @notice All transfers indices involving a given address are kept here.\\n    mapping(address => uint256[]) transferProofInvolvements;\\n  }\\n\\n  // Other structures.\\n\\n  /// @notice A minting operation could either be to mint or burn tokens.\\n  enum SupplyOp {\\n    Mint,\\n    Burn\\n  }\\n\\n  /// @notice Minting operations are recorded for papertrail. This is the structure that keeps track of them.\\n  struct SupplyProof {\\n    /// @notice How...\\n    SupplyOp op;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /// @notice Every transfer in is recorded. This is the structure that keeps track of them.\\n  struct TransferProof {\\n    /// @notice Who spent...\\n    address spender;\\n    /// @notice Who performed the transfer...\\n    address from;\\n    /// @notice Who received...\\n    address to;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /**\\n   * @notice Returns the history storage for the calling FAST.\\n   * @return s a struct pointer for history FAST data storage.\\n   */\\n  function data() internal pure returns (Data storage s) {\\n    assembly {\\n      s.slot := STORAGE_SLOT\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x21e2cb01ca5bc6109080cd9695296e4ae346a2936c8cae3b3c0b68cef9a90a5e\",\"license\":\"MIT\"},\"contracts/interfaces/ICustomErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface ICustomErrors {\\n  error AlreadyInitialized();\\n  error CannotSelfRemove(address who);\\n  error DuplicateEntry();\\n  error InconsistentParameter(string param);\\n  error InsufficientFunds(uint256 amount);\\n  error InternalMethod();\\n  error InvalidPhase();\\n  error NonExistentEntry();\\n  error Overfunded(uint256 amount);\\n  error ReentrancyError();\\n  error RequiresAutomatonsManager(address who);\\n  error RequiresContinuousSupply();\\n  error RequiresDiamondOwnership(address who);\\n  error RequiresDifferentSenderAndRecipient(address a);\\n  error RequiresFastCaller();\\n  error RequiresFastContractCaller();\\n  error RequiresFastGovernorship(address who);\\n  error RequiresFastMemberCaller();\\n  error RequiresFastMembership(address who);\\n  error RequiresGovernorsManager(address who);\\n  error RequiresIssuerMemberCaller();\\n  error RequiresIssuerMembership(address who);\\n  error RequiresManagerCaller();\\n  error RequiresMarketplaceActiveMembership(address who);\\n  error RequiresMarketplaceDeactivatedMember(address who);\\n  error RequiresMarketplaceMembership(address who);\\n  error RequiresMembersManager(address who);\\n  error RequiresNoFastMemberships(address who);\\n  error RequiresOwner(address who);\\n  error RequiresPositiveBalance(address holder);\\n  error RequiresTransfersEnabled();\\n  error RequiresValidGovernor(address who);\\n  error RequiresValidMember(address who);\\n  error RequiresValidTokenHolder(address who);\\n  error TokenContractError();\\n  error UnknownBeneficiary(address who);\\n  error UnknownPledger(address who);\\n  error UnsupportedOperation();\\n}\\n\",\"keccak256\":\"0x5d5a985bef50b39eadd294ac737f133ac237bd446ef9837c4542b53deeb12159\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title ERC173 Contract Ownership Standard\\n * @dev The ERC165 identifier for this interface is 0x7f5828d0.\\n */\\ninterface IERC173 {\\n  /// @notice This emits when ownership of a contract changes.\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /// @notice Get the address of the owner\\n  /// @return owner_ The address of the owner.\\n  function owner() external view returns (address owner_);\\n\\n  /// @notice Set the address of the new owner of the contract\\n  /// @notice Set _newOwner to address(0) to renounce any ownership.\\n  /// @param _newOwner The address of the new owner of the contract\\n  function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x797855e7870ec3c9f32dda93166bd12dc19fec66cc9a8a7a58f03339a31439c0\",\"license\":\"MIT\"},\"contracts/issuer/IssuerAutomatonsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./lib/AIssuerFacet.sol\\\";\\nimport \\\"../common/AHasAutomatons.sol\\\";\\n\\n// Privileges bits.\\nuint32 constant ISSUER_PRIVILEGE_CREATE_CROWDFUNDS = 1;\\n\\n/**\\n * @title The Issuer Smart Contract.\\n * @notice The Issuer Automatons facet is in charge of keeping track of automaton accounts.\\n */\\ncontract IssuerAutomatonsFacet is AIssuerFacet, AHasAutomatons {\\n  /// Constants etc.\\n\\n  /// Automatons management.\\n\\n  function isAutomatonsManager(address who) internal view override(AHasAutomatons) returns (bool) {\\n    return AHasMembers(address(this)).isMember(who);\\n  }\\n}\\n\",\"keccak256\":\"0xcdafd3434033ce2eca5b78951898c166d7dfaad3d97956ae6f8491d9dd4f8841\",\"license\":\"MIT\"},\"contracts/issuer/lib/AIssuerFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../lib/LibHelpers.sol\\\";\\nimport \\\"../../common/AHasMembers.sol\\\";\\nimport \\\"../../interfaces/ICustomErrors.sol\\\";\\nimport \\\"./IIssuerEvents.sol\\\";\\n\\n/**\\n * @notice This abstract contract encapsulates modifiers allowing inheriting facets to guard against\\n * certain permissions.\\n */\\nabstract contract AIssuerFacet is IIssuerEvents {\\n  /// Modifiers.\\n\\n  /// @notice Ensures that a method can only be called by another facet of the same diamond.\\n  modifier onlyDiamondFacet() {\\n    if (!LibHelpers._isDiamondFacet(msg.sender)) revert ICustomErrors.InternalMethod();\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the owner of this diamond.\\n  modifier onlyDiamondOwner() {\\n    if (!LibHelpers._isDiamondOwner(msg.sender)) revert ICustomErrors.RequiresDiamondOwnership(msg.sender);\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier onlyDeployer() {\\n    if (!LibHelpers._isDeployer(msg.sender)) revert ICustomErrors.InternalMethod();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a member of the FAST.\\n   * @param who The address to check.\\n   */\\n  modifier onlyMember(address who) {\\n    if (!AHasMembers(address(this)).isMember(who)) revert ICustomErrors.RequiresIssuerMembership(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x4ab53f3e2ce4e78f13c93f46c10c581c0b5ebc520979191d6092d2d7f7aa733c\",\"license\":\"MIT\"},\"contracts/issuer/lib/IIssuerEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n// WARNING: These events must be maintained 1:1 with LibIssuerEvents!\\n// They also should never be emitted directly, they only help us defining\\n// typescript types!\\ninterface IIssuerEvents {\\n  /// FAST registration events.\\n\\n  /**\\n   * @notice Emited when a new FAST is registered.\\n   * @param fast The address of the newly registered FAST diamond.\\n   */\\n  event FastRegistered(address indexed fast);\\n  /**\\n   * @notice Emited when a FAST is removed from the Issuer contract.\\n   * @param fast The address of the unregistered FAST.\\n   */\\n  event FastUnregistered(address indexed fast);\\n\\n  /// FAST groupping events.\\n\\n  event FastGroupChanged(address indexed fast, string indexed oldGroup, string indexed newGroup);\\n\\n  /// Governors.\\n\\n  event GovernorshipRemoved(address indexed fast, address indexed governor);\\n  event GovernorshipAdded(address indexed fast, address indexed governor);\\n}\\n\",\"keccak256\":\"0x7ab2611cedeaf69aba2461e083ce436cde93f53e0ebf7ae882bf1800a839f543\",\"license\":\"MIT\"},\"contracts/lib/LibAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary LibAddressSet {\\n  /// @notice Represents a list of addresses.\\n  struct Data {\\n    mapping(address => uint256) indices;\\n    address[] values;\\n  }\\n\\n  /**\\n   * @notice Adds an item into the storage set. If the address already exists in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be added.\\n   */\\n  function add(Data storage d, address key, bool noThrow) internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && exists) {\\n      return;\\n    }\\n    require(!exists, \\\"Address already in set\\\");\\n    d.indices[key] = d.values.length;\\n    d.values.push(key);\\n  }\\n\\n  /**\\n   * @notice Removes an item from the storage set. If the address does not exist in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be removed.\\n   */\\n  function remove(Data storage d, address key, bool noThrow) internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && !exists) {\\n      return;\\n    }\\n    require(exists, \\\"Address does not exist in set\\\");\\n    address keyToMove = d.values[d.values.length - 1];\\n    uint256 idxToReplace = d.indices[key];\\n    d.indices[keyToMove] = idxToReplace;\\n    d.values[idxToReplace] = keyToMove;\\n\\n    delete d.indices[key];\\n    d.values.pop();\\n  }\\n\\n  /**\\n   * @notice Tests whether or not a given item already exists in the set.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to test.\\n   * @return a boolean.\\n   */\\n  function contains(Data storage d, address key) internal view returns (bool) {\\n    return d.values.length == 0 ? false : d.values[d.indices[key]] == key;\\n  }\\n}\\n\",\"keccak256\":\"0x47c911c8b83ffd42c9d6088104f3c2c5eac2899fdf200b3683d1de10ca96b1a8\",\"license\":\"MIT\"},\"contracts/lib/LibHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibHelpers.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\";\\n\\nlibrary LibHelpers {\\n  address internal constant ZERO_ADDRESS = address(0);\\n  address internal constant DEPLOYER_CONTRACT = 0x6DF2D25d8C6FD680730ee658b530A05a99BB769a;\\n\\n  function _isDiamondFacet(address who) internal view returns (bool) {\\n    return who == address(this);\\n  }\\n\\n  function _isDiamondOwner(address who) internal view returns (bool) {\\n    return who == IERC173(address(this)).owner();\\n  }\\n\\n  function _isDeployer(address who) internal pure returns (bool) {\\n    return who == LibHelpers.DEPLOYER_CONTRACT;\\n  }\\n}\\n\",\"keccak256\":\"0x14f9bbd2c6f21fcd5cc1760c3eb92f808c25f6a908d69c89e22868f8d54dc062\",\"license\":\"MIT\"},\"contracts/lib/LibPaginate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../fast/lib/LibFastHistory.sol\\\";\\n\\nlibrary LibPaginate {\\n  function addresses(\\n    address[] storage collection,\\n    uint256 cursor,\\n    uint256 perPage\\n  ) internal view returns (address[] memory, uint256) {\\n    uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n    address[] memory values = new address[](length);\\n    for (uint256 i = 0; i < length; ) {\\n      values[i] = collection[cursor + i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return (values, cursor + length);\\n  }\\n\\n  function uint256s(\\n    uint256[] storage collection,\\n    uint256 cursor,\\n    uint256 perPage\\n  ) internal view returns (uint256[] memory, uint256) {\\n    uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n    uint256[] memory values = new uint256[](length);\\n    for (uint256 i = 0; i < length; ) {\\n      values[i] = collection[cursor + i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return (values, cursor + length);\\n  }\\n\\n  function supplyProofs(\\n    LibFastHistory.SupplyProof[] storage collection,\\n    uint256 cursor,\\n    uint256 perPage\\n  ) internal view returns (LibFastHistory.SupplyProof[] memory, uint256) {\\n    uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n    LibFastHistory.SupplyProof[] memory values = new LibFastHistory.SupplyProof[](length);\\n    for (uint256 i = 0; i < length; ) {\\n      values[i] = collection[cursor + i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return (values, cursor + length);\\n  }\\n\\n  function transferProofs(\\n    LibFastHistory.TransferProof[] storage collection,\\n    uint256 cursor,\\n    uint256 perPage\\n  ) internal view returns (LibFastHistory.TransferProof[] memory, uint256) {\\n    uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n    LibFastHistory.TransferProof[] memory values = new LibFastHistory.TransferProof[](length);\\n    for (uint256 i = 0; i < length; ) {\\n      values[i] = collection[cursor + i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return (values, cursor + length);\\n  }\\n}\\n\",\"keccak256\":\"0xf2f7e33b965e27fa953f0b95922856f42b2563f9a037a17e1973af5a496899ca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610bef806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063911a56cc1161005b578063911a56cc1461012e578063b70cc72a14610141578063b87c747514610154578063ccf90c74146101c457600080fd5b80633e39e4cf14610082578063617b0b9d1461009757806376a7383d1461010d575b600080fd5b6100956100903660046109d1565b6101f4565b005b6100f86100a53660046109d1565b73ffffffffffffffffffffffffffffffffffffffff9190911660009081527f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b918660205260409020541663ffffffff16151590565b60405190151581526020015b60405180910390f35b61012061011b366004610a11565b610325565b604051610104929190610a33565b61009561013c366004610a91565b61035f565b6100f861014f366004610a91565b61047c565b6101af610162366004610a91565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b9186602052604090205463ffffffff1690565b60405163ffffffff9091168152602001610104565b7f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b918554604051908152602001610104565b336101fe816104ae565b610251576040517f972aa5a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b7f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b918361029e7f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b918485600161053f565b73ffffffffffffffffffffffffffffffffffffffff8416600081815260038301602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff881690811790915590519092917f5fd56a5aab6279a81e4acca954bf23ce5ffea9c6351189f4faf647731c38dffa91a350505050565b606060006103547f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b91858585610633565b915091509250929050565b33610369816104ae565b6103b7576040517f972aa5a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610248565b7f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b91836104047f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b9184846000610754565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260038301602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000169055517f4592667aee797226527dbacd5953afb6e4fd4263ffc6f671efc0441b45b098d49190a2505050565b60006104a87f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b91848361092c565b92915050565b6040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152600090309063a230c52490602401602060405180830381865afa15801561051b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a89190610aac565b600061054b848461092c565b90508180156105575750805b156105625750505050565b80156105ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4164647265737320616c726561647920696e20736574000000000000000000006044820152606401610248565b50506001808301805473ffffffffffffffffffffffffffffffffffffffff909316600081815260209586526040812085905592840182559082529290200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b60606000808486805490506106489190610afd565b84116106545783610661565b8554610661908690610afd565b905060008167ffffffffffffffff81111561067e5761067e610b14565b6040519080825280602002602001820160405280156106a7578160200160208202803683370190505b50905060005b8281101561073a57876106c08289610b43565b815481106106d0576106d0610b5b565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061070d5761070d610b5b565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016106ad565b50806107468388610b43565b935093505050935093915050565b6000610760848461092c565b905081801561076d575080155b156107785750505050565b806107df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4164647265737320646f6573206e6f7420657869737420696e207365740000006044820152606401610248565b600180850180546000926107f291610afd565b8154811061080257610802610b5b565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff87811684529188905260408084205492909116808452922081905560018701805492935090918391908390811061085e5761085e610b5b565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9485161790559187168152908790526040812055600186018054806108cc576108cc610b8a565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055505050505050565b60018201546000901561099e5773ffffffffffffffffffffffffffffffffffffffff8216600081815260208590526040902054600185018054909190811061097657610976610b5b565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16146109a1565b60005b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146109cc57600080fd5b919050565b600080604083850312156109e457600080fd5b6109ed836109a8565b9150602083013563ffffffff81168114610a0657600080fd5b809150509250929050565b60008060408385031215610a2457600080fd5b50508035926020909101359150565b604080825283519082018190526000906020906060840190828701845b82811015610a8257815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101610a50565b50505092019290925292915050565b600060208284031215610aa357600080fd5b6109a1826109a8565b600060208284031215610abe57600080fd5b815180151581146109a157600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610b0f57610b0f610ace565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008219821115610b5657610b56610ace565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212209d0e8a8b09d758412726f3bc4dcdc7c0680a4b9c69b2cde56e764ea0f2356d7164736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063911a56cc1161005b578063911a56cc1461012e578063b70cc72a14610141578063b87c747514610154578063ccf90c74146101c457600080fd5b80633e39e4cf14610082578063617b0b9d1461009757806376a7383d1461010d575b600080fd5b6100956100903660046109d1565b6101f4565b005b6100f86100a53660046109d1565b73ffffffffffffffffffffffffffffffffffffffff9190911660009081527f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b918660205260409020541663ffffffff16151590565b60405190151581526020015b60405180910390f35b61012061011b366004610a11565b610325565b604051610104929190610a33565b61009561013c366004610a91565b61035f565b6100f861014f366004610a91565b61047c565b6101af610162366004610a91565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b9186602052604090205463ffffffff1690565b60405163ffffffff9091168152602001610104565b7f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b918554604051908152602001610104565b336101fe816104ae565b610251576040517f972aa5a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b7f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b918361029e7f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b918485600161053f565b73ffffffffffffffffffffffffffffffffffffffff8416600081815260038301602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff881690811790915590519092917f5fd56a5aab6279a81e4acca954bf23ce5ffea9c6351189f4faf647731c38dffa91a350505050565b606060006103547f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b91858585610633565b915091509250929050565b33610369816104ae565b6103b7576040517f972aa5a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610248565b7f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b91836104047f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b9184846000610754565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260038301602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000169055517f4592667aee797226527dbacd5953afb6e4fd4263ffc6f671efc0441b45b098d49190a2505050565b60006104a87f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b91848361092c565b92915050565b6040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152600090309063a230c52490602401602060405180830381865afa15801561051b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a89190610aac565b600061054b848461092c565b90508180156105575750805b156105625750505050565b80156105ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4164647265737320616c726561647920696e20736574000000000000000000006044820152606401610248565b50506001808301805473ffffffffffffffffffffffffffffffffffffffff909316600081815260209586526040812085905592840182559082529290200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b60606000808486805490506106489190610afd565b84116106545783610661565b8554610661908690610afd565b905060008167ffffffffffffffff81111561067e5761067e610b14565b6040519080825280602002602001820160405280156106a7578160200160208202803683370190505b50905060005b8281101561073a57876106c08289610b43565b815481106106d0576106d0610b5b565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061070d5761070d610b5b565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016106ad565b50806107468388610b43565b935093505050935093915050565b6000610760848461092c565b905081801561076d575080155b156107785750505050565b806107df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4164647265737320646f6573206e6f7420657869737420696e207365740000006044820152606401610248565b600180850180546000926107f291610afd565b8154811061080257610802610b5b565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff87811684529188905260408084205492909116808452922081905560018701805492935090918391908390811061085e5761085e610b5b565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9485161790559187168152908790526040812055600186018054806108cc576108cc610b8a565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055505050505050565b60018201546000901561099e5773ffffffffffffffffffffffffffffffffffffffff8216600081815260208590526040902054600185018054909190811061097657610976610b5b565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16146109a1565b60005b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146109cc57600080fd5b919050565b600080604083850312156109e457600080fd5b6109ed836109a8565b9150602083013563ffffffff81168114610a0657600080fd5b809150509250929050565b60008060408385031215610a2457600080fd5b50508035926020909101359150565b604080825283519082018190526000906020906060840190828701845b82811015610a8257815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101610a50565b50505092019290925292915050565b600060208284031215610aa357600080fd5b6109a1826109a8565b600060208284031215610abe57600080fd5b815180151581146109a157600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610b0f57610b0f610ace565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008219821115610b5657610b56610ace565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212209d0e8a8b09d758412726f3bc4dcdc7c0680a4b9c69b2cde56e764ea0f2356d7164736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "automatonCount()": {
        "returns": {
          "_0": "The number of automatons in this marketplace."
        }
      },
      "automatonPrivileges(address)": {
        "params": {
          "automaton": "is the address to test."
        },
        "returns": {
          "_0": "An `uint256` bitfield."
        }
      },
      "isAutomaton(address)": {
        "params": {
          "candidate": "is the address to test."
        },
        "returns": {
          "_0": "A `boolean` flag."
        }
      },
      "paginateAutomatons(uint256,uint256)": {
        "params": {
          "cursor": "is the index at which to start.",
          "perPage": "is how many records should be returned at most."
        },
        "returns": {
          "_0": "A `address[]` list of values at most `perPage` big.",
          "_1": "A `uint256` index to the next page."
        }
      },
      "removeAutomaton(address)": {
        "params": {
          "candidate": "is the automaton to remove."
        }
      },
      "setAutomatonPrivileges(address,uint32)": {
        "params": {
          "candidate": "is the automaton address to which the privileges should be assigned.",
          "privileges": "is a bitfield of privileges to apply."
        }
      }
    },
    "title": "The Issuer Smart Contract.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "RequiresAutomatonsManager(address)": [
        {
          "notice": "Errors."
        }
      ]
    },
    "events": {
      "AutomatonPrivilegesSet(address,uint32)": {
        "notice": "Emited when an automaton is added or changed."
      },
      "AutomatonRemoved(address)": {
        "notice": "Emited when an automaton is removed."
      },
      "FastGroupChanged(address,string,string)": {
        "notice": "FAST groupping events."
      },
      "FastRegistered(address)": {
        "notice": "Emited when a new FAST is registered."
      },
      "FastUnregistered(address)": {
        "notice": "Emited when a FAST is removed from the Issuer contract."
      },
      "GovernorshipRemoved(address,address)": {
        "notice": "Governors."
      }
    },
    "kind": "user",
    "methods": {
      "automatonCount()": {
        "notice": "Counts the numbers of automatons present in this Fast."
      },
      "automatonPrivileges(address)": {
        "notice": "Returns the privileges for a given automaton address, or zero if no privileges exist."
      },
      "isAutomaton(address)": {
        "notice": "Queries whether a given address is an automaton for this Fast or not."
      },
      "paginateAutomatons(uint256,uint256)": {
        "notice": "Paginates the automatons of this Fast based on a starting cursor and a number of records per page."
      },
      "removeAutomaton(address)": {
        "notice": "Removes an automaton completely."
      },
      "setAutomatonPrivileges(address,uint32)": {
        "notice": "Sets privileges for a given automaton address."
      }
    },
    "notice": "The Issuer Automatons facet is in charge of keeping track of automaton accounts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}