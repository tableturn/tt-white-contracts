{
  "address": "0xb3411E8EA4f16167830ff6bEA4c1a7F2B172741D",
  "abi": [
    {
      "inputs": [],
      "name": "RequiresFastContractCaller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresIssuerMembership",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresMarketplaceActiveMembership",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresMarketplaceDeactivatedMember",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresMarketplaceMembership",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresMembersManager",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresNoFastMemberships",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresValidMember",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "activateMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "deactivateMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perPage",
          "type": "uint256"
        }
      ],
      "name": "fastMemberships",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        }
      ],
      "name": "isActiveMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "memberAddedToFast",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "memberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "memberRemovedFromFast",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perPage",
          "type": "uint256"
        }
      ],
      "name": "paginateMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "removeMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x17d10924d06868a6743ba21c10fca4c7cc532b01d2fdad34cd15574321ae8659",
  "receipt": {
    "to": "0x6DF2D25d8C6FD680730ee658b530A05a99BB769a",
    "from": "0x717634cfe06FFAB2CEAA7fcf1b9019813f4B25FE",
    "contractAddress": null,
    "transactionIndex": 13,
    "gasUsed": "1224888",
    "logsBloom": "0x
    "blockHash": "0xee8801a41149d062102b4ef2d942978d67a8d903afc928ea38e0f89efc91dd12",
    "transactionHash": "0x17d10924d06868a6743ba21c10fca4c7cc532b01d2fdad34cd15574321ae8659",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 36808657,
        "transactionHash": "0x17d10924d06868a6743ba21c10fca4c7cc532b01d2fdad34cd15574321ae8659",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000717634cfe06ffab2ceaa7fcf1b9019813f4b25fe",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000006870b314478b80000000000000000000000000000000000000000000000001fc6f15fc92219c40000000000000000000000000000000000000000000032469e9c27c5377857c20000000000000000000000000000000000000000000000001fc06a5497dda10c0000000000000000000000000000000000000000000032469ea2aed068bcd07a",
        "logIndex": 95,
        "blockHash": "0xee8801a41149d062102b4ef2d942978d67a8d903afc928ea38e0f89efc91dd12"
      }
    ],
    "blockNumber": 36808657,
    "cumulativeGasUsed": "6433429",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 11,
  "solcInputHash": "4af250d80a55b1ff7b48eb14b5386198",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"RequiresFastContractCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresIssuerMembership\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresMarketplaceActiveMembership\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresMarketplaceDeactivatedMember\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresMarketplaceMembership\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresMembersManager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresNoFastMemberships\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresValidMember\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"activateMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"deactivateMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perPage\",\"type\":\"uint256\"}],\"name\":\"fastMemberships\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isActiveMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"memberAddedToFast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"memberRemovedFromFast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perPage\",\"type\":\"uint256\"}],\"name\":\"paginateMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"activateMember(address)\":{\"params\":{\"member\":\"The member to remove from the deactivation member set.\"}},\"addMember(address)\":{\"params\":{\"who\":\"is the address to be added.\"}},\"deactivateMember(address)\":{\"params\":{\"member\":\"The member to add to the deactivation member set.\"}},\"fastMemberships(address,uint256,uint256)\":{\"params\":{\"cursor\":\"The index at which to start.\",\"member\":\"Is the address to check.\",\"perPage\":\"How many records should be returned at most.\"}},\"isActiveMember(address)\":{\"params\":{\"candidate\":\"The address to check activation status on.\"}},\"isMember(address)\":{\"params\":{\"who\":\"is the address to test.\"},\"returns\":{\"_0\":\"A `bool` equal to `true` when `candidate` is a member.\"}},\"memberAddedToFast(address)\":{\"params\":{\"member\":\"The member for which a new FAST membership has been added.\"}},\"memberCount()\":{\"returns\":{\"_0\":\"An `uint256`.\"}},\"memberRemovedFromFast(address)\":{\"params\":{\"member\":\"The member for which a FAST membership has been removed.\"}},\"paginateMembers(uint256,uint256)\":{\"params\":{\"index\":\"is the offset at which the pagination operation should start.\",\"perPage\":\"is how many items should be returned.\"},\"returns\":{\"_0\":\"A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\"}},\"removeMember(address)\":{\"params\":{\"member\":\"The address of the member to be removed.\"}}},\"title\":\"The Marketplace Smart Contract.\",\"version\":1},\"userdoc\":{\"errors\":{\"RequiresMembersManager(address)\":[{\"notice\":\"Happens when a function is called by an address that is not a members manager.\"}],\"RequiresValidMember(address)\":[{\"notice\":\"Happens when an address is used as a member but is not valid.\"}]},\"events\":{\"MemberAdded(address)\":{\"notice\":\"Emited when a member is added to the implementing contract.\"},\"MemberRemoved(address)\":{\"notice\":\"Emited when a member is removed to the implementing contract.\"}},\"kind\":\"user\",\"methods\":{\"activateMember(address)\":{\"notice\":\"Activates a member at the Marketplace level.\"},\"addMember(address)\":{\"notice\":\"Adds a member to the list of known members.\"},\"deactivateMember(address)\":{\"notice\":\"Deactivates a member at the Marketplace level.\"},\"fastMemberships(address,uint256,uint256)\":{\"notice\":\"Allows to query FAST memberships for a given member address.\"},\"isActiveMember(address)\":{\"notice\":\"Given a member returns it's activation status.\"},\"isMember(address)\":{\"notice\":\"Queries whether a given address is a member or not.\"},\"memberAddedToFast(address)\":{\"notice\":\"Callback from FAST contracts allowing the Marketplace contract to keep track of FAST memberships.\"},\"memberCount()\":{\"notice\":\"Queries the number of members.\"},\"memberRemovedFromFast(address)\":{\"notice\":\"Callback from FAST contracts allowing the Marketplace contract to keep track of FAST memberships.\"},\"paginateMembers(uint256,uint256)\":{\"notice\":\"Queries pages of members based on a start index and a page size.\"},\"removeMember(address)\":{\"notice\":\"Removes a member from this contract.Requires that the caller is a member of this Issuer.Emits a `AHasMembers.MemberRemoved` event.\"}},\"notice\":\"The Marketplace Access facet is in charge of keeping track of marketplace members.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/marketplace/MarketplaceAccessFacet.sol\":\"MarketplaceAccessFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/common/AHasAutomatons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../common/lib/LibHasAutomatons.sol';\\n\\n\\n/**\\n * @title The Fast Smart Contract.\\n * @notice The Fast Automatons abstract contract is in charge of keeping track of automaton accounts.\\n */\\nabstract contract AHasAutomatons {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Errors.\\n\\n  error RequiresAutomatonsManager(address who);\\n\\n  /// Events.\\n\\n  /**\\n   * @notice Emited when an automaton is added or changed.\\n   * @param automaton is the address of the automaton.\\n   * @param privileges is the new bitfield assigned to this automaton.\\n   */\\n  event AutomatonPrivilegesSet(address indexed automaton, uint32 indexed privileges);\\n\\n  /**\\n   * @notice Emited when an automaton is removed.\\n   * @param automaton is the address of the removed automaton.\\n   */\\n  event AutomatonRemoved(address indexed automaton);\\n\\n  // Must be overriden.\\n  function isAutomatonsManager(address who)\\n      virtual internal view\\n      returns(bool);\\n\\n  // May be overriden.\\n  function onAutomatonAdded(address member)\\n      virtual internal {}\\n  \\n  // May be overriden.\\n  function onAutomatonRemoved(address member)\\n      virtual internal {}\\n\\n  /// Automatons management.\\n\\n  /**\\n   * @notice Queries whether a given address is an automaton for this Fast or not.\\n   * @param candidate is the address to test.\\n   * @return A `boolean` flag.\\n   */\\n  function isAutomaton(address candidate)\\n      external view returns(bool) {\\n    return LibHasAutomatons.data().automatonSet.contains(candidate);\\n  }\\n\\n  /**\\n   * @notice Returns the privileges for a given automaton address, or zero if no privileges exist.\\n   * @param automaton is the address to test.\\n   * @return An `uint256` bitfield.\\n   */\\n  function automatonPrivileges(address automaton)\\n      external view returns(uint32) {\\n    return LibHasAutomatons.data().automatonPrivileges[automaton];\\n  }\\n\\n  function automatonCan(address automaton, uint32 privilege)\\n    external view returns(bool) {\\n      return (LibHasAutomatons.data().automatonPrivileges[automaton] & privilege) != 0;\\n    }\\n\\n  /**\\n   * @notice Counts the numbers of automatons present in this Fast.\\n   * @return The number of automatons in this marketplace.\\n   */\\n  function automatonCount()\\n      external view returns(uint256) {\\n    return LibHasAutomatons.data().automatonSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Paginates the automatons of this Fast based on a starting cursor and a number of records per page.\\n   * @param cursor is the index at which to start.\\n   * @param perPage is how many records should be returned at most.\\n   * @return A `address[]` list of values at most `perPage` big.\\n   * @return A `uint256` index to the next page.\\n   */\\n  function paginateAutomatons(uint256 cursor, uint256 perPage)\\n    external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(\\n      LibHasAutomatons.data().automatonSet.values,\\n      cursor,\\n      perPage\\n    );\\n  }\\n\\n  /**\\n   * @notice Sets privileges for a given automaton address.\\n   * @param candidate is the automaton address to which the privileges should be assigned.\\n   * @param privileges is a bitfield of privileges to apply.\\n   */\\n  function setAutomatonPrivileges(address candidate, uint32 privileges)\\n      external onlyAutomatonManager(msg.sender) {\\n    LibHasAutomatons.Data storage ds = LibHasAutomatons.data();\\n    ds.automatonSet.add(candidate, true);\\n    ds.automatonPrivileges[candidate] = privileges;\\n    emit AutomatonPrivilegesSet(candidate, privileges);\\n  }\\n\\n  /**\\n   * @notice Removes an automaton completely.\\n   * @param candidate is the automaton to remove.\\n   */\\n  function removeAutomaton(address candidate)\\n      external onlyAutomatonManager(msg.sender) {\\n    LibHasAutomatons.Data storage ds = LibHasAutomatons.data();\\n    ds.automatonSet.remove(candidate, false);\\n    delete ds.automatonPrivileges[candidate];\\n    emit AutomatonRemoved(candidate);\\n  }\\n\\n  /// Modifiers.\\n\\n  modifier onlyAutomatonManager(address who) {\\n    if (!isAutomatonsManager(who))\\n      revert RequiresAutomatonsManager(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xd163d134b9021fe9f7f56c3c740893e7cae2b2de575fb6e65823f7c7f18f9581\",\"license\":\"MIT\"},\"contracts/common/AHasGovernors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../common/lib/LibHasGovernors.sol';\\nimport '../interfaces/ICustomErrors.sol';\\n\\n\\n/**\\n * @title The Fast Smart Contract.\\n * @notice The Fast Governors abstract contract is in charge of keeping track of automaton accounts.\\n */\\nabstract contract AHasGovernors {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Errors.\\n\\n  /// @notice Happens when a function is called by an address that is not a governors manager.\\n  error RequiresGovernorsManager(address who);\\n  /// @notice Happens when an address is used as a governor but is not valid.\\n  error RequiresValidGovernor(address who);\\n\\n  /// Events.\\n\\n  /**\\n   * @notice Emited when a governor is added to the implementing contract.\\n   * @param governor is the address of the added governor.\\n   */\\n  event GovernorAdded(address indexed governor);\\n  /**\\n   * @notice Emited when a governor is removed to the implementing contract.\\n   * @param governor is the address of the removed member.\\n   */\\n  event GovernorRemoved(address indexed governor);\\n\\n  /**\\n   * @notice Checks whether the caller is a governor manager or not.\\n   * @dev Must be implemented by the inheriting contract.\\n   * @param who is the address to test.\\n   */\\n  function isGovernorsManager(address who)\\n      virtual internal view\\n      returns(bool);\\n\\n  /**\\n   * @notice Checks whether the given address can be added as a governor or not.\\n   * @dev Must be implemented by the inheriting contract.\\n   * @param who is the address to test.\\n   */\\n  function isValidGovernor(address who)\\n      virtual internal view\\n      returns(bool);\\n\\n  /**\\n   * @notice This callback is called when a governor is added to the contract.\\n   * @dev May be overriden by the inheriting contract.\\n   * @param governor is the address which was added.\\n   */\\n  function onGovernorAdded(address governor)\\n      virtual internal {}\\n  \\n  /**\\n   * @notice This callback is called when a governor is removed to the contract.\\n   * @dev May be overriden by the inheriting contract.\\n   * @param governor is the address which was removed.\\n   */\\n  function onGovernorRemoved(address governor)\\n      virtual internal {}\\n  \\n  // Governors management.\\n\\n  /**\\n   * @notice Queries whether a given address is a governor or not.\\n   * @param who is the address to test.\\n   * @return A `bool` equal to `true` when `candidate` is a governor.\\n   */\\n  function isGovernor(address who)\\n      external view returns(bool) {\\n    return LibHasGovernors.data().governorSet.contains(who);\\n  }\\n\\n  /**\\n   * @notice Queries the number of governors.\\n   * @return An `uint256`.\\n   */\\n  function governorCount()\\n      external view returns(uint256) {\\n    return LibHasGovernors.data().governorSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Queries pages of governors based on a start index and a page size.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginateGovernors(uint256 index, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibHasGovernors.data().governorSet.values, index, perPage);\\n  }\\n\\n  /**\\n   * @notice Adds a governor to the list of known governors.\\n   * @param who is the address to be added.\\n   */\\n  function addGovernor(address who)\\n      external\\n      onlyGovernorManager(msg.sender) onlyValidGovernor(who) {\\n    // Add the governor.\\n    LibHasGovernors.data().governorSet.add(who, false);\\n    // Notify via callback.\\n    onGovernorAdded(who);\\n    // Emit!\\n    emit GovernorAdded(who);\\n  }\\n\\n  /**\\n   * @notice Removes a governor from this contract.\\n   * @param governor The address of the governor to be removed.\\n   * @notice Requires that the caller is a governor of this Issuer.\\n   * @notice Emits a `AHasGovernors.GovernorRemoved` event.\\n   */\\n  function removeGovernor(address governor)\\n      external \\n      onlyGovernorManager(msg.sender) {\\n    // Notify via callback.\\n    onGovernorRemoved(governor);\\n    // Remove governor.\\n    LibHasGovernors.data().governorSet.remove(governor, false);\\n    // Emit!\\n    emit GovernorRemoved(governor);\\n  }\\n\\n  /// Modifiers.\\n\\n  modifier onlyGovernorManager(address who) {\\n    if (!isGovernorsManager(who))\\n      revert RequiresGovernorsManager(who);\\n    _;\\n  }\\n\\n  modifier onlyValidGovernor(address who) {\\n    if (!isValidGovernor(who))\\n      revert RequiresValidGovernor(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xfb3495df6df6ce7a95e6b6463c6dac70184a9a6db13f5ac6b09f97087a8bc842\",\"license\":\"MIT\"},\"contracts/common/AHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../common/lib/LibHasMembers.sol';\\nimport '../interfaces/ICustomErrors.sol';\\n\\n\\n/**\\n * @title The Fast Smart Contract.\\n * @notice The Fast Members abstract contract is in charge of keeping track of automaton accounts.\\n */\\nabstract contract AHasMembers {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Errors.\\n\\n  /// @notice Happens when a function is called by an address that is not a members manager.\\n  error RequiresMembersManager(address who);\\n  /// @notice Happens when an address is used as a member but is not valid.\\n  error RequiresValidMember(address who);\\n\\n  /// Events.\\n\\n  /**\\n   * @notice Emited when a member is added to the implementing contract.\\n   * @param member is the address of the added member.\\n   */\\n  event MemberAdded(address indexed member);\\n  /**\\n   * @notice Emited when a member is removed to the implementing contract.\\n   * @param member is the address of the removed member.\\n   */\\n  event MemberRemoved(address indexed member);\\n\\n  /**\\n   * @notice Checks whether the given address is a members manager or not.\\n   * @dev Must be implemented by the inheriting contract.\\n   * @param who is the address to test.\\n   */\\n  function isMembersManager(address who)\\n      virtual internal view\\n      returns(bool);\\n\\n  /**\\n   * @notice Checks whether the given address can be added as a member or not.\\n   * @dev Must be implemented by the inheriting contract.\\n   * @param who is the address to test.\\n   */\\n  function isValidMember(address who)\\n      virtual internal view\\n      returns(bool);\\n\\n  /**\\n   * @notice This callback is called when a member is added to the contract.\\n   * @dev May be overriden by the inheriting contract.\\n   * @param member is the address which was added.\\n   */\\n  function onMemberAdded(address member)\\n      virtual internal {}\\n  \\n  /**\\n   * @notice This callback is called when a member is removed to the contract.\\n   * @dev May be overriden by the inheriting contract.\\n   * @param member is the address which was removed.\\n   */\\n  function onMemberRemoved(address member)\\n      virtual internal {}\\n  \\n  // Members management.\\n\\n  /**\\n   * @notice Queries whether a given address is a member or not.\\n   * @param who is the address to test.\\n   * @return A `bool` equal to `true` when `candidate` is a member.\\n   */\\n  function isMember(address who)\\n      external view returns(bool) {\\n    return LibHasMembers.data().memberSet.contains(who);\\n  }\\n\\n  /**\\n   * @notice Queries the number of members.\\n   * @return An `uint256`.\\n   */\\n  function memberCount()\\n      external view returns(uint256) {\\n    return LibHasMembers.data().memberSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Queries pages of members based on a start index and a page size.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginateMembers(uint256 index, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibHasMembers.data().memberSet.values, index, perPage);\\n  }\\n\\n  /**\\n   * @notice Adds a member to the list of known members.\\n   * @param who is the address to be added.\\n   */\\n  function addMember(address who)\\n      external\\n      onlyMemberManager(msg.sender) onlyValidMember(who) {\\n    // Add the member.\\n    LibHasMembers.data().memberSet.add(who, false);\\n    // Notify via callback.\\n    onMemberAdded(who);\\n    // Emit!\\n    emit MemberAdded(who);\\n  }\\n\\n  /**\\n   * @notice Removes a member from this contract.\\n   * @param member The address of the member to be removed.\\n   * @notice Requires that the caller is a member of this Issuer.\\n   * @notice Emits a `AHasMembers.MemberRemoved` event.\\n   */\\n  function removeMember(address member)\\n      external \\n      onlyMemberManager(msg.sender) {\\n    // Notify via callback.\\n    onMemberRemoved(member);\\n    // Remove member.\\n    LibHasMembers.data().memberSet.remove(member, false);\\n    // Emit!\\n    emit MemberRemoved(member);\\n  }\\n\\n  /// Modifiers.\\n\\n  modifier onlyMemberManager(address who) {\\n    if (!isMembersManager(who))\\n      revert RequiresMembersManager(who);\\n    _;\\n  }\\n\\n  modifier onlyValidMember(address who) {\\n    if (!isValidMember(who))\\n      revert RequiresValidMember(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x956d2cea84e7791ee134542d558aa9901d6e3d1c8103de51f1e1df49ef9ec39d\",\"license\":\"MIT\"},\"contracts/common/lib/LibHasAutomatons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibHasAutomatons {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is `keccak256('HasAutomatons.storage.Main')`.\\n  bytes32 internal constant STORAGE_SLOT = 0x3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b9183;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we hold our automatons data.\\n    LibAddressSet.Data automatonSet;\\n    /// @notice This is where we store privileges for each of our automaton account.\\n    mapping(address => uint32) automatonPrivileges;\\n  }\\n\\n  function data() internal pure\\n      returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x0dad1ab3437a67476d7480b7cc89258ea857e5f9320226f46fe78654a30e5953\",\"license\":\"MIT\"},\"contracts/common/lib/LibHasGovernors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibHasGovernors {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is `keccak256('HasGovernors.storage.Main')`.\\n  bytes32 internal constant STORAGE_SLOT = 0xdac4df64cf6992e5f0fa766abc48a6698b638db4d8eeee68133c41fdd4862975;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we hold our automatons data.\\n    LibAddressSet.Data governorSet;\\n  }\\n\\n  function data() internal pure\\n      returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x67f9734a465b774ccae296f7ed930ffee2d46377333080c49baa0c0697f0db14\",\"license\":\"MIT\"},\"contracts/common/lib/LibHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibHasMembers {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is `keccak256('HasMembers.storage.Main')`.\\n  bytes32 internal constant STORAGE_SLOT = 0xd56529bfa3ed57257eed4751494e1d0c0f212cfe38768380e006e3bee06ffb91;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we hold our automatons data.\\n    LibAddressSet.Data memberSet;\\n  }\\n\\n  function data() internal pure\\n      returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x3c2d0885328df3aff3f7e8fd65f9bfe04ce43c5be28b376ea3803613d91b8bbe\",\"license\":\"MIT\"},\"contracts/fast/Crowdfund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../interfaces/IERC20.sol';\\nimport '../common/AHasMembers.sol';\\nimport '../common/AHasGovernors.sol';\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\n\\n\\n/**\\n * @title The `Crowdfund` FAST contract.\\n * @notice This contract is used to manage a crowdfunding campaign.\\n */\\ncontract Crowdfund {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// @notice Happens when a function requires an unmet phase.\\n  error InvalidPhase();\\n  /// @notice Happens when a duplicate entry is found.\\n  error DuplicateEntry();\\n  /// @notice Happens when inconsistent parametters are detected.\\n  error InconsistentParameter(string param);\\n  /// @notice Happens when an address is not a crowdfund pledger.\\n  error UnknownPledger(address who);\\n  /// @notice Happens when a call to the ERC20 token contract fails.\\n  error TokenContractError();\\n  /// @notice Happens when there are insufficient funds somewhere.\\n  error InsufficientFunds(uint256 amount);\\n\\n  /// @notice Happens when an address is not an issuer member.\\n  error RequiresIssuerMemberCaller();\\n  /// @notice Happens when an address is not a FAST member.\\n  error RequiresFastMemberCaller();\\n  /// @notice Happens when a parameter has to be a FAST governor.\\n  error RequiresFastGovernorship(address who);\\n  /// @notice Happens when a parameter has to be a FAST member.\\n  error RequiresFastMembership(address who);\\n\\n  /**\\n   * @notice Emited whenever the internal phase of this crowdfund changes.\\n   * @param phase The new phase of this contract.\\n   */\\n  event Advance(Phase phase);\\n\\n  /**\\n   * @notice Emited whenever a plege is made.\\n   * @param pledger The address of the pledger.\\n   * @param amount The amount of tokens pledged.\\n   */\\n  event Pledge(address indexed pledger, uint256 amount);\\n\\n  /**\\n   * @notice Emited when the crowdfunding is terminated.\\n   * @param success Whether the crowdfunding was successful or not.\\n   */\\n  event Terminated(bool indexed success);\\n\\n  /// @notice The different phases of the crowdfund.\\n  enum Phase { Setup, Funding, Success, Failure }\\n\\n  /// @notice Parameters to be passed to this contract's constructor.\\n  struct Params {\\n    /// @notice Who initially deployed this contract.\\n    address owner;\\n    /// @notice The issuer contract address.\\n    address issuer;\\n    /// @notice The FAST contract that this crowdfund is locked onto.\\n    address fast;\\n    /// @notice The beneficiary of the crowdfund.\\n    address beneficiary;\\n    /// @notice The fee expressed in basis points - eg ten thousandths.\\n    uint32 basisPointsFee;\\n    /// @notice The token contract address.\\n    IERC20 token;\\n    /// @notice An arbitrary reference string to keep track of.\\n    string ref;\\n  }\\n\\n  /// @notice A version identifier for us to track what's deployed.\\n  uint16 public constant VERSION = 1;\\n\\n  /// @notice The initial params, as passed to the contract's constructor.\\n  Params public params;\\n  /// @notice The phase at which the crowdfunding is at.\\n  Phase public phase;\\n  /// @notice When was the distribution created.\\n  uint256 public creationBlock;\\n  /// @notice How much was collected so far.\\n  uint256 public collected;\\n\\n  /// @notice The set of addresses that have pledged to this crowdfund.\\n  LibAddressSet.Data internal pledgerSet;\\n  /// @notice The mapping of pledgers to their pledged amounts.\\n  mapping(address => uint256) public pledges;\\n  /// @notice Mapping of pledgers to whether they have been refunded or not.\\n  mapping(address => bool) public refunded;\\n\\n  /**\\n   * @notice The constructor for this contract.\\n   * Note that the constructor places the contract into the setup phase.\\n   * @param p The parameters to be passed to this contract's constructor.\\n   */\\n  constructor(Params memory p) {\\n    // Store parameters.\\n    params = p;\\n    // Check that the owner is a member of the FAST contract.\\n    if (!isFastGovernor(p.owner))\\n      revert RequiresFastGovernorship(p.owner);\\n    // Check that the beneficiary is a member of the FAST contract.\\n    else if (!isFastMember(p.beneficiary))\\n      revert RequiresFastMembership(p.beneficiary);\\n    // Invalid fee - superior than 100%.\\n    else if (params.basisPointsFee > 10_000)\\n      revert InconsistentParameter(\\\"basisPointsFee\\\");\\n    // Keep creation block handy.\\n    creationBlock = block.number;\\n  }\\n\\n  /// @dev Given a total and a fee in basis points, returns the fee amount rounded up.\\n  function feeAmount()\\n      public view returns(uint256) {\\n    return Math.mulDiv(collected, params.basisPointsFee, 10_000, Math.Rounding.Up);\\n  }\\n\\n  /**\\n   * @notice Advances the campaign to the funding phase.\\n   * Note that this method is only available during the setup phase.\\n   */\\n  function advanceToFunding()\\n      external onlyDuring(Phase.Setup) onlyIssuerMember {\\n    // Make sure the fee doesn't exceed a hundred percent.\\n    emit Advance(phase = Phase.Funding);\\n  }\\n\\n  /**\\n   * @notice Allows a pledger to pledge tokens to this crowdfund.\\n   * Note that this method is only available during the funding phase.\\n   * @param amount The amount of tokens to pledge.\\n   */\\n  function pledge(uint256 amount)\\n      public onlyDuring(Phase.Funding) onlyFastMember {\\n    // Make sure the amount is non-zero.\\n    if (amount == 0)\\n      revert InconsistentParameter(\\\"amount\\\");\\n    // Make sure that the message sender gave us allowance for at least this amount.\\n    uint256 allowance = params.token.allowance(msg.sender, address(this));\\n    if (allowance < amount)\\n      revert InsufficientFunds(amount - allowance);\\n    // Keep track of the pledger - don't throw if already present.\\n    pledgerSet.add(msg.sender, true);\\n    // Add the pledged amount to the existing pledge.\\n    pledges[msg.sender] += amount;\\n    // Update the collected amount.\\n    collected += amount;\\n    // Transfer the tokens to this contract.\\n    if (!params.token.transferFrom(msg.sender, address(this), amount))\\n      revert TokenContractError();\\n    // Emit!\\n    emit Pledge(msg.sender, amount);\\n  }\\n\\n  /**\\n   * @notice Queries the number of members.\\n   * @return An `uint256`.\\n   */\\n  function pledgerCount()\\n      external view returns(uint256) {\\n    return pledgerSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Queries pages of pledgers based on a start index and a page size.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginatePledgers(uint256 index, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(pledgerSet.values, index, perPage);\\n  }\\n\\n  /**\\n   * @notice Allows an issuer member to terminate the crowdfunding given a success flag.\\n   * Note that this method is available during any phase and can be used as a panic\\n   * button to terminate the crowdfunding prematurely.\\n   * @param success Whether the crowdfunding was successful or not.\\n   */\\n  function terminate(bool success)\\n      public onlyIssuerMember {\\n    // If the crowdfunding was successful...\\n    if (success) {\\n      // Transfer the fee to the issuer contract if there is one.\\n      uint256 finalFee = feeAmount();\\n      if (finalFee > 0)\\n        if (!params.token.transfer(params.issuer, finalFee))\\n          revert TokenContractError();\\n      // Transfer the payout to the beneficiary.\\n      uint256 payout = collected - finalFee;\\n      // If there's a payout for the beneficiary, transfer it.\\n      if (payout > 0)\\n        // Make sure that the beneficiary is **still** a member of the FAST contract.\\n        if (!isFastMember(params.beneficiary))\\n          revert RequiresFastMembership(params.beneficiary);\\n        // Attempt to transfer to the beneficiary.\\n        else if (!params.token.transfer(params.beneficiary, payout))\\n          revert TokenContractError();\\n    }\\n    // Advance to next phase.\\n    emit Advance(phase = success ? Phase.Success : Phase.Failure);\\n  }\\n\\n  /**\\n   * @notice Allows a pledger to be refunded if the crowdfunding failed.\\n   * Note that this method is only available during the failure phase.\\n   * @param pledger The address of the pledger to refund.\\n   */\\n  function refund(address pledger)\\n      public onlyDuring(Phase.Failure) {\\n    // Make sure the pledger is in the set.\\n    if (!pledgerSet.contains(pledger))\\n      revert UnknownPledger(pledger);\\n    // Pledger has already been refunded...\\n    else if (refunded[pledger])\\n      revert DuplicateEntry();\\n    // Track that the pledger has been refunded.\\n    refunded[pledger] = true;\\n    // Transfer the tokens to the pledger.\\n    if (!params.token.transfer(pledger, pledges[pledger]))\\n      revert TokenContractError();\\n  }\\n\\n  /// Modifiers and ACL functions.\\n\\n  /**\\n   * @notice Checks whether the given address is a governor of the FAST contract.\\n   * @param who The address to check.\\n   * @return A `bool` indicating whether the address is a governor of the FAST contract.\\n   */\\n  function isFastGovernor(address who)\\n      internal view returns(bool) {\\n    return AHasGovernors(params.fast).isGovernor(who);\\n  }\\n\\n  /**\\n   * @dev Checks whether the given address is a member of the FAST contract.\\n   * @param who The address to check.\\n   * @return A `bool` indicating whether the address is a member of the FAST contract.\\n   */\\n  function isFastMember(address who)\\n      internal view returns(bool) {\\n    return AHasMembers(params.fast).isMember(who);\\n  }\\n\\n  modifier onlyDuring(Phase _phase) {\\n    if (_phase != phase)\\n      revert InvalidPhase();\\n    _;\\n  }\\n\\n  modifier onlyIssuerMember() {\\n    if (!AHasMembers(params.issuer).isMember(msg.sender))\\n      revert RequiresIssuerMemberCaller();\\n    _;\\n  }\\n\\n  modifier onlyFastMember() {\\n    if (!isFastMember(msg.sender))\\n      revert RequiresFastMemberCaller();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xb307c0af14124cc52604fecbecd99402c8eae471d8f6786a2a2735ec57327588\",\"license\":\"MIT\"},\"contracts/fast/Distribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../interfaces/IERC20.sol';\\nimport '../common/AHasMembers.sol';\\nimport '../common/AHasAutomatons.sol';\\nimport './FastAutomatonsFacet.sol';\\n\\n\\n/**\\n * @title The `Distribution` FAST contract.\\n * @notice This contract allows for dividends or proceeds to be distributted amongst\\n * a list of beneficiaries. It has a lifecycle that can be described based on the\\n * following steps (or phases):\\n * - Funding, during which the sum to be distributed has to be credited to this contract.\\n * - FeeSetup, during which the oracle will define the fee to be paid upon distribution.\\n * - BeneficiariesSetup, during which the oracle can setup the beneficiaries.\\n * - Withdrawal, during which each beneficiary can withdraw their proceeds.\\n * - Terminated, during which nothing is possible.\\n */\\ncontract Distribution {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// @notice Happens when a function requires an unmet phase.\\n  error InvalidPhase();\\n  /// @notice Happens when a duplicate entry is found.\\n  error DuplicateEntry();\\n  /// @notice Happens when inconsistent parametters are detected.\\n  error InconsistentParameter(string param);\\n  /// @notice Happens when a call to the ERC20 token contract fails.\\n  error TokenContractError();\\n  /// @notice Happens when there are insufficient funds somewhere.\\n  error InsufficientFunds(uint256 amount);\\n  /// @notice Happens when the distribution has been overfunded.\\n  error Overfunded(uint256 amount);\\n  /// @notice Happens when a beneficiary is not found.\\n  error UnknownBeneficiary(address who);\\n\\n  /// @notice Happens when a function must be called by the FAST contract.\\n  error RequiresFastCaller();\\n  /// @notice Happens when an address is not crowdfund manager.\\n  error RequiresManagerCaller();\\n  /// @notice Happens when a parameter has to be a FAST member.\\n  error RequiresFastMembership(address who);\\n\\n  /// @notice The possible phases in which the contract is in.\\n  enum Phase { Funding, FeeSetup, BeneficiariesSetup, Withdrawal, Terminated }\\n\\n  /**\\n   * @notice Emited whenever the internal phase of this distribution changes.\\n   * @param phase The new phase of this contract.\\n   */\\n  event Advance(Phase phase);\\n  /**\\n   * @notice Emited whenever a beneficiary is added to the distribution list.\\n   * @param beneficiary is the address of the beneficiary who was added.\\n   * @param amount is the amount in native target token that is owed to the beneficiary. \\n   */\\n  event BeneficiaryAdded(address indexed beneficiary, uint256 indexed amount);\\n  /**\\n   * @notice Emited whenever a beneficiary is removed from the distribution list.\\n   * @param beneficiary is the address of the beneficiary who was removed.\\n   */\\n  event BeneficiaryRemoved(address indexed beneficiary);\\n  /**\\n   * @notice Emited whenever a beneficiary withdraws their owings.\\n   * @param caller is the address who ordered the withdrawal.\\n   * @param beneficiary is the address of the beneficiary who performed the withdrawal.\\n   * @param amount is the amount that was withdrawn.\\n   */\\n  event Withdrawal(address indexed caller, address indexed beneficiary, uint256 amount);\\n\\n  /// @notice Parameters to be passed to this contract's constructor.\\n  struct Params {\\n    /// @notice The distributor of the distribution - eg the address who ordered its deployment.\\n    address distributor;\\n    /// @notice The Issuer contract address.\\n    address issuer;\\n    /// @notice To which FAST this Distribution belongs\\n    address fast;\\n    /// @notice The target ERC20 address to be distributed to the beneficiaries.\\n    IERC20 token;\\n    /// @notice Block latching.\\n    uint256 blockLatch;\\n    /// @notice How much is meant to be distributed.\\n    uint256 total;\\n    /// @notice An arbitrary reference string.\\n    string ref;\\n  }\\n\\n  /// @notice A version identifier for us to track what's deployed.\\n  uint16 public constant VERSION = 3;\\n\\n  /// @notice The initial params, as passed to the contract's constructor.\\n  Params public params;\\n  /// @notice The phase at which the distribution is at.\\n  Phase public phase = Phase.Funding;\\n  /// @notice When was the distribution created.\\n  uint256 public creationBlock;\\n  /// @notice How much the fee that will be distributed to `issuer` is.\\n  uint256 public fee;\\n  /// @notice How much is left for distribution.\\n  uint256 public available;\\n\\n  /// @notice The list of beneficiaries known to the system.\\n  LibAddressSet.Data internal beneficiaries;\\n  /// @notice How much was set asside for a particular beneficiary.\\n  mapping(address => uint256) public owings;\\n  /// @notice Whether or not a benificiary has withdrawn yet.\\n  mapping(address => bool) public withdrawn;\\n\\n  /**\\n   * @notice Constructs a new `Distribution` contracts.\\n   * @param p is a `Params` structure.\\n   */\\n  constructor(Params memory p) {\\n    // If the distribution is latched in the future, throw.\\n    if (p.blockLatch >= block.number)\\n      revert InconsistentParameter(\\\"blockLatch\\\");\\n    // Store all parameters.\\n    params = p;\\n    available = p.total;\\n    creationBlock = block.number;\\n  }\\n\\n  function advanceToFeeSetup()\\n      public onlyDuring(Phase.Funding) onlyFastCaller {\\n    // Make sure that the current distribution has exactly the required amount locked.\\n    uint256 balance = params.token.balanceOf(address(this));\\n    if (balance != params.total)\\n      revert InconsistentParameter(\\\"balance\\\");\\n    // Move to next phase.\\n    emit Advance(phase = Phase.FeeSetup);\\n  }\\n\\n  /**\\n   * @notice Sets the fee to be taken upon distribution. Only available during the\\n   * `Phase.FeeSetup` phase, throws otherwise. This method automatically advances the\\n   * phase to `Phase.BeneficiariesSetup`, so it can only be called once.\\n   * Note that only a manager (issuer or automaton with the correct privileges) can\\n   * call this method.\\n   * @param _fee is the amount that the `issuer` will receive.\\n   */\\n  function advanceToBeneficiariesSetup(uint256 _fee)\\n      external onlyDuring(Phase.FeeSetup) onlyManager {\\n    fee = _fee;\\n    available -= fee;\\n    // Move to next phase.\\n    emit Advance(phase = Phase.BeneficiariesSetup);\\n  }\\n\\n  /**\\n   * @notice Advances the distribution to the `Phase.Withdrawal` phase.\\n   * The distribution must be in the `Phase.BeneficiariesSetup` phase.\\n   */\\n  function advanceToWithdrawal()\\n      public onlyDuring(Phase.BeneficiariesSetup) onlyManager {\\n    // If the distribution covers more than the sum of all proceeds, we want\\n    // to prevent the distribution from advancing to the withdrawal phase.\\n    if (available > 0)\\n      revert Overfunded(available);\\n    // Transfer the fee to the issuer contract.\\n    if (!params.token.transfer(params.issuer, fee))\\n      revert TokenContractError();\\n    // Move to next phase.\\n    emit Advance(phase = Phase.Withdrawal);\\n  }\\n\\n  /**\\n   * @notice Adds beneficiaries and amounts to the distribution list. Both `_beneficiaries`\\n   * and `_amounts` arrays must be of the same size, or the method will revert.\\n   * This method is only available during the `Phase.BeneficiariesSetup` phase.\\n   * During execution, this method will make sure that the cumulated amounts for all\\n   * beneficiaries doesn't exceed the `total` amount available for distribution, or it\\n   * will simply throw.\\n   * Note that adding the same beneficiary twice will throw.\\n   * Note that only a manager (issuer or automaton with the correct privileges) can\\n   * call this method.\\n   * @param _beneficiaries is the list of beneficiaries to add.\\n   * @param _amounts is the list of amounts respective to each beneficiary.\\n   */\\n  function addBeneficiaries(address[] calldata _beneficiaries, uint256[] calldata _amounts)\\n      public onlyDuring(Phase.BeneficiariesSetup) onlyManager {\\n    // Beneficiaries and amount sizes must match.\\n    if (_beneficiaries.length != _amounts.length)\\n      revert InconsistentParameter(\\\"lengths\\\");\\n\\n    // We will count how much is needed for all these beneficiaries.\\n    uint256 needed = 0;\\n    // For each of the passed beneficiaries...\\n    for (uint256 i = 0; i < _beneficiaries.length;) {\\n      // Memoize a few variables...\\n      address beneficiary = _beneficiaries[i];\\n      uint256 amount = _amounts[i];\\n      // Make sure the beneficiary is a member of the FAST.\\n      if (!AHasMembers(params.fast).isMember(beneficiary))\\n        revert RequiresFastMembership(beneficiary);\\n\\n      // Add the beneficiary to our set.\\n      beneficiaries.add(beneficiary, false);\\n      // Keep track of the amount this beneficiary is entitled to.\\n      owings[beneficiary] = amount;\\n      // Accumulate how much is needed for these beneficiaries.\\n      needed += amount;\\n      // Emit!\\n      emit BeneficiaryAdded(beneficiary, amount);\\n      // Next iteration.\\n      unchecked { ++i; }\\n    }\\n\\n    // Make sure that there's enough to pay everyone.\\n    if (available < needed)\\n      revert InsufficientFunds(needed - available);\\n    // Decrease the amount of available funds.\\n    unchecked { available -= needed; }\\n  }\\n\\n  /**\\n   * @notice Removes a list of beneficiaries from the distribution list.\\n   * Note that removing a non-existent beneficiary will simply throw.\\n   * During execution, this method will increase the amount available for\\n   * distribution automatically.\\n   * Note that only a manager (issuer or automaton with the correct privileges) can\\n   * call this method.\\n   * @param _beneficiaries is the list of addresses to remove.\\n   */\\n  function removeBeneficiaries(address[] calldata _beneficiaries)\\n      external onlyDuring(Phase.BeneficiariesSetup) onlyManager {\\n    // Remove all specified beneficiaries.\\n    for (uint256 i = 0; i < _beneficiaries.length;) {\\n      address beneficiary = _beneficiaries[i];\\n      // Remove the beneficiary from our list.\\n      beneficiaries.remove(beneficiary, false);\\n      // Increase the amount available for distribution, as it won't go to this beneficiary.\\n      available += owings[beneficiary];\\n      // Set the beneficiary's balance to zero.\\n      owings[beneficiary] = 0;\\n      // Emit!\\n      emit BeneficiaryRemoved(beneficiary);\\n      // Next iteration.\\n      unchecked { ++i; }\\n    }\\n  }\\n\\n  /**\\n   * \\n   * @notice Returns the number of beneficiaries added so far.\\n   * @return The count.\\n   */\\n  function beneficiaryCount()\\n      external view returns(uint256) {\\n    return beneficiaries.values.length;\\n  }\\n\\n  /**\\n   * @notice Queries pages of beneficiaries based on a start index and a page size.\\n   * Note that it is possible to query owings for each of these beneficiaries by\\n   * utilizing the `owings` and `withdrawn` public function.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginateBeneficiaries(uint256 index, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(\\n      beneficiaries.values,\\n      index,\\n      perPage\\n    );\\n  }\\n\\n  /**\\n   * @notice This function allows any beneficiary to withdraw what they are owed. This\\n   * method can only be called during the `Phase.Withdrawal` phase.\\n   * Note that this function is protected from reentrancy as it operates on the `token`\\n   * methods.\\n   */\\n  function withdraw(address beneficiary)\\n      public onlyDuring(Phase.Withdrawal) {\\n    if (!beneficiaries.contains(beneficiary))\\n      revert UnknownBeneficiary(beneficiary);\\n    else if (withdrawn[beneficiary])\\n      revert DuplicateEntry();\\n    // Memoize a few variables.\\n    uint256 amount = owings[beneficiary];\\n    // Make sure they can't do it again later... It is important\\n    // to do this before any call to `token` to prevent reentrancy.\\n    withdrawn[beneficiary] = true;\\n    // Transfer to the beneficiary all of their ownings.\\n    if (!params.token.transfer(beneficiary, amount))\\n      revert TokenContractError();\\n    // Emit!\\n    emit Withdrawal(msg.sender, beneficiary, amount);\\n  }\\n\\n  /**\\n   * @notice A panic function that can only be called by the distribution manager\\n   * (either an issuer member or an automaton with the right privileges).\\n   * Upon calling this method, the contract will simply send back any funds still\\n   * available to it and set its internal state to a termination one.\\n   * Note that since this method calls the `token` contract, it **must be\\n   * protected against reentrancy**.\\n   */\\n  function terminate()\\n      public onlyManager exceptDuring(Phase.Terminated) {\\n    // Reset internal variables so that it's clear that the contract is terminated.\\n    // It is important to do this prior to any call to `token` methods to prevent\\n    // re-entrancy attacks.\\n    emit Advance(phase = Phase.Terminated);\\n    available = 0;\\n    // Move all funds to the distributor account.\\n    params.token.transfer(params.distributor, params.token.balanceOf(address(this)));\\n  }\\n\\n  /// Modifiers.\\n\\n  modifier onlyDuring(Phase _phase) {\\n    if (_phase != phase)\\n      revert InvalidPhase();\\n    _;\\n  }\\n\\n  modifier exceptDuring(Phase _phase) {\\n    if (_phase == phase)\\n      revert InvalidPhase();\\n    _;\\n  }\\n\\n  modifier onlyFastCaller() {\\n    if (msg.sender != params.fast)\\n      revert RequiresFastCaller();\\n    _;\\n  }\\n\\n  modifier onlyManager() {\\n    if (!AHasMembers(params.issuer).isMember(msg.sender) &&\\n        !AHasAutomatons(params.fast).automatonCan(msg.sender, FAST_PRIVILEGE_MANAGE_DISTRIBUTIONS))\\n      revert RequiresManagerCaller();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x9af973041d886a3e8245aa6007b041bed47337bc587aa0ae51cc53edfdc5bb78\",\"license\":\"MIT\"},\"contracts/fast/FastAccessFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../common/AHasMembers.sol';\\nimport '../common/AHasGovernors.sol';\\nimport '../marketplace/MarketplaceAccessFacet.sol';\\nimport '../issuer/IssuerAccessFacet.sol';\\nimport './FastTokenFacet.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFast.sol';\\nimport './FastTopFacet.sol';\\nimport './FastFrontendFacet.sol';\\nimport './FastAutomatonsFacet.sol';\\n\\n\\n/**\\n * @title The Fast Smart Contract.\\n * @notice The FAST Access facet is the source of truth when it comes to\\n * permissioning and ACLs within a given FAST.\\n */\\ncontract FastAccessFacet is AFastFacet, AHasGovernors, AHasMembers {\\n  using LibAddressSet for LibAddressSet.Data;\\n  /// Structs.\\n\\n  /**\\n   * @notice This structure isn't used anywhere in storage. Instead, it\\n   * allows various methods of the contract to return all the flags\\n   * associated with a given address in one go.\\n   */\\n  struct Flags {\\n    /// @notice Whether or not the item in scope is considered a governor of this FAST.\\n    bool isGovernor;\\n    /// @notice Whether or not the item in scope is considered a member of this FAST.\\n    bool isMember;\\n  }\\n\\n  /// AHasGovernors implementation.\\n\\n  function isGovernorsManager(address who)\\n      internal view override(AHasGovernors) returns(bool) {\\n    return _isIssuerMember(who);\\n  }\\n\\n  function isValidGovernor(address who)\\n      internal view override(AHasGovernors) returns(bool) {\\n    return _isMarketplaceMember(who);\\n  }\\n\\n  function onGovernorAdded(address governor)\\n      internal override(AHasGovernors) {\\n    // If the governor isn't a FAST member yet, add them.\\n    if (!AHasMembers(this).isMember(governor))\\n      AHasMembers(this).addMember(governor);\\n    // Notify issuer that this governor was added to this FAST.\\n    IssuerAccessFacet(LibFast.data().issuer).governorAddedToFast(governor);\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n  }\\n\\n  function onGovernorRemoved(address governor)\\n      internal override(AHasGovernors) {\\n    // Notify issuer that this governor was removed from this FAST.\\n    IssuerAccessFacet(LibFast.data().issuer).governorRemovedFromFast(governor);\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n  }\\n\\n  /// AHasMembers implementation.\\n\\n  function isMembersManager(address who)\\n      internal view override(AHasMembers) returns(bool) {\\n    return\\n      // The current contract should be able to manage its own members.\\n      address(this) == who ||\\n      // Governors can manage members.\\n      AHasGovernors(this).isGovernor(who) ||\\n      // Automatons with the correct privilege can manage members.\\n      AHasAutomatons(address(this)).automatonCan(who, FAST_PRIVILEGE_MANAGE_MEMBERS);\\n  }\\n\\n  function isValidMember(address who)\\n      internal view override(AHasMembers) returns(bool) {\\n    return _isMarketplaceMember(who);\\n  }\\n\\n  function onMemberAdded(address member)\\n      internal override(AHasMembers) {\\n    // Notify marketplace that this member was added to this FAST.\\n    MarketplaceAccessFacet(LibFast.data().marketplace).memberAddedToFast(member);\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n  }\\n\\n  function onMemberRemoved(address member)\\n      internal override(AHasMembers) {\\n    // Notify token facet that this member was removed.\\n    FastTokenFacet(address(this)).beforeRemovingMember(member);\\n    // Notify marketplace that this member was removed from this FAST.\\n    MarketplaceAccessFacet(LibFast.data().marketplace).memberRemovedFromFast(member);\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n  }\\n\\n  /// Flags.\\n\\n  /**\\n   * @notice Retrieves flags for a given address.\\n   * @param a is the address to retrieve flags for.\\n   * @return A `Flags` struct.\\n   */\\n  function flags(address a)\\n      external view returns(Flags memory) {\\n    return Flags({\\n        isGovernor: AHasGovernors(address(this)).isGovernor(a),\\n        isMember: AHasMembers(this).isMember(a)\\n      });\\n  }\\n}\\n\",\"keccak256\":\"0x4886c9600fc4575b1093bdea7a580b80acc6e61c815d9f1b2b4574410a28c451\",\"license\":\"MIT\"},\"contracts/fast/FastAutomatonsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport './lib/AFastFacet.sol';\\nimport '../common/AHasAutomatons.sol';\\n\\n\\n// Privileges bits.\\nuint32 constant FAST_PRIVILEGE_MANAGE_MEMBERS = 1;\\nuint32 constant FAST_PRIVILEGE_MANAGE_DISTRIBUTIONS = 2;\\n\\n/**\\n * @title The Fast Smart Contract.\\n * @notice The Fast Automatons facet is in charge of keeping track of automaton accounts.\\n */\\ncontract FastAutomatonsFacet is AFastFacet, AHasAutomatons {\\n  /// Automatons management.\\n\\n  function isAutomatonsManager(address who)\\n      internal view override(AHasAutomatons)\\n      returns(bool) {\\n    return _isIssuerMember(who);\\n  }\\n}\\n\",\"keccak256\":\"0xb7c24385b1896137f01fb2d7edf20d0d8b301324c4825f51755a40b46bbd15ab\",\"license\":\"MIT\"},\"contracts/fast/FastFrontendFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibHelpers.sol';\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFastToken.sol';\\n\\n\\n/**\\n * @notice A facet dedicated to view / UI only methods. This facet should never hold any method that\\n * is not either `pure` or `view`, except to emit events.\\n */\\ncontract FastFrontendFacet is AFastFacet {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Data structures.\\n\\n  /**\\n   * @notice This struct groups the common attributes of a FAST.\\n   * @dev This struct shouldn't be used in internal storage.\\n   */\\n  struct Details {\\n    /// @notice The `address` of the FAST.\\n    address addr;\\n    /// @notice The `name` of the FAST (ERC20).\\n    string name;\\n    /// @notice The `symbol` of the FAST (ERC20).\\n    string symbol;\\n    /// @notice The `decimals` of the FAST (ERC20).\\n    uint8 decimals;\\n    /// @notice The `totalSupply` of the FAST (ERC20).\\n    uint256 totalSupply;\\n    /// @notice Whether the FAST is semi public or not.\\n    bool isSemiPublic;\\n    /// @notice Whether the FAST has a fixed supply or continious.\\n    bool hasFixedSupply;\\n    /// @notice Whether the transfers are enabled or not for this FAST.\\n    bool transfersDisabled;\\n    /// @notice The reserve balance.\\n    uint256 reserveBalance;\\n    /// @notice The number of members the FAST has.\\n    uint256 memberCount;\\n    /// @notice The number of governors for the FAST.\\n    uint256 governorCount;\\n  }\\n\\n  /**\\n   * @notice Governor level details.\\n   * @dev Note that **this struct shouldn't be used in internal storage**.\\n   */\\n  struct GovernorDetails {\\n    /// @notice The Governor's address.\\n    address addr;\\n    /// @notice The Governor's ETH balance.\\n    uint256 ethBalance;\\n    /// @notice Whether the Governor is also a Member.\\n    bool isMember;\\n  }\\n\\n  /**\\n   * @notice Member level details.\\n   * @dev This struct shouldn't be used in internal storage.\\n   */\\n  struct MemberDetails {\\n    /// @notice The Member's address.\\n    address addr;\\n    /// @notice The Member's balance.\\n    uint256 balance;\\n    /// @notice The Member's ETH balance.\\n    uint256 ethBalance;\\n    /// @notice Whether the Member is also a Governor.\\n    bool isGovernor;\\n  }\\n\\n  /// Emitters.\\n\\n  /**\\n   * @notice Called by diamond facets, signals that FAST details may have changed.\\n   * \\n   * Business logic:\\n   * - Modifiers:\\n   *   - Requires the caller to be another facet of the diamond.\\n   * Emits `DetailsChanged`, see `IFastEvents.DetailsChanged`\\n   */\\n  function emitDetailsChanged()\\n      external onlyDiamondFacet {\\n    LibFastToken.Data storage tokenData = LibFastToken.data();\\n    emit DetailsChanged({\\n      transfersDisabled: LibFast.data().transfersDisabled,\\n      memberCount: LibHasMembers.data().memberSet.values.length,\\n      governorCount: LibHasGovernors.data().governorSet.values.length,\\n      totalSupply: tokenData.totalSupply,\\n      reserveBalance: tokenData.balances[LibHelpers.ZERO_ADDRESS]\\n    });\\n  }\\n\\n  /// Public functions.\\n\\n  /**\\n   * @notice Gets the details of a FAST.\\n   * @return The details for the current FAST, see `Details`.\\n   */\\n  function details()\\n      public view returns(Details memory) {\\n    LibFast.Data storage topStorage = LibFast.data();\\n    LibFastToken.Data storage tokenStorage = LibFastToken.data();\\n    return Details({\\n      addr: address(this),\\n      name: tokenStorage.name,\\n      symbol: tokenStorage.symbol,\\n      decimals: tokenStorage.decimals,\\n      totalSupply: tokenStorage.totalSupply,\\n      isSemiPublic: topStorage.isSemiPublic,\\n      hasFixedSupply: topStorage.hasFixedSupply,\\n      transfersDisabled: topStorage.transfersDisabled,\\n      reserveBalance: tokenStorage.balances[LibHelpers.ZERO_ADDRESS],\\n      memberCount: AHasMembers(address(this)).memberCount(),\\n      governorCount: LibHasGovernors.data().governorSet.values.length\\n    });\\n  }\\n\\n  /**\\n   * @notice Gets detailed governor details.\\n   * @return GovernorDetails See: `GovernorDetails`.\\n   */\\n  function detailedGovernor(address governor)\\n      public view returns(GovernorDetails memory) {\\n    return GovernorDetails({\\n      addr: governor,\\n      ethBalance: (payable(governor).balance),\\n      isMember: AHasMembers(address(this)).isMember(governor)\\n    });\\n  }\\n\\n  function paginateDetailedGovernors(uint256 index, uint256 perPage)\\n      external view returns(GovernorDetails[] memory, uint256) {\\n    (address[] memory governors, uint256 nextCursor) =\\n      LibPaginate.addresses(LibHasGovernors.data().governorSet.values, index, perPage);\\n    GovernorDetails[] memory values = new GovernorDetails[](governors.length);\\n    uint256 length =  governors.length;\\n    for (uint256 i = 0; i < length;) {\\n      values[i] = detailedGovernor(governors[i]);\\n      unchecked { ++i; }\\n    }\\n    return (values, nextCursor);\\n  }\\n\\n  /**\\n   * @notice Gets detailed member details.\\n   * @return A FAST member's details, see `MemberDetails`.\\n   */\\n  function detailedMember(address member)\\n      public view returns(MemberDetails memory) {\\n    return MemberDetails({\\n      addr: member,\\n      balance: LibFastToken.data().balances[member],\\n      ethBalance: (payable(member).balance),\\n      isGovernor: LibHasGovernors.data().governorSet.contains(member)\\n    });\\n  }\\n\\n  function paginateDetailedMembers(uint256 index, uint256 perPage)\\n      external view returns(MemberDetails[] memory, uint256) {\\n    LibHasMembers.Data storage membersData = LibHasMembers.data();\\n    (address[] memory members, uint256 nextCursor) =\\n      LibPaginate.addresses(membersData.memberSet.values, index, perPage);\\n    MemberDetails[] memory values = new MemberDetails[](members.length);\\n    uint256 length = members.length;\\n    for (uint256 i = 0; i < length;) {\\n      values[i] = detailedMember(members[i]);\\n      unchecked { ++i; }\\n    }\\n    return (values, nextCursor);\\n  }\\n}\\n\",\"keccak256\":\"0xf51344147ebb86e802fbc959856b42cb60d4af543194a05e74ce8c11834431e7\",\"license\":\"MIT\"},\"contracts/fast/FastHistoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibPaginate.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFastHistory.sol';\\n\\n\\n/**\\n * @notice Although past events could be scrapped from the chain, we want to\\n * the frontend to be capable of listing past transfers and minting / burning events.\\n * This facet is in charge of performing archival of these things.\\n */\\ncontract FastHistoryFacet is AFastFacet {\\n  /// Minting history-keeping methods.\\n\\n  /**\\n   * @notice This method is a callback for other facets to signal whenever new tokens are minted.\\n   * \\n   * Business logic:\\n   * - Requires that the caller must be another facet.\\n   * - Adds a supply proof item of type `LibFastHistory.SupplyOp.Mint` on top of the stack.\\n   */\\n  function minted(uint256 amount, string calldata ref)\\n      external onlyDiamondFacet() {\\n    // Keep track of the mint.\\n    LibFastHistory.data().supplyProofs.push(\\n      LibFastHistory.SupplyProof({\\n        op: LibFastHistory.SupplyOp.Mint,\\n        amount: amount,\\n        blockNumber: block.number,\\n        ref: ref\\n      })\\n    );\\n  }\\n\\n  /**\\n   * @notice This method is a callback for other facets to signal whenever new tokens are burnt.\\n   * \\n   * Business logic:\\n   * - Requires that the caller must be another facet.\\n   * - Adds a supply proof item of type `LibFastHistory.SupplyOp.Burn` on top of the stack.\\n   */\\n  function burnt(uint256 amount, string calldata ref)\\n      external onlyDiamondFacet() {\\n    // Keep track of the unmint.\\n    LibFastHistory.data().supplyProofs.push(\\n      LibFastHistory.SupplyProof({\\n        op: LibFastHistory.SupplyOp.Burn,\\n        amount: amount,\\n        blockNumber: block.number,\\n        ref: ref\\n      })\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the number of supply proofs (minting and burning together) ever created.\\n   * @return A `uint256`.\\n   */\\n  function supplyProofCount()\\n      external view returns(uint256) {\\n    return LibFastHistory.data().supplyProofs.length;\\n  }\\n\\n  /**\\n   * @notice Returns a page of supply proofs (minting and burning together).\\n   * @param cursor is the zero-based index where to start fetching records.\\n   * @param perPage is the number of items to return.\\n   * @return A `(LibFastHistory.SupplyProof[], uint256)` tuple containing a page of data and the cursor to the next page.\\n   */\\n  function paginateSupplyProofs(uint256 cursor, uint256 perPage)\\n      external view returns(LibFastHistory.SupplyProof[] memory, uint256) {\\n    return LibPaginate.supplyProofs(LibFastHistory.data().supplyProofs, cursor, perPage);\\n  }\\n\\n  /// Transfer history-keeping methods.\\n\\n  /**\\n   * @notice This method is a callback for other facets to signal whenever a transfer has completed successfuly.\\n   * \\n   * Business logic:\\n   * - Requires that the caller must be another facet.\\n   * - Keeps track of the operation in various tracking structures, so that it can be queried later by `sender` and `recipient`.\\n   * - Pushes a transfer proof to the main transfer proof tracking stack.\\n   */\\n  function transfered(address spender, address from, address to, uint256 amount, string calldata ref)\\n      external onlyDiamondFacet() {\\n    LibFastHistory.Data storage s = LibFastHistory.data();\\n    // Keep track of the transfer proof ID for the sender and for the recipient.\\n    s.transferProofInvolvements[from].push(s.transferProofs.length);\\n    s.transferProofInvolvements[to].push(s.transferProofs.length);\\n    // Keep track of the transfer proof globally.\\n    s.transferProofs.push(\\n      LibFastHistory.TransferProof({\\n        spender: spender,\\n        from: from,\\n        to: to,\\n        amount: amount,\\n        blockNumber: block.number,\\n        ref: ref\\n      })\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the number of transfer proofs ever created.\\n   * @return A `uint256`.\\n   */\\n  function transferProofCount()\\n      external view returns(uint256) {\\n    return LibFastHistory.data().transferProofs.length;\\n  }\\n\\n  /**\\n   * @notice Returns a page of transfer proofs.\\n   * @param cursor is the zero-based index where to start fetching records.\\n   * @param perPage is the number of items to return.\\n   * @return A `(LibFastHistory.TransferProof[], uint256)` tuple containing a page of data and the cursor to the next page.\\n   */\\n  function paginateTransferProofs(uint256 cursor, uint256 perPage)\\n      external view returns(LibFastHistory.TransferProof[] memory, uint256) {\\n    return LibPaginate.transferProofs(LibFastHistory.data().transferProofs, cursor, perPage);\\n  }\\n\\n  /**\\n   * @notice Counts all past inbound and outbound transfers involving a given address.\\n   * @param involvee is the address for which to get the transfer proofs.\\n   */\\n  function transferProofByInvolveeCount(address involvee)\\n      external view returns(uint256) {\\n    return LibFastHistory.data().transferProofInvolvements[involvee].length;\\n  }\\n\\n  /**\\n   * @notice Returns pages of indices of past inbound and outbound transfer proofs by involvee.\\n   * @dev This function is reading from an indexing data structure. Each index points to a record\\n   * in the main transfer proof storage, and can then be found in `transferProofs` at returned indices.\\n   * @param involvee is the address for which to retrieve a page of data.\\n   * @param cursor is where to start.\\n   * @param perPage is how many records at most should be returned.\\n  */\\n  function paginateTransferProofIndicesByInvolvee(address involvee, uint256 cursor, uint256 perPage)\\n      external view returns(uint256[] memory, uint256) {\\n    return LibPaginate.uint256s(LibFastHistory.data().transferProofInvolvements[involvee], cursor, perPage);\\n  }\\n\\n  /**\\n   * @notice Returns a page of inbound and outbound transfer proofs based on an involvee.#\\n   * @param involvee is the address for which to fetch the data.\\n   * @param cursor is where to start.\\n   * @param perPage is how many items at most to return.\\n   * @return A `(LibFastHistory.TransferProof[], uint256)` tuple containing the results and the cursor to the next page.\\n   */\\n  function paginateTransferProofsByInvolvee(address involvee, uint256 cursor, uint256 perPage)\\n      external view returns(LibFastHistory.TransferProof[] memory, uint256) {\\n    LibFastHistory.Data storage s = LibFastHistory.data();\\n    uint256[] storage collection  = s.transferProofInvolvements[involvee];\\n    uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n    LibFastHistory.TransferProof[] memory values = new LibFastHistory.TransferProof[](length);\\n    for (uint256 i = 0; i < length;) {\\n      values[i] = s.transferProofs[collection[cursor + i]];\\n      unchecked { ++i; }\\n    }\\n    return (values, cursor + length);\\n  }\\n}\\n\",\"keccak256\":\"0x62822d72ec1fe8073dca0c1853a4fd2e5709c91875fd30416d229c80f5f9de28\",\"license\":\"MIT\"},\"contracts/fast/FastTokenFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../interfaces/IERC20.sol';\\nimport '../interfaces/ICustomErrors.sol';\\nimport '../common/AHasMembers.sol';\\nimport '../lib/LibDiamond.sol';\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFastToken.sol';\\nimport '../marketplace/MarketplaceTokenHoldersFacet.sol';\\nimport './FastTopFacet.sol';\\nimport './FastAccessFacet.sol';\\nimport './FastHistoryFacet.sol';\\nimport './FastFrontendFacet.sol';\\n\\n\\ncontract FastTokenFacet is AFastFacet, IERC20 {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Constants.\\n\\n  string internal constant DEAD_TOKENS_RETRIEVAL = 'Dead tokens retrieval';\\n\\n  /// Minting methods.\\n\\n  /**\\n   * @notice Mints an amount of FAST tokens.\\n   *  A reference can be passed to identify why this happened for example.\\n   *\\n   * Business logic:\\n   * - Modifiers:\\n   *   - Requires the caller to be a member of the Issuer contract.\\n   * - Requires that either the token has continuous supply, or that no tokens have been minted yet.\\n   * - Increases the reserve balance by `amount`.\\n   * - Calls `FastHistoryFacet.minted`.\\n   * - Calls `FastFrontendFacet.emitDetailsChanged`.\\n   * - Emits a `Minted(amount, ref)` event.\\n   * @param amount The number of FAST tokens to mint.\\n   * @param ref A reference for this minting operation.\\n   */\\n  function mint(uint256 amount, string calldata ref)\\n      external\\n      onlyIssuerMember {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n    // We want to make sure that either of these two is true:\\n    // - The token doesn't have fixed supply.\\n    // - The token has fixed supply but has no tokens yet (First and only mint).\\n    if (FastTopFacet(address(this)).hasFixedSupply() && (s.totalSupply != 0 || this.balanceOf(address(0)) != 0))\\n      revert ICustomErrors.RequiresContinuousSupply();\\n\\n    // Prepare the minted amount on the zero address.\\n    s.balances[address(0)] += amount;\\n\\n    // Keep track of the minting operation.\\n    FastHistoryFacet(address(this)).minted(amount, ref);\\n\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n    emit Minted(amount, ref, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Burns an amount of FAST tokens.\\n   *  A reference can be passed to identify why this happened for example.\\n   *\\n   * Business logic.\\n   * - Modifiers:\\n   *   - Requires the caller to be a member of the Issuer contract.\\n   * - Requires that the token has continuous supply.\\n   * - Requires that there are enough funds in the reserve to cover for `amount` being burnt.\\n   * - Decreases the reserve balance by `amount`.\\n   * - Calls `FastHistoryFacet.burnt(amount, ref)`.\\n   * - Calls `FastFrontendFacet.emitDetailsChanged`.\\n   * - Emits a `Burnt(amount, ref)`.\\n   * @param amount The number of FAST tokens to mint.\\n   * @param ref A reference for this minting operation.\\n   */\\n  function burn(uint256 amount, string calldata ref)\\n      external\\n      onlyIssuerMember {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n\\n    if (FastTopFacet(address(this)).hasFixedSupply())\\n      revert ICustomErrors.RequiresContinuousSupply();\\n\\n    // Remove the minted amount from the zero address.\\n    s.balances[address(0)] -= amount;\\n\\n    // Keep track of the minting operation.\\n    FastHistoryFacet(address(this)).burnt(amount, ref);\\n\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n    emit Burnt(amount, ref, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Allows an Issuer member to move an arbitrary account's holdings back to the reserve,\\n   * as per regulatory requirements.\\n   *\\n   * Business logic:\\n   * - Modifiers:\\n   *   - Requires that the caller is a member of the Issuer contract.\\n   * - If the amount held by `holder` is not zero\\n   *   - The balance of `holder` should be set to zero.\\n   *   - The reserve's balance should be increased by how much was on the holder's account.\\n   *   - Total supply should be decreased by that amount too.\\n   * - The `holder`'s address should not be tracked as a token holder in this FAST anymore.\\n   * - The `holder`'s address should not be tracked as a token holder in the Marketplace anymore.\\n   * - A `Transfer(holder, reserve, amount)` event should be emited.\\n   * - If the amount previously held by `holder` was not zero,\\n   *   - Since the reserve balance and total supply have changed, the `FastFrontendFacet.emitDetailsChanged()` function should be called.\\n   * @param holder is the address for which to move the tokens from.\\n   */\\n  function retrieveDeadTokens(address holder)\\n      external\\n      onlyIssuerMember {\\n    // Cache how many tokens the holder has.\\n    uint256 amount = balanceOf(holder);\\n    // Note: The amount **can** be zero in this function.\\n\\n    // Grab a pointer to the token storage.\\n    LibFastToken.Data storage s = LibFastToken.data();\\n\\n    // These should only run if the amount is zero, as they result in a no-op.\\n    if (amount > 0) {\\n      // Set the holder balance to zero.\\n      s.balances[holder] = 0;\\n      // Increment the reserve's balance.\\n      s.balances[address(0)] += amount;\\n      // The tokens aren't in circulation anymore - decrease total supply.\\n      s.totalSupply -= amount;\\n    }\\n\\n    // Since the holder's account is now empty, make sure to keep track of it both\\n    // in this FAST and in the marketplace.\\n    s.tokenHolders.remove(holder, true);\\n    MarketplaceTokenHoldersFacet(LibFast.data().marketplace).fastBalanceChanged(holder, 0);\\n\\n    // Keep track of this transfer in history facet.\\n    FastHistoryFacet(address(this)).transfered(msg.sender, holder, address(0), amount, DEAD_TOKENS_RETRIEVAL);\\n\\n    // This operation can be seen as a regular transfer between holder and reserve. Emit.\\n    emit FastTransfer(msg.sender, holder, address(0), amount, DEAD_TOKENS_RETRIEVAL);\\n    emit Transfer(holder, address(0), amount);\\n\\n    // If amount wasn't zero, total supply and reserve balance have changed - emit.\\n    if (amount > 0)\\n      FastFrontendFacet(address(this)).emitDetailsChanged();\\n  }\\n\\n  // ERC20 implementation and transfer related methods.\\n\\n  /**\\n   * @notice The name of this FAST (ERC20 standard).\\n   * @return string Name of the FAST.\\n   */\\n  function name()\\n      external view returns(string memory) {\\n    return LibFastToken.data().name;\\n  }\\n\\n  /**\\n   * @notice The symbol of this FAST (ERC20 standard).\\n   * @return string Symbol of the FAST.\\n   */\\n  function symbol()\\n      external view returns(string memory) {\\n    return LibFastToken.data().symbol;\\n  }\\n\\n  /**\\n   * @notice The `decimals` of this FAST (ERC20 standard).\\n   * @return uint256 Number of decimals the FAST has.\\n   */\\n  function decimals()\\n      external view returns(uint256) {\\n    return LibFastToken.data().decimals;\\n  }\\n\\n  /**\\n   * @notice The total supply of the FAST (ERC20 standard).\\n   * @return uint256 Total supply of the FAST.\\n   */\\n  function totalSupply()\\n      external override(IERC20) view returns(uint256) {\\n    return LibFastToken.data().totalSupply;\\n  }\\n\\n  /**\\n   * @notice The balance of the passed owner (ERC20 standard).\\n   * @param owner The owners address to get the balance of.\\n   * @return uint256 The current balance of this owner's account.\\n   */\\n  function balanceOf(address owner)\\n      public view override(IERC20) returns(uint256) {\\n    return LibFastToken.data().balances[owner];\\n  }\\n\\n  /**\\n   * @notice See `performTransfer`, the spender will be equal to the `owner`, and the `ref` will be defauted. */\\n  function transfer(address to, uint256 amount)\\n      external override(IERC20) returns(bool) {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performTransfer(\\n      TransferArgs({\\n        spender: msg.sender,\\n        from: msg.sender,\\n        to: to,\\n        amount: amount,\\n        ref: LibFastToken.DEFAULT_TRANSFER_REFERENCE\\n      })\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @notice See `performTransfer`, the spender will be equal to the `owner`. */\\n  function transferWithRef(address to, uint256 amount, string calldata ref)\\n      external returns(bool) {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performTransfer(\\n      TransferArgs({\\n        spender: msg.sender,\\n        from: msg.sender,\\n        to: to,\\n        amount: amount,\\n        ref: ref\\n      })\\n    );\\n    return true;\\n  }\\n\\n  function allowance(address owner, address spender)\\n      public view override(IERC20) returns(uint256) {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n    // If the allowance being queried is owned by the reserve, and `spender` is\\n    // an Issuer member, `spender` owns the full balance of `owner`. If they are\\n    // not an Issuer member then their allowance is zero. Otherwise, the regular given\\n    // allowance for `spender` over `owner` applies.\\n    if (owner == address(0))\\n      return AHasMembers(LibFast.data().issuer).isMember(spender)\\n        ? s.balances[owner]\\n        : 0;\\n    else\\n      return s.allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @notice This method directly calls `performApproval`, setting its `from` paramter to the sender of\\n   * the transaction.\\n   * @param spender is the address to allow spending from the caller's wallet.\\n   * @param amount is how much to **increase** the allowance.\\n   */\\n  function approve(address spender, uint256 amount)\\n      external override(IERC20) returns(bool) {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performApproval(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice This method directly calls `performDisapproval`, setting its `from` parameter to the sender of\\n   * the transaction.\\n   * @param spender is the address to disallow spending from the caller's wallet.\\n   * @param amount is how much to **decrease** the allowance.\\n   */\\n  function disapprove(address spender, uint256 amount)\\n      external\\n      onlyMember(msg.sender)\\n      returns(bool) {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performDisapproval(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  /// @notice See `performTransfer`, the `ref` will be defaulted.\\n  function transferFrom(address from, address to, uint256 amount)\\n      external override(IERC20) returns(bool) {\\n    transferFromWithRef(from, to, amount, LibFastToken.DEFAULT_TRANSFER_REFERENCE);\\n    return true;\\n  }\\n\\n  /// @notice See `performTransfer`.\\n  function transferFromWithRef(address from, address to, uint256 amount, string memory ref)\\n      public returns(bool) {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performTransfer(\\n      TransferArgs({\\n        spender: msg.sender,\\n        from: from,\\n        to: to,\\n        amount: amount,\\n        ref: ref\\n      })\\n    );\\n    return true;\\n  }\\n\\n  // Allowances query operations.\\n\\n  function givenAllowanceCount(address owner)\\n      external view returns(uint256) {\\n    return LibFastToken.data().allowancesByOwner[owner].values.length;\\n  }\\n\\n  function paginateAllowancesByOwner(address owner, uint256 index, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(\\n      LibFastToken.data().allowancesByOwner[owner].values,\\n      index,\\n      perPage\\n    );\\n  }\\n\\n  function receivedAllowanceCount(address spender)\\n      external view returns(uint256) {\\n    return LibFastToken.data().allowancesBySpender[spender].values.length;\\n  }\\n\\n  function paginateAllowancesBySpender(address spender, uint256 index, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(\\n      LibFastToken.data().allowancesBySpender[spender].values,\\n      index,\\n      perPage\\n    );\\n  }\\n\\n  // These functions would be internal / private if we weren't using the diamond pattern.\\n  // Instead, they're `onlyDiamondFacet` - eg can only be called by facets of the current\\n  // FAST.\\n\\n  struct TransferArgs {\\n    address spender;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    string ref;\\n  }\\n\\n  /**\\n   * @notice This is the internal method that gets called whenever a transfer is initiated. Both `transfer`,\\n   * `transferWithRef`, and their variants internally call this function.\\n   *\\n   * Business logic:\\n   * - Modifiers:\\n   *   - Only facets of the current diamond should be able to call this.\\n   * - Requires that transfers are enabled for this FAST.\\n   * - Requires that `from` and `to` are different addresses.\\n   * - Requires that `from` membership is active in the marketplace.\\n   * - If `from` is not the reserve, requires that `from` is a valid token holder.\\n   * - If `from` is the reserve, requires that the message sender is an issuer member.\\n   * - Requires that `to` is a valid token holder.\\n   * - Requires that the amount is a positive value.\\n   * - If the transfer is an allowance - e.g. the `spender` is not the same as the `from` address,\\n   *   - The allowance given by the `from` address to the `spender` covers for the `amount`.\\n   *     - If we are **not** transfering **from** the reserve,\\n   *       - Decreases the allowance given by `from` to `spender`.\\n   *         - If the new allowance reaches zero,\\n   *           - Stop tracking the allowance in the allowance lookup tables for both spending and receiving directions.\\n   * - Decreases the balance of the `owner` address.\\n   * - Increases the balance of the `to` address by `amount`.\\n   * - If we are **not** transfering **from** the reserve,\\n   *   - Requires that there are enough transfer credits to cover for `amount`.\\n   *   - Decreases the transfer credits by `amount`.\\n   * - If the `to` address is the reserve,\\n   *   - Decreases the total supply by `amount`.\\n   *   - Calls `FastFrontendFacet.emitDetailsChanged`.\\n   * - Else, if the `from` address is the reserve,\\n   *   - Increases the total supply by `amount`.\\n   *   - Calls `FastFrontendFacet.emitDetailsChanged`.\\n   * - Calls `FastHistoryFacet.transfered`.\\n   * - Emits a `Transfer(from, to, amount)` event.\\n   */\\n  function performTransfer(TransferArgs calldata p)\\n      external onlyDiamondFacet {\\n    // TODO: Make this function return instead of raising errors.\\n\\n    // Grab a pointer to our top-level storage.\\n    LibFast.Data storage topData = LibFast.data();\\n\\n    // Requires that transfers are enabled for this FAST.\\n    if (FastTopFacet(address(this)).transfersDisabled())\\n      revert ICustomErrors.RequiresTransfersEnabled();\\n    // Requires that `from` and `to` are different addresses.\\n    else if (p.from == p.to)\\n      revert ICustomErrors.RequiresDifferentSenderAndRecipient(p.from);\\n    // Requires that allowance transfers from the reserve are performed by issuer members only.\\n    else if (p.from == address(0) && !AHasMembers(topData.issuer).isMember(p.spender))\\n      revert ICustomErrors.RequiresIssuerMembership(p.spender);\\n\\n    // Requires that the `from` address can hold tokens.\\n    else if (!canHoldTokens(p.from))\\n      revert ICustomErrors.RequiresValidTokenHolder(p.from);\\n    // Requires that the `from` address marketplace membership is active if not the reserve.\\n    else if (p.from != address(0) && !IHasActiveMembers(LibFast.data().marketplace).isActiveMember(p.from))\\n      revert ICustomErrors.RequiresMarketplaceActiveMembership(p.from);\\n\\n    // Requires that the `to` address can hold tokens.\\n    else if (!canHoldTokens(p.to))\\n      revert ICustomErrors.RequiresValidTokenHolder(p.to);\\n\\n    // For any non-zero amount, update balances and allowances, notify other contracts, etc.\\n    if (p.amount != 0) {\\n      // Grab a pointer to our token storage.\\n      LibFastToken.Data storage tokenData = LibFastToken.data();\\n\\n      // If this is an allowance transfer and if the `from` account is not the reserve...\\n      if (p.spender != p.from && p.from != address(0)) {\\n        // Decrease allowance.\\n        uint256 newAllowance = tokenData.allowances[p.from][p.spender] -= p.amount;\\n        // If the allowance reached zero, we want to remove that allowance from\\n        // the various other places where we keep track of it.\\n        if (newAllowance == 0) {\\n          tokenData.allowancesByOwner[p.from].remove(p.spender, true);\\n          tokenData.allowancesBySpender[p.spender].remove(p.from, true);\\n        }\\n      }\\n\\n      // Keep track of the balances - `from` spends (decrease), `to` receives (increase).\\n      uint256 fromBalance = (tokenData.balances[p.from] -= p.amount);\\n      uint256 toBalance = (tokenData.balances[p.to] += p.amount);\\n\\n      // Keep track of who has what FAST.\\n      MarketplaceTokenHoldersFacet(topData.marketplace).fastBalanceChanged(p.from, fromBalance);\\n      MarketplaceTokenHoldersFacet(topData.marketplace).fastBalanceChanged(p.to, toBalance);\\n\\n      // Keep track of who holds this token.\\n      balanceChanged(p.from, fromBalance);\\n      balanceChanged(p.to, toBalance);\\n\\n      // If the funds are going to the reserve...\\n      if (p.to == address(0)) {\\n        // Decrease total supply.\\n        tokenData.totalSupply -= p.amount;\\n        // Emit a top-level details change event.\\n        FastFrontendFacet(address(this)).emitDetailsChanged();\\n      }\\n      // If the funds are moving from the zero address...\\n      else if (p.from == address(0)) {\\n        // Increase total supply.\\n        tokenData.totalSupply += p.amount;\\n        // Emit a top-level details change event.\\n        FastFrontendFacet(address(this)).emitDetailsChanged();\\n      }\\n    }\\n\\n    // Keep track of the transfer in the history facet.\\n    FastHistoryFacet(address(this)).transfered(p.spender, p.from, p.to, p.amount, p.ref);\\n\\n    // Emit!\\n    emit FastTransfer(p.spender, p.from, p.to, p.amount, p.ref);\\n    emit Transfer(p.from, p.to, p.amount);\\n  }\\n\\n  /**\\n   * @notice Increases the allowance given by `from` to `spender` by `amount`.\\n   * Note that this function should run and emit even if the amount passed is zero.\\n   * Business logic:\\n   * - Modifiers:\\n   *   - Only facets of the current diamond should be able to call this.\\n   *   - Requires that `onlyTokenHolder` passes for the `from` address.\\n   * - Requires that the `amount` is positive number.\\n   * - Increases the allowance given by `from` to `spender` by `amount`.\\n   * - Update the allowance lookup tables in both directions.\\n   * - Emits an `Approval(from, spender, amount)`.\\n   * @param from is the wallet from which to give the allowance.\\n   * @param spender is the receiver of the allowance.\\n   * @param amount is how much to **increase** the current allowance by.\\n   * \\n   * Note: This function runs when amount is zero, and will emit.\\n   */\\n  function performApproval(address from, address spender, uint256 amount)\\n      external\\n      onlyDiamondFacet {\\n    // Allowance cannot be given over the reserve.\\n    if (from == address(0))\\n      revert ICustomErrors.UnsupportedOperation();\\n    // Require that the `from` address can hold tokens.\\n    else if (!canHoldTokens(from))\\n      revert ICustomErrors.RequiresValidTokenHolder(from);\\n    \\n    if (amount > 0) {\\n      LibFastToken.Data storage s = LibFastToken.data();\\n      // Note that we are not exactly following ERC20 here - we don't want to **set** the allowance to `amount`\\n      // to mitigate a possible attack.\\n      // See https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit#heading=h.gmr6zdg47087.\\n      s.allowances[from][spender] += amount;\\n    // Keep track of given and received allowances.\\n      s.allowancesByOwner[from].add(spender, true);\\n      s.allowancesBySpender[spender].add(from, true);\\n    }\\n\\n    // Emit!\\n    emit Approval(from, spender, amount);\\n  }\\n\\n  /**\\n   * @notice Decreases allowance given by `from` to `spender` by `amount`.\\n   *\\n   * Business logic:\\n   * - Modifiers:\\n   *   - Only facets of the current diamond should be able to call this.\\n   * - The allowance given by `from` to `spender` is decreased by `amount`.\\n   * - Whether the allowance reached zero, stop tracking it by owner and by spender.\\n   * - Emit a `Disapproval(from, spender, amount)` event.\\n   * \\n   * Note: This function runs when amount is zero, and will emit.\\n   */\\n  function performDisapproval(address from, address spender, uint256 amount)\\n      external\\n      onlyDiamondFacet {\\n    if (amount != 0) {\\n      LibFastToken.Data storage s = LibFastToken.data();\\n\\n      // Remove allowance.\\n      s.allowances[from][spender] -= amount;\\n\\n      // Whenever the allowance reaches zero, stop tracking it by owner and spender.\\n      if (s.allowances[from][spender] == 0) {\\n        s.allowancesByOwner[from].remove(spender, true);\\n        s.allowancesBySpender[spender].remove(from, true);\\n      }\\n    }\\n\\n    // Emit!\\n    emit Disapproval(from, spender, amount);\\n  }\\n\\n  // WARNING: This method contains two loops. We know that this should never\\n  // happen in solidity. However:\\n  // - In the context of our private chain, gas is cheap.\\n  // - It can only be called by a governor.\\n  function beforeRemovingMember(address member)\\n      external onlyDiamondFacet() {\\n    if (balanceOf(member) != 0)\\n      revert ICustomErrors.RequiresPositiveBalance(member);\\n\\n    LibFastToken.Data storage s = LibFastToken.data();\\n\\n    // Remove all given allowances.\\n    {\\n      address[] storage gaData = s.allowancesByOwner[member].values;\\n      while (gaData.length > 0) {\\n        // Make sure the call is performed externally so that we can mock.\\n        address spender = gaData[0];\\n        this.performDisapproval(member, spender, s.allowances[member][spender]);\\n      }\\n    }\\n\\n    // Remove all received allowances.\\n    {\\n      address[] storage raData = s.allowancesBySpender[member].values;\\n      while (raData.length > 0) {\\n        // Make sure the call is performed externally so that we can mock.\\n        address owner = raData[0];\\n        this.performDisapproval(owner, member, s.allowances[owner][member]);\\n      }\\n    }\\n  }\\n\\n  function holders()\\n      external view\\n      returns(address[] memory) {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n    return s.tokenHolders.values;\\n  }\\n\\n  function balanceChanged(address holder, uint256 balance)\\n      private {\\n    // Return early if this is the zero address.\\n    if (holder == address(0))\\n      return;\\n\\n    LibFastToken.Data storage s = LibFastToken.data();\\n\\n    // If this is a positive balance and it doesn't already exist in the set, add address.\\n    if (balance > 0 && !s.tokenHolders.contains(holder))\\n      s.tokenHolders.add(holder, false);\\n    // If the balance is 0 and it exists in the set, remove it.\\n    else if (balance == 0 && s.tokenHolders.contains(holder))\\n      s.tokenHolders.remove(holder, false);\\n  }\\n\\n  // Private and helper methods.\\n\\n  /**\\n   * @notice Ensures that the given address is a member of the current FAST or the Zero Address.\\n   *\\n   * Business logic:\\n   *   - If the candidate is the reserve, it is a valid token holder.\\n   *   - If the FAST is semi-public,\\n   *     - We require that candidate is a member of the Marketplace contract and is active in it.\\n   *   - Otherwise,\\n   *     - Require that the candidate is a member of the FAST.\\n   * @param candidate The address to check.\\n   * @return A boolean set to `true` if `candidate` can hold tokens, `false` otherwise.\\n   */\\n  function canHoldTokens(address candidate)\\n      private view returns(bool) {\\n    // Zero address can hold tokens, in any cases.\\n    if (candidate == address(0))\\n      return true;\\n    // If the FAST is semi public, any member of the marketplace can hold tokens.\\n    else if (FastTopFacet(address(this)).isSemiPublic()) {\\n      return AHasMembers(LibFast.data().marketplace).isMember(candidate);\\n    }\\n    // FAST is private, only members of the fast can hold tokens.\\n    else {\\n      return AHasMembers(address(this)).isMember(candidate);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5b2eda3ed2e86968070f171acc9b521e26c349121a609717c872b6757bffaef3\",\"license\":\"MIT\"},\"contracts/fast/FastTopFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibHelpers.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFast.sol';\\nimport './lib/IFastEvents.sol';\\nimport './FastFrontendFacet.sol';\\nimport './FastTokenFacet.sol';\\n\\n\\ncontract FastTopFacet is AFastFacet {\\n  // Getters and setters for global flags.\\n\\n  /**\\n   * @notice Get the Issuer address.\\n   * @return address Address of Issuer.\\n   */\\n  function issuerAddress()\\n      external view returns(address) {\\n    return LibFast.data().issuer;\\n  }\\n\\n  /**\\n   * @notice Get the Marketplace address.\\n   * @return address Address of Marketplace.\\n   */\\n  function marketplaceAddress()\\n      external view returns(address) {\\n    return LibFast.data().marketplace;\\n  }\\n\\n  /**\\n   * @notice Is this FAST a semi public FAST?\\n   * @return bool Yes/no semi public.\\n   */\\n  function isSemiPublic()\\n      external view returns(bool) {\\n    return LibFast.data().isSemiPublic;\\n  }\\n\\n  /**\\n   * @notice Is this FAST a fixed supply FAST?\\n   * @return bool Yes/no fixed supply.\\n   */\\n  function hasFixedSupply()\\n      external view returns(bool) {\\n    return LibFast.data().hasFixedSupply;\\n  }\\n\\n  /**\\n   * @notice Are transfers enabled across this FAST?\\n   * @return boolean `true` if transfers are disabled, `false` if transfers are enabled.\\n   */\\n  function transfersDisabled()\\n      external view returns(bool) {\\n    return LibFast.data().transfersDisabled;\\n  }\\n\\n  // Setters for global flags.\\n\\n  /**\\n   * @notice Allows to switch from a private scheme to a semi-public scheme,\\n   *  but not the other way around, unless the total supply is zero.\\n   * @param flag Set the semi public flag to true/false.\\n   */\\n  function setIsSemiPublic(bool flag)\\n      external\\n      onlyIssuerMember {\\n    // Someone is trying to toggle back to private?... No can do!\\n    if (this.isSemiPublic() && FastTokenFacet(address(this)).totalSupply() != 0) {\\n      revert ICustomErrors.UnsupportedOperation();\\n    }\\n    LibFast.data().isSemiPublic = flag;\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n  }\\n\\n  /**\\n   * @notice Allows an issuer member to enable or disable all transfers within this FAST.\\n   * @param flag Set the transfer capability to active or not.\\n   */\\n  function setTransfersDisabled(bool flag)\\n      external\\n      onlyIssuerMember {\\n    LibFast.Data storage d = LibFast.data();\\n    // Only make changes and emit if the new flag is different than the old one.\\n    if (d.transfersDisabled != flag) {\\n      // Set flag.\\n      d.transfersDisabled = flag;\\n      // Emit!\\n      FastFrontendFacet(address(this)).emitDetailsChanged();\\n    }\\n  }\\n\\n  /**\\n   * @notice Retrieves the group slug to which this FAST belongs.\\n   * @return string The group slug string.\\n   */\\n  function group()\\n      external view returns(string memory) {\\n    return LibFast.data().group;\\n  }\\n\\n  /**\\n   * @notice Assigns the FAST into a group given its slug.\\n   * It should only be callable by the Issuer contract.\\n   * @param newGroup is the slug for the new group for this FAST.\\n   */\\n  function setGroup(string calldata newGroup)\\n      external onlyIssuerContract {\\n    // Set group slug.\\n    LibFast.data().group = newGroup;\\n  }\\n}\\n\",\"keccak256\":\"0xd239f91a572a8df989e2e9ca163b29a3abc86a205c003c5c301630a49d11bd8c\",\"license\":\"MIT\"},\"contracts/fast/lib/AFastFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibHelpers.sol';\\nimport '../../lib/LibAddressSet.sol';\\nimport '../../common/AHasGovernors.sol';\\nimport '../../common/AHasMembers.sol';\\nimport '../../common/AHasAutomatons.sol';\\nimport '../../interfaces/IHasActiveMembers.sol';\\nimport '../lib/LibFast.sol';\\nimport './IFastEvents.sol';\\n\\n\\n/**\\n * @title Abstract FAST helper contract.\\n * @notice This abstract contract encapsulates modifiers allowing inheriting facets to guard against\\n * certain permissions.\\n */\\nabstract contract AFastFacet is IFastEvents {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Internal ACL functions.\\n\\n  function _isMarketplaceMember(address who)\\n      internal view returns(bool) {\\n    return AHasMembers(LibFast.data().marketplace).isMember(who);\\n  }\\n\\n  function _isMarketplaceActiveMember(address who)\\n      internal view returns(bool) {\\n    return IHasActiveMembers(LibFast.data().marketplace).isActiveMember(who);\\n  }\\n\\n  function _isIssuerMember(address who)\\n      internal view returns(bool) {\\n    return AHasMembers(LibFast.data().issuer).isMember(who);\\n  }\\n\\n  /// Modifiers.\\n\\n  /// @notice Ensures that a method can only be called by another facet of the same diamond.\\n  modifier onlyDiamondFacet() {\\n    if (!LibHelpers._isDiamondFacet(msg.sender))\\n      revert ICustomErrors.InternalMethod();\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the owner of this diamond.\\n  modifier onlyDiamondOwner() {\\n    if (!LibHelpers._isDiamondOwner(msg.sender))\\n      revert ICustomErrors.RequiresDiamondOwnership(msg.sender);\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier onlyDeployer() {\\n    if (!LibHelpers._isDeployer(msg.sender))\\n      revert ICustomErrors.InternalMethod();\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the issuer contract.\\n  modifier onlyIssuerContract() {\\n    if (msg.sender != LibFast.data().issuer)\\n      revert ICustomErrors.InternalMethod();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a member of the Marketplace.\\n   * @param who The address to check.\\n   */\\n  modifier onlyMarketplaceMember(address who) {\\n    if (!_isMarketplaceMember(who))\\n      revert ICustomErrors.RequiresMarketplaceMembership(who);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures a who is an active member of the Marketplace.\\n   * @param who The address to check.\\n   */\\n  modifier onlyMarketplaceActiveMember(address who) {\\n    if (!_isMarketplaceActiveMember(who))\\n      revert ICustomErrors.RequiresMarketplaceActiveMembership(who);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the message sender is a member of the Issuer.\\n   */\\n  modifier onlyIssuerMember() {\\n    if (!_isIssuerMember(msg.sender))\\n      revert ICustomErrors.RequiresIssuerMembership(msg.sender);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a governor of the FAST.\\n   * @param who The address to check.\\n   */\\n  modifier onlyGovernor(address who) {\\n    if (!AHasGovernors(address(this)).isGovernor(who))\\n      revert ICustomErrors.RequiresFastGovernorship(who);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a member of the FAST.\\n   * @param who The address to check.\\n   */\\n  modifier onlyMember(address who) {\\n    if (!AHasMembers(address(this)).isMember(who))\\n      revert ICustomErrors.RequiresFastMembership(who);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures address `a` and `b` are different.\\n   * @param a Address a\\n   * @param b Address b\\n   */\\n  modifier differentAddresses(address a, address b) {\\n    if (a == b)\\n      revert ICustomErrors.RequiresDifferentSenderAndRecipient(a);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x1ac08a2fdd4a038dbbf23720a2b13516c4fb789e3fd9aa6c362fc74649daf0d6\",\"license\":\"MIT\"},\"contracts/fast/lib/IFastEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../fast/Distribution.sol';\\nimport '../../fast/Crowdfund.sol';\\n\\n\\n/**\\n * @title FAST events inventory.\\n * @notice An interface allowing to use events within the Diamond pattern without name colisions.\\n * @dev The idea is that as several facets can emit the same events, we don't want to have to re-declare\\n * the same event several time. This interface is a per-diamond central place for such event declaration.\\n */\\ninterface IFastEvents {\\n  /// Issuance related events.\\n  \\n  /**\\n   * @notice Emited whenever an issuance happens in a FAST.\\n   * @param amount is the amount of tokens that have been minted.\\n   * @param ref is the reference associated with the minting operation.\\n   * @param who is the account from which the minting operation originated.\\n   */\\n  event Minted(uint256 indexed amount, string ref, address indexed who);\\n  /**\\n   * @notice Emited whenever an burning happens in a FAST.\\n   * @param amount is the amount of tokens that have been burnt.\\n   * @param ref is the reference associated with the burning operation.\\n   * @param who is the account from which the burning operation originated.\\n   */\\n  event Burnt(uint256 indexed amount, string ref, address indexed who);\\n\\n  /// Transfer and ERC20 stuff.\\n\\n  /// @notice See `ERC20.Transfer`.\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  /// @notice See `ERC20.Approval`.\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  /// @notice See `ERC20.Disapproval`.\\n  event Disapproval(address indexed owner, address indexed spender, uint256 value);\\n  /**\\n   * @notice As we augmented the ERC20 standard with a few concepts, we emit our custom events\\n   * in addition to the ERC20 ones.\\n   * @param spender is the account who performed the transfer.\\n   * @param from is the account from which the tokens will be debited from.\\n   * @param to is the account to which the tokens will be credited to.\\n   * @param value is the amount of tokens transfered.\\n   * @param ref is the optional reference associated with the transfer.\\n   */\\n  event FastTransfer(address indexed spender, address indexed from, address indexed to, uint256 value, string ref);\\n\\n  /// Distribution related events.\\n\\n  event DistributionDeployed(Distribution indexed distribution);\\n  event DistributionRemoved(Distribution indexed distribution);\\n\\n  /// Crowdfund related events.\\n\\n  event CrowdfundDeployed(Crowdfund indexed crowdfund);\\n  event CrowdfundRemoved(Crowdfund indexed crowdfund);\\n\\n  /// General events.\\n\\n  /**\\n   * @notice This is an event that is fired whenever any of some of the FAST parameters\\n   * change, so that the frontend can react to it and refresh the general header\\n   * for that fast as well as the baseball cards in the FASTs list.\\n   * @param transfersDisabled marks whether or not transfers are disabled by an issuer member at FAST level.\\n   * @param memberCount is the number of members in the FAST.\\n   * @param governorCount is the number of governors in the FAST.\\n   * @param totalSupply is the amount of tokens in circulation in the FAST.\\n   * @param reserveBalance is the balance of the zero-address (aka reserve) for the FAST.\\n   */\\n  event DetailsChanged(\\n    bool transfersDisabled,\\n    uint256 memberCount,\\n    uint256 governorCount,\\n    uint256 totalSupply,\\n    uint256 reserveBalance\\n  );\\n}\\n\",\"keccak256\":\"0x107622cc22b7c5b04a6acb311f075be845ed8b027d2fa30c80fcd15c60dbf19f\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/**\\n * @notice Top-level shared functionality for FAST diamonds.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFast {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0x80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705;\\n\\n  // Data structures.\\n\\n  /**\\n   * @notice The top-level data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice The internal pointer to the Issuer contract.\\n    address issuer;\\n    /// @notice The internal pointer to the Marketplace contract.\\n    address marketplace;\\n    /// @notice We have to track whether the token facet provides continuous minting or fixed supply.\\n    bool hasFixedSupply;\\n    /// @notice Whether or not this FAST requires to be a member to hold tokens.\\n    bool isSemiPublic;\\n    /// @notice A flag which when toggled to `true` disables all transfers across this FAST.\\n    bool transfersDisabled;\\n    /// @notice To which FAST group this FAST belongs to, if any.\\n    string group;\\n  }\\n\\n  /**\\n   * @notice Returns the top-level storage for the calling FAST.\\n   * @return s a struct pointer for top-level FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xcd90c92966a138fa3e86786a00dc8b405845db0d62f121c282ddc6f7d4c65a7d\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastHistory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/**\\n * @notice This library centralises shared functionality between FAST diamonds facets that have to do with transfer\\n * history tracking.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFastHistory {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage.History'):\\n  bytes32 internal constant STORAGE_SLOT = 0x6bc8b61a9dd5fc049ea98027492a801d74e35fdf4d80d7fecd551a16e88fdbb4;\\n\\n  // Storage structures.\\n\\n  /**\\n   * @notice The history data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice All minting proofs are kept here.\\n    SupplyProof[] supplyProofs;\\n    /// @notice All transfer proofs are kept here.\\n    TransferProof[] transferProofs;\\n    /// @notice All transfers indices involving a given address are kept here.\\n    mapping(address => uint256[]) transferProofInvolvements;\\n  }\\n\\n  // Other structures.\\n\\n  /// @notice A minting operation could either be to mint or burn tokens.\\n  enum SupplyOp { Mint, Burn }\\n\\n  /// @notice Minting operations are recorded for papertrail. This is the structure that keeps track of them.\\n  struct SupplyProof {\\n    /// @notice How...\\n    SupplyOp op;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /// @notice Every transfer in is recorded. This is the structure that keeps track of them.\\n  struct TransferProof {\\n    /// @notice Who spent...\\n    address spender;\\n    /// @notice Who performed the transfer...\\n    address from;\\n    /// @notice Who received...\\n    address to;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /**\\n   * @notice Returns the history storage for the calling FAST.\\n   * @return s a struct pointer for history FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x39b21b41198e6fa219cd8eec59124cda25395bf19174aa809c0c41d650765d73\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\n/**\\n * @notice This library centralises shared functionality between FAST diamonds facets that have to do with token related logic.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFastToken {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage.Token'):\\n  bytes32 internal constant STORAGE_SLOT = 0xb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261;\\n\\n  // Constants.\\n\\n  string internal constant DEFAULT_TRANSFER_REFERENCE = 'Unspecified - via ERC20';\\n\\n  // Data structures.\\n\\n  /**\\n   * @notice The token data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    // ERC20 related properties for this FAST Token.\\n    /// @notice The name of the FAST.\\n    string name;\\n    /// @notice The symbol for this FAST.\\n    string symbol;\\n    /// @notice The decimal points used by this FAST.\\n    uint8 decimals;\\n    /// @notice The amount of tokens in circulation.\\n    uint256 totalSupply;\\n    /// @notice Legacy variable.\\n    uint256 LEGACY_transferCredits;\\n    /// @notice Our members balances are held here.\\n    mapping(address => uint256) balances;\\n    // Allowances are stored here.\\n    /// @notice Allowance amounts are stored in here, via mapping of `owner.spender.amount`\\n    mapping(address => mapping(address => uint256)) allowances;\\n    /// @notice A reverse lookup table allowing to retrieve allowances given by owner.\\n    mapping(address => LibAddressSet.Data) allowancesByOwner;\\n    /// @notice A reverse lookup table allowing to retrieve allowances given by spender.\\n    mapping(address => LibAddressSet.Data) allowancesBySpender;\\n    /// @notice All of this FAST token holders.\\n    LibAddressSet.Data tokenHolders;\\n  }\\n\\n  /**\\n   * @notice Returns the token storage for the calling FAST.\\n   * @return s a struct pointer for token FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x03817dcb731b24b60f2b72aa220c33b137c43dcc15cf34475e9b0652335ab657\",\"license\":\"MIT\"},\"contracts/interfaces/ICustomErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface ICustomErrors {\\n    error AlreadyInitialized();\\n    error CannotSelfRemove(address who);\\n    error DuplicateEntry();\\n    error InconsistentParameter(string param);\\n    error InsufficientFunds(uint256 amount);\\n    error InternalMethod();\\n    error InvalidPhase();\\n    error NonExistentEntry();\\n    error Overfunded(uint256 amount);\\n    error ReentrancyError();\\n    error RequiresAutomatonsManager(address who);\\n    error RequiresContinuousSupply();\\n    error RequiresDiamondOwnership(address who);\\n    error RequiresDifferentSenderAndRecipient(address a);\\n    error RequiresFastCaller();\\n    error RequiresFastContractCaller();\\n    error RequiresFastGovernorship(address who);\\n    error RequiresFastMemberCaller();\\n    error RequiresFastMembership(address who);\\n    error RequiresGovernorsManager(address who);\\n    error RequiresIssuerMemberCaller();\\n    error RequiresIssuerMembership(address who);\\n    error RequiresManagerCaller();\\n    error RequiresMarketplaceActiveMembership(address who);\\n    error RequiresMarketplaceDeactivatedMember(address who);\\n    error RequiresMarketplaceMembership(address who);\\n    error RequiresMembersManager(address who);\\n    error RequiresNoFastMemberships(address who);\\n    error RequiresOwner(address who);\\n    error RequiresPositiveBalance(address holder);\\n    error RequiresTransfersEnabled();\\n    error RequiresValidGovernor(address who);\\n    error RequiresValidMember(address who);\\n    error RequiresValidTokenHolder(address who);\\n    error TokenContractError();\\n    error UnknownBeneficiary(address who);\\n    error UnknownPledger(address who);\\n    error UnsupportedOperation();\\n}\\n\",\"keccak256\":\"0x2dcb1439f8b6ef2d7d09161b3d154c8359b7469b430884579b2d85a106db1f2a\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n/// @title A facet providing diamond cut mechanisms.\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    /// a method with `delegatecall`.\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    /// _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x027d86defbac7ad01db7074bf8c62b16493ffc552fcd9d841fe20d282117ed3c\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title ERC173 Contract Ownership Standard\\n * @dev The ERC165 identifier for this interface is 0x7f5828d0.\\n */\\ninterface IERC173 {\\n    /// @notice This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @notice Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xdb5140cc2b82a3fa14aec9b29d77705e66a7b4ca5ea6ba6f4cd7364c636344df\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title ERC20 standard as defined in the EIP.\\ninterface IERC20 {\\n  /**\\n   * @notice Allows to query the total number of tokens in circulation.\\n   * @return An `uint256` representing how many tokens are currently in circulation.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Allows to query the balance of a given address.\\n   * @param account is the address for which the balance shall be queried.\\n   * @return An `uint256` - the balance for the given address.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @notice Moves `amount` tokens from the caller's account to `recipient`.\\n   * @param recipient is the address to which the funds should be sent to, if successful.\\n   * @param amount is the amount of tokens to transfef.\\n   * @return A `bool` which value is `true` when the operation was successful.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @notice Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner`\\n   * through `transferFrom`. This is zero by default.\\n   * @dev This value changes when `approve`, `disapprove` and `transferFrom` / `transferFromWithRef` are called.\\n   * @param owner is the owner of the funds.\\n   * @param spender is the address for which the allowance should be queried.\\n   * @return A `uint256` representing the remaining allowance of `spender` over `owner`'s funds.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @notice Increases the allowance of `spender` by `amount`.\\n   * @param spender is the address towards which the allowance should be given.\\n   * @return A `bool` set to `true` when the operation was successful.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @notice Attempts to transfer `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's allowance.\\n   * @return A `bool` set to `true` when the operation was successful.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x79731c983219a24087d3bb925b9dd5c3cb3c85ebfdcd45afce5826bc2d53710f\",\"license\":\"MIT\"},\"contracts/interfaces/IHasActiveMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/// @title An interface signifying that the inheriting contract implements the concept of active memberships.\\ninterface IHasActiveMembers {\\n  /**\\n   * @notice Queries whether a given account is a member of the marketplace and flagged as active.\\n   * @param member is the address to query.\\n   * @return A `bool` set to `true` if the candidate is an active member.\\n   */\\n  function isActiveMember(address member) external view returns(bool);\\n\\n  /**\\n   * @notice Deactivates a given member address.\\n   * @param member is the address to deactivate.\\n   */\\n  function deactivateMember(address member) external;\\n\\n  /**\\n   * @notice Activates a given member address.\\n   * @param member is the address to activate.\\n   */\\n  function activateMember(address member) external;\\n}\\n\",\"keccak256\":\"0xe4ecbf3abf3b917c2900bb9d29ea807c1edb8546ca76eb9dc13cca6562d9033a\",\"license\":\"MIT\"},\"contracts/issuer/IssuerAccessFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../lib/LibHelpers.sol';\\nimport '../common/AHasMembers.sol';\\nimport '../interfaces/ICustomErrors.sol';\\nimport '../fast/FastTopFacet.sol';\\nimport '../fast/FastTokenFacet.sol';\\nimport './lib/AIssuerFacet.sol';\\nimport './lib/LibIssuerAccess.sol';\\nimport './lib/IIssuerEvents.sol';\\nimport '../issuer/IssuerTopFacet.sol';\\n\\n\\ncontract IssuerAccessFacet is AIssuerFacet, AHasMembers {\\n  using LibAddressSet for LibAddressSet.Data;\\n  /// AHasMembers implementation.\\n\\n  function isMembersManager(address who)\\n      internal view override(AHasMembers) returns(bool) {\\n    return AHasMembers(this).isMember(who);\\n  }\\n\\n  function isValidMember(address who)\\n      internal pure override(AHasMembers) returns(bool) {\\n    return who != LibHelpers.ZERO_ADDRESS;\\n  }\\n\\n  /// Membership management.\\n\\n  /** @notice Callback from FAST contracts allowing the Issuer contract to keep track of governorships.\\n   * @param governor The governor added to a FAST.\\n   */\\n  function governorAddedToFast(address governor)\\n      external {\\n    // Verify that the given address is in fact a registered FAST contract.\\n    if (!IssuerTopFacet(address(this)).isFastRegistered(msg.sender)) {\\n      revert ICustomErrors.RequiresFastContractCaller();\\n    }\\n    // Keep track of the governorship.\\n    // TODO: We don't throw until we've fixed the `issuer.fastGovernorships`.\\n    LibIssuerAccess.data().fastGovernorships[governor].add(msg.sender, true);\\n\\n    emit GovernorshipAdded(msg.sender, governor);\\n  }\\n\\n  /** @notice Callback from FAST contracts allowing the Issuer contract to keep track of governorships.\\n   * @param governor The governor removed from a FAST.\\n   */\\n  function governorRemovedFromFast(address governor)\\n      external {\\n    // Verify that the given address is in fact a registered FAST contract.\\n    if (!IssuerTopFacet(address(this)).isFastRegistered(msg.sender)) {\\n      revert ICustomErrors.RequiresFastContractCaller();\\n    }\\n    // Remove the tracked governorship.\\n    // TODO: We don't throw until we've fixed the `issuer.fastGovernorships`.\\n    LibIssuerAccess.data().fastGovernorships[governor].remove(msg.sender, true);\\n\\n    emit GovernorshipRemoved(msg.sender, governor);\\n  }\\n\\n  /** @notice Returns a list of FASTs that the passed address is a governor of.\\n   * @param governor is the address to check governorships of.\\n   * @param cursor is the index at which to start.\\n   * @param perPage is how many records should be returned at most.\\n   * @return A `address[]` list of values at most `perPage` big.\\n   * @return A `uint256` index to the next page.\\n   */\\n  function paginateGovernorships(address governor, uint256 cursor, uint256 perPage)\\n      external view\\n      returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibIssuerAccess.data().fastGovernorships[governor].values, cursor, perPage);\\n  }\\n}\\n\",\"keccak256\":\"0xdcb2edee5a870872958ac6689d9be783973edcbf6dab1985d2b4c4fe9911bec9\",\"license\":\"MIT\"},\"contracts/issuer/IssuerTopFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../interfaces/ICustomErrors.sol';\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../lib/LibHelpers.sol';\\nimport '../fast/FastTopFacet.sol';\\nimport '../fast/FastTokenFacet.sol';\\nimport './lib/AIssuerFacet.sol';\\nimport './lib/LibIssuer.sol';\\n\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\n\\n\\ncontract IssuerTopFacet is AIssuerFacet {\\n  using LibAddressSet for LibAddressSet.Data;\\n  // FAST management related methods.\\n\\n  /**\\n   * @notice Queries whether a given address is a known and registered FAST contract.\\n   * @param fast The address of the contract to check.\\n   * @return A boolean.\\n   */\\n  function isFastRegistered(address fast)\\n      external view returns(bool) {\\n    return LibIssuer.data().fastSet.contains(fast);\\n  }\\n\\n  /**\\n   * @notice Allows to retrieve the address of a FAST diamond given its symbol.\\n   * @param symbol The symbol of the FAST diamond to get the address of.\\n   * @return The address of the corresponding FAST diamond, or the Zero Address if not found.\\n   */\\n  function fastBySymbol(string calldata symbol)\\n      external view returns(address) {\\n    return LibIssuer.data().fastSymbols[symbol];\\n  }\\n\\n  /**\\n   * @notice Allows the registration of a given FAST diamond with this Issuer.\\n   * @param fast The address of the FAST diamond to be registered.\\n   * @notice Requires that the caller is a member of this Issuer.\\n   * @notice Emits a `FastRegistered` event.\\n   */\\n  function registerFast(address fast)\\n      external\\n      onlyMember(msg.sender) {\\n    LibIssuer.Data storage s = LibIssuer.data();\\n    string memory symbol = FastTokenFacet(fast).symbol();\\n    if (s.fastSymbols[symbol] != address(0)) {\\n      revert ICustomErrors.DuplicateEntry();\\n    }\\n\\n    // Add the FAST to our list.\\n    s.fastSet.add(fast, false);\\n    // Add the fast symbol to our list.\\n    s.fastSymbols[symbol] = fast;\\n\\n    // Emit!\\n    emit FastRegistered(fast);\\n  }\\n\\n  /**\\n   * @notice Allows the unregistration of a given FAST diamond with this Issuer.\\n   * @param fast The address of the FAST diamond to be unregistered.\\n   * @notice Requires that the caller is a member of this Issuer.\\n   * @notice Emits a `FastUnregistered` event.\\n   */\\n  function unregisterFast(address fast)\\n    external\\n    onlyMember(msg.sender) {\\n      LibIssuer.Data storage s = LibIssuer.data();\\n      string memory symbol = FastTokenFacet(fast).symbol();\\n\\n      // Disable transfers in the FAST.\\n      FastTopFacet(fast).setTransfersDisabled(true);\\n\\n      // Remove the FAST from our lists.\\n      s.fastSet.remove(fast, false);\\n      delete s.fastSymbols[symbol];\\n\\n      // Emit!\\n      emit FastUnregistered(fast);\\n    }\\n\\n  /**\\n   * @notice Counts the number of FAST diamonds registered with this Issuer.\\n   * @return The number of FAST diamonds registered with this Issuer.\\n   */\\n  function fastCount()\\n      external view returns(uint256) {\\n    return LibIssuer.data().fastSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Paginates the FAST diamonds registered with this Issuer based on a starting cursor and a number of records per page.\\n   * @param cursor The index at which to start.\\n   * @param perPage How many records should be returned at most.\\n   * @return A `address[]` list of values at most `perPage` big.\\n   * @return A `uint256` index to the next page.\\n   */\\n  function paginateFasts(uint256 cursor, uint256 perPage)\\n      external view\\n      returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibIssuer.data().fastSet.values, cursor, perPage);\\n  }\\n\\n  /**\\n   * @notice Allows an issuer member to move collected ERC20 fees from this contract\\n   * to an arbitrary address.\\n   * @param token is the address of the ERC20 to be collected.\\n   * @param amount is how much should be moved from the ERC20 to the collection address.\\n   * @param to is the collection address - eg the address that will receive the ERC20 tokens.\\n   */\\n  function transferERC20Tokens (IERC20 token, uint256 amount, address to)\\n      public\\n      onlyMember(msg.sender) {\\n    require(token.transfer(to, amount));\\n  }\\n\\n  /**\\n   * @notice Allows to assign FASTs to groups.\\n   * @param fast The FAST address to assign.\\n   * @param newGroup The name of the group in which the FAST should be placed.\\n   */\\n  function setFastGroup(address fast, string calldata newGroup)\\n      external onlyMember(msg.sender) {\\n    string memory oldGroup = FastTopFacet(fast).group();\\n    // Remove FAST from old group.\\n    if (bytes(oldGroup).length > 0)\\n      LibIssuer.data().fastGroups[oldGroup].remove(fast, false);\\n    // Add FAST to new group.\\n    if (bytes(newGroup).length > 0)\\n      LibIssuer.data().fastGroups[newGroup].add(fast, false);\\n    // Set group name at FAST level.\\n    FastTopFacet(fast).setGroup(newGroup);\\n    // Emit!\\n    emit FastGroupChanged(fast, oldGroup, newGroup);\\n  }\\n\\n  /**\\n   * @notice Paginates the FAST diamonds registered with this Issuer based on a group, starting cursor and a number of records per page.\\n   * @param group The group to paginate.\\n   * @param cursor The index at which to start.\\n   * @param perPage How many records should be returned at most.\\n   * @return A `address[]` list of values at most `perPage` big.\\n   * @return A `uint256` index to the next page.\\n   */\\n  function paginateFastsInGroup(string calldata group, uint256 cursor, uint256 perPage)\\n      external view\\n      returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibIssuer.data().fastGroups[group].values, cursor, perPage);\\n  }\\n}\\n\",\"keccak256\":\"0x3e4a9577d738712b87581998d6d727ab4308ebd783590ba6a00f0308aa43922b\",\"license\":\"MIT\"},\"contracts/issuer/lib/AIssuerFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibHelpers.sol';\\nimport '../../common/AHasMembers.sol';\\nimport '../../interfaces/ICustomErrors.sol';\\nimport './IIssuerEvents.sol';\\n\\n\\n/**\\n* @notice This abstract contract encapsulates modifiers allowing inheriting facets to guard against\\n* certain permissions.\\n*/\\nabstract contract AIssuerFacet is IIssuerEvents {\\n  /// Modifiers.\\n\\n  /// @notice Ensures that a method can only be called by another facet of the same diamond.\\n  modifier onlyDiamondFacet() {\\n    if (!LibHelpers._isDiamondFacet(msg.sender))\\n      revert ICustomErrors.InternalMethod();\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the owner of this diamond.\\n  modifier onlyDiamondOwner() {\\n    if (!LibHelpers._isDiamondOwner(msg.sender))\\n      revert ICustomErrors.RequiresDiamondOwnership(msg.sender);\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier onlyDeployer() {\\n    if (!LibHelpers._isDeployer(msg.sender))\\n      revert ICustomErrors.InternalMethod();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a member of the FAST.\\n   * @param who The address to check.\\n   */\\n  modifier onlyMember(address who) {\\n    if (!AHasMembers(address(this)).isMember(who))\\n      revert ICustomErrors.RequiresIssuerMembership(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x758f6b3cbd8a8aeadf7bd70915b4dbde203d94488d1ca4f84e2c571459739fe9\",\"license\":\"MIT\"},\"contracts/issuer/lib/IIssuerEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n// WARNING: These events must be maintained 1:1 with LibIssuerEvents!\\n// They also should never be emitted directly, they only help us defining\\n// typescript types!\\ninterface IIssuerEvents {\\n  /// FAST registration events.\\n\\n  /**\\n   * @notice Emited when a new FAST is registered.\\n   * @param fast The address of the newly registered FAST diamond.\\n   */\\n  event FastRegistered(address indexed fast);\\n  /**\\n   * @notice Emited when a FAST is removed from the Issuer contract.\\n   * @param fast The address of the unregistered FAST.\\n   */\\n  event FastUnregistered(address indexed fast);\\n\\n  /// FAST groupping events.\\n\\n  event FastGroupChanged(address indexed fast, string indexed oldGroup, string indexed newGroup);\\n\\n  /// Governors.\\n\\n  event GovernorshipRemoved(address indexed fast, address indexed governor);\\n  event GovernorshipAdded(address indexed fast, address indexed governor);\\n}\\n\",\"keccak256\":\"0x104d28340bb63638714c33a0fb57023d2c5f4a723b4b0211be745e06c6f552be\",\"license\":\"MIT\"},\"contracts/issuer/lib/LibIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibIssuer {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Issuer.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0xd681d5f1de7bc4b7442c088939dc202585e09699e92a94c9717ace8d0f4fcaa5;\\n\\n  // Data structures.\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    // This is where we keep our list of deployed fast FASTs.\\n    LibAddressSet.Data fastSet;\\n    // We keep track of the FAST symbols that were already used - string to FAST address.\\n    mapping(string => address) fastSymbols;\\n    // We also keep track of the FAST groups here - slug to FAST address set.\\n    mapping(string => LibAddressSet.Data) fastGroups;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x2ba780bae308f3662058c5aa5c781753381acfd8118d034f925a9567759855cd\",\"license\":\"MIT\"},\"contracts/issuer/lib/LibIssuerAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibIssuerAccess {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Issuer.storage.Access'):\\n  bytes32 internal constant STORAGE_SLOT = 0x3ceaa4d5edf9c96fbd56140abe6389d65a87143d4f11819874ff2fe0ae9574db;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    // For a given address we store list of FASTs where that address is a governor.\\n    mapping(address => LibAddressSet.Data) fastGovernorships;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x20241810ce259530e52f3a8e8e65e0df263dfad8b597e48915cb9ea2d802773f\",\"license\":\"MIT\"},\"contracts/lib/LibAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\nlibrary LibAddressSet {\\n  /// @notice Represents a list of addresses.\\n  struct Data {\\n    mapping(address => uint256) indices;\\n    address[] values;\\n  }\\n\\n  /**\\n   * @notice Adds an item into the storage set. If the address already exists in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be added.\\n   */\\n  function add(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && exists) { return; }\\n    require(!exists, 'Address already in set');\\n    d.indices[key] = d.values.length;\\n    d.values.push(key);\\n  }\\n\\n  /**\\n   * @notice Removes an item from the storage set. If the address does not exist in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be removed.\\n   */\\n  function remove(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && !exists) { return; }\\n    require(exists, 'Address does not exist in set');\\n    address keyToMove = d.values[d.values.length - 1];\\n    uint256 idxToReplace = d.indices[key];\\n    d.indices[keyToMove] = idxToReplace;\\n    d.values[idxToReplace] = keyToMove;\\n\\n    delete d.indices[key];\\n    d.values.pop();\\n  }\\n\\n  /**\\n   * @notice Tests whether or not a given item already exists in the set.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to test.\\n   * @return a boolean.\\n   */\\n  function contains(Data storage d, address key)\\n      internal view returns(bool) {\\n    return d.values.length == 0\\n      ? false\\n      : d.values[d.indices[key]] == key;\\n  }\\n}\\n\",\"keccak256\":\"0x7411b83b6853f77fd7b0fef32c5367edad2396ec83f82c45c81297e1d1376e50\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xb66c6dde5d24195adad7492253be1f4ebd580563d3f8847fec9ad8e6555498f4\",\"license\":\"MIT\"},\"contracts/lib/LibHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport './LibHelpers.sol';\\nimport '../interfaces/IERC173.sol';\\n\\nlibrary LibHelpers {\\n  address internal constant ZERO_ADDRESS = address(0);\\n  address internal constant DEPLOYER_CONTRACT = 0x6DF2D25d8C6FD680730ee658b530A05a99BB769a;\\n\\n  function _isDiamondFacet(address who)\\n      internal view returns(bool) {\\n    return who == address(this);\\n  }\\n  \\n  function _isDiamondOwner(address who)\\n      internal view returns(bool) {\\n    return who == IERC173(address(this)).owner();\\n  }\\n\\n  function _isDeployer(address who)\\n      internal pure returns(bool) {\\n    return who == LibHelpers.DEPLOYER_CONTRACT;\\n  }\\n}\\n\",\"keccak256\":\"0xe49c0442da7b7cce1940847f70bc6c77e85f97b5ae8e580e612b4f027d2c7dc4\",\"license\":\"MIT\"},\"contracts/lib/LibPaginate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../fast/lib/LibFastHistory.sol';\\n\\n\\nlibrary LibPaginate {\\n  function addresses(address[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(address[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      address[] memory values = new address[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function uint256s(uint256[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(uint256[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      uint256[] memory values = new uint256[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function supplyProofs(LibFastHistory.SupplyProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.SupplyProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.SupplyProof[] memory values = new LibFastHistory.SupplyProof[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function transferProofs(LibFastHistory.TransferProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.TransferProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.TransferProof[] memory values = new LibFastHistory.TransferProof[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n}\",\"keccak256\":\"0xb1c624707faa2688853bce5e4ad8e073bb67968a9de5134dfa80bb29fb73c8f4\",\"license\":\"MIT\"},\"contracts/marketplace/MarketplaceAccessFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../common/AHasMembers.sol';\\nimport '../issuer/IssuerTopFacet.sol';\\nimport '../interfaces/ICustomErrors.sol';\\nimport '../interfaces/IHasActiveMembers.sol';\\nimport './lib/LibMarketplaceAccess.sol';\\nimport './lib/AMarketplaceFacet.sol';\\nimport './MarketplaceAutomatonsFacet.sol';\\n\\n\\n/**\\n * @title The Marketplace Smart Contract.\\n * @notice The Marketplace Access facet is in charge of keeping track of marketplace members.\\n */\\ncontract MarketplaceAccessFacet is AMarketplaceFacet, AHasMembers, IHasActiveMembers {\\n  using LibAddressSet for LibAddressSet.Data;\\n  /// AHasMembers implementation.\\n\\n  function isMembersManager(address who)\\n      internal view override(AHasMembers) returns(bool) {\\n    return\\n      _isIssuerMember(who) ||\\n      AHasAutomatons(address(this)).automatonCan(who, MARKETPLACE_PRIVILEGE_MANAGE_MEMBERS);\\n  }\\n\\n  function isValidMember(address who)\\n      internal pure override(AHasMembers) returns(bool) {\\n    return who != LibHelpers.ZERO_ADDRESS;\\n  }\\n\\n  function onMemberRemoved(address member)\\n      internal view override(AHasMembers) {\\n    LibMarketplaceAccess.Data storage s = LibMarketplaceAccess.data();\\n    // Ensure that member doesn't have any FAST membership.\\n    if (s.fastMemberships[member].values.length != 0)\\n      revert ICustomErrors.RequiresNoFastMemberships(member);\\n  }\\n\\n  /// FAST memberships functions.\\n\\n  /**\\n   * @notice Allows to query FAST memberships for a given member address.\\n   * @param member Is the address to check.\\n   * @param cursor The index at which to start.\\n   * @param perPage How many records should be returned at most.\\n   */\\n  function fastMemberships(address member, uint256 cursor, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibMarketplaceAccess.data().fastMemberships[member].values, cursor, perPage);\\n  }\\n\\n  /**\\n   * @notice Callback from FAST contracts allowing the Marketplace contract to keep track of FAST memberships.\\n   * @param member The member for which a new FAST membership has been added.\\n   */\\n  function memberAddedToFast(address member) \\n      external {\\n    // Verify that the given address is in fact a registered FAST contract.\\n    if (!IssuerTopFacet(LibMarketplace.data().issuer).isFastRegistered(msg.sender)) {\\n      revert ICustomErrors.RequiresFastContractCaller();\\n    }\\n    // Keep track of the member's FAST membership.\\n    // TODO: We don't throw until we've fixed the `marketplace.fastMemberships`.\\n    LibMarketplaceAccess.data().fastMemberships[member].add(msg.sender, true);\\n  }\\n\\n  /**\\n   * @notice Callback from FAST contracts allowing the Marketplace contract to keep track of FAST memberships.\\n   * @param member The member for which a FAST membership has been removed.\\n   */\\n  function memberRemovedFromFast(address member)\\n      external {\\n    if (!IssuerTopFacet(LibMarketplace.data().issuer).isFastRegistered(msg.sender)) {\\n      revert ICustomErrors.RequiresFastContractCaller();\\n    }\\n    // Remove the tracked membership.\\n    // TODO: We don't throw until we've fixed the `marketplace.fastMemberships`.\\n    LibMarketplaceAccess.data().fastMemberships[member].remove(msg.sender, true);\\n  }\\n\\n  /// IHasActiveMembers implementation.\\n\\n  /**\\n   * @notice Given a member returns it's activation status.\\n   * @param candidate The address to check activation status on.\\n   */\\n  function isActiveMember(address candidate)\\n      external override(IHasActiveMembers) view returns(bool) {\\n    return AHasMembers(this).isMember(candidate) &&\\n           !LibMarketplaceAccess.data().deactivatedMemberSet.contains(candidate);\\n  }\\n\\n  /**\\n   * @notice Activates a member at the Marketplace level.\\n   * @param member The member to remove from the deactivation member set.\\n   */\\n  function activateMember(address member)\\n    external override(IHasActiveMembers)\\n    onlyIssuerMember onlyMember(member) {\\n    // Guard against attempting to activate an already active member.\\n    if (this.isActiveMember(member))\\n      revert ICustomErrors.RequiresMarketplaceDeactivatedMember(member);\\n    // Remove the member from the deactivated members list.\\n    LibMarketplaceAccess.data().deactivatedMemberSet.remove(member, false);\\n    // Emit!\\n    emit MemberActivated(member);\\n  }\\n\\n  /**\\n   * @notice Deactivates a member at the Marketplace level.\\n   * @param member The member to add to the deactivation member set.\\n   */\\n  function deactivateMember(address member)\\n    external override(IHasActiveMembers)\\n    onlyIssuerMember onlyMember(member) {\\n    // Guard against attempting to deactivate an already deactivated member.\\n    if (!this.isActiveMember(member))\\n      revert ICustomErrors.RequiresMarketplaceActiveMembership(member);\\n    // Add the member to the deactivated members list.\\n    LibMarketplaceAccess.data().deactivatedMemberSet.add(member, false);\\n    // Emit!\\n    emit MemberDeactivated(member);\\n  }\\n}\\n\",\"keccak256\":\"0x7390cad92c45917dc02db26da9355e68c445178acbed9f79d17f6416e79d6a06\",\"license\":\"MIT\"},\"contracts/marketplace/MarketplaceAutomatonsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport './lib/AMarketplaceFacet.sol';\\nimport '../common/AHasAutomatons.sol';\\n\\n\\n// Privileges bits.\\nuint32 constant MARKETPLACE_PRIVILEGE_MANAGE_MEMBERS = 1;\\n\\n/**\\n * @title The Marketplace Smart Contract.\\n * @notice The Marketplace Automatons facet is in charge of keeping track of automaton accounts.\\n */\\ncontract MarketplaceAutomatonsFacet is AMarketplaceFacet, AHasAutomatons {\\n  /// Automatons management.\\n\\n  function isAutomatonsManager(address who)\\n      internal view override(AHasAutomatons)\\n      returns(bool) {\\n    return _isIssuerMember(who);\\n  }\\n}\\n\",\"keccak256\":\"0x3ea65149b8f82fa95e1efdfc22e9d1e05ed404d595b408dc4cd7c42df190d303\",\"license\":\"MIT\"},\"contracts/marketplace/MarketplaceTokenHoldersFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport './lib/AMarketplaceFacet.sol';\\nimport './lib/LibMarketplaceTokenHolders.sol';\\nimport '../issuer/IssuerTopFacet.sol';\\nimport '../interfaces/IERC20.sol';\\nimport '../interfaces/ICustomErrors.sol';\\n\\n/** @dev The Marketplace FAST balances facet.\\n */\\ncontract MarketplaceTokenHoldersFacet is AMarketplaceFacet {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /** @dev The callback used when a balance changes on a FAST.\\n   */\\n  function fastBalanceChanged(address account, uint256 balance)\\n    external {\\n    // Return early if this is the zero address.\\n    if (account == address(0)) {\\n      return;\\n    }\\n\\n    // Verify that the given address is in fact a registered FAST contract.\\n    if (!IssuerTopFacet(LibMarketplace.data().issuer).isFastRegistered(msg.sender)) {\\n      revert ICustomErrors.RequiresFastContractCaller();\\n    }\\n\\n    // Get the storage pointer and balance of the token holder.\\n    LibMarketplaceTokenHolders.Data storage s = LibMarketplaceTokenHolders.data();\\n\\n    // If this is a positive balance and it doesn't already exist in the set, add address.\\n    if (balance > 0 && !s.fastHoldings[account].contains(msg.sender)) {\\n      s.fastHoldings[account].add(msg.sender, false);\\n    }\\n    // If the balance is 0 and it exists in the set, remove it.\\n    else if (balance == 0 && s.fastHoldings[account].contains(msg.sender)) {\\n      s.fastHoldings[account].remove(msg.sender, false);\\n    }\\n  }\\n\\n  /** @dev A way to get a list of FASTs for an account.\\n   *  @return list of FAST addresses.\\n   */\\n  function holdings(address account)\\n    external view\\n    returns(address[] memory) {\\n    LibMarketplaceTokenHolders.Data storage s = LibMarketplaceTokenHolders.data();\\n    return s.fastHoldings[account].values;\\n  }\\n}\\n\",\"keccak256\":\"0x30acbf3f2be497c90d7f5904a734689c60abed7e9d347009953aeb500b88c0dd\",\"license\":\"MIT\"},\"contracts/marketplace/lib/AMarketplaceFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibHelpers.sol';\\nimport '../../common/AHasMembers.sol';\\nimport '../../interfaces/ICustomErrors.sol';\\nimport '../lib/LibMarketplace.sol';\\nimport './IMarketplaceEvents.sol';\\n\\n\\n/**\\n* @notice This contract is a group of modifiers that can be used by any Marketplace facets to guard against\\n*       certain permissions.\\n*/\\nabstract contract AMarketplaceFacet is IMarketplaceEvents {\\n  /// Internal ACL functions.\\n\\n  function _isIssuerMember(address who)\\n      internal view returns(bool) {\\n    return AHasMembers(LibMarketplace.data().issuer).isMember(who);\\n  }\\n\\n  // Modifiers.\\n\\n  /// @notice Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier onlyDeployer()\\n      virtual {\\n    if (!LibHelpers._isDeployer(msg.sender))\\n      revert ICustomErrors.InternalMethod();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Requires that the message sender is a member of the linked Issuer.\\n   */\\n  modifier onlyIssuerMember()\\n      virtual {\\n    if (!_isIssuerMember(msg.sender))\\n      revert ICustomErrors.RequiresIssuerMembership(msg.sender);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Requires that the given address is a member of the marketplace.\\n   * @param who is the address to be checked.\\n   */\\n  modifier onlyMember(address who)\\n      virtual {\\n    if (!AHasMembers(address(this)).isMember(who))\\n      revert ICustomErrors.RequiresMarketplaceMembership(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xae9b36ca73eede418eb23a646696e37f381546665671b8e498db5cc8657ad2af\",\"license\":\"MIT\"},\"contracts/marketplace/lib/IMarketplaceEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\ninterface IMarketplaceEvents {\\n  /// @dev See `IHasActiveMembers`.\\n  event MemberActivated(address indexed member);\\n  /// @dev See `IHasActiveMembers`.\\n  event MemberDeactivated(address indexed member);\\n}\\n\",\"keccak256\":\"0x0ba156d29699cc3499e8b2acbd2b0bf0a0654b80958c6dde678858fc45e979cb\",\"license\":\"MIT\"},\"contracts/marketplace/lib/LibMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibMarketplace {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Marketplace.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0xb59ec141376cee83f618e10e881bbb4789cdeee27e0d441a8c37ead3cb8b93c1;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice The internal pointer to the Issuer contract.\\n    address issuer;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xc1e77e5ff5f05952b5928fcef4327355dedf57623ca3f7d72fea54021aaa9ed3\",\"license\":\"MIT\"},\"contracts/marketplace/lib/LibMarketplaceAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibMarketplaceAccess {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Marketplace.storage.Access'):\\n  bytes32 internal constant STORAGE_SLOT = 0xecb992c7a1185ca18ac50bc1672192fb67e7c3e74465887a8fcaab265dab37bd;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we keep track of our member FAST memberships.\\n    mapping(address => LibAddressSet.Data) fastMemberships;\\n    /// @notice This is where we keep track of our deactivated memberships.\\n    LibAddressSet.Data deactivatedMemberSet;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xff5c30b26344149a4e076f2a0d42056fb2a147243d62a56b1dadebc201cee8ea\",\"license\":\"MIT\"},\"contracts/marketplace/lib/LibMarketplaceTokenHolders.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibMarketplaceTokenHolders {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Marketplace.TokenHolders.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0xecf50453542504034bd40d376fb1408ada3025f2fe86ca1b9b4b1440b8d4a2f4;\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    /// @dev The tracked FAST holdings of a user.\\n    mapping(address => LibAddressSet.Data) fastHoldings;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xbf26680c8a06a75be462cf155feb163863762646239ec5ad26ca91abc52ae10c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "activateMember(address)": {
        "params": {
          "member": "The member to remove from the deactivation member set."
        }
      },
      "addMember(address)": {
        "params": {
          "who": "is the address to be added."
        }
      },
      "deactivateMember(address)": {
        "params": {
          "member": "The member to add to the deactivation member set."
        }
      },
      "fastMemberships(address,uint256,uint256)": {
        "params": {
          "cursor": "The index at which to start.",
          "member": "Is the address to check.",
          "perPage": "How many records should be returned at most."
        }
      },
      "isActiveMember(address)": {
        "params": {
          "candidate": "The address to check activation status on."
        }
      },
      "isMember(address)": {
        "params": {
          "who": "is the address to test."
        },
        "returns": {
          "_0": "A `bool` equal to `true` when `candidate` is a member."
        }
      },
      "memberAddedToFast(address)": {
        "params": {
          "member": "The member for which a new FAST membership has been added."
        }
      },
      "memberCount()": {
        "returns": {
          "_0": "An `uint256`."
        }
      },
      "memberRemovedFromFast(address)": {
        "params": {
          "member": "The member for which a FAST membership has been removed."
        }
      },
      "paginateMembers(uint256,uint256)": {
        "params": {
          "index": "is the offset at which the pagination operation should start.",
          "perPage": "is how many items should be returned."
        },
        "returns": {
          "_0": "A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page."
        }
      },
      "removeMember(address)": {
        "params": {
          "member": "The address of the member to be removed."
        }
      }
    },
    "title": "The Marketplace Smart Contract.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "RequiresMembersManager(address)": [
        {
          "notice": "Happens when a function is called by an address that is not a members manager."
        }
      ],
      "RequiresValidMember(address)": [
        {
          "notice": "Happens when an address is used as a member but is not valid."
        }
      ]
    },
    "events": {
      "MemberAdded(address)": {
        "notice": "Emited when a member is added to the implementing contract."
      },
      "MemberRemoved(address)": {
        "notice": "Emited when a member is removed to the implementing contract."
      }
    },
    "kind": "user",
    "methods": {
      "activateMember(address)": {
        "notice": "Activates a member at the Marketplace level."
      },
      "addMember(address)": {
        "notice": "Adds a member to the list of known members."
      },
      "deactivateMember(address)": {
        "notice": "Deactivates a member at the Marketplace level."
      },
      "fastMemberships(address,uint256,uint256)": {
        "notice": "Allows to query FAST memberships for a given member address."
      },
      "isActiveMember(address)": {
        "notice": "Given a member returns it's activation status."
      },
      "isMember(address)": {
        "notice": "Queries whether a given address is a member or not."
      },
      "memberAddedToFast(address)": {
        "notice": "Callback from FAST contracts allowing the Marketplace contract to keep track of FAST memberships."
      },
      "memberCount()": {
        "notice": "Queries the number of members."
      },
      "memberRemovedFromFast(address)": {
        "notice": "Callback from FAST contracts allowing the Marketplace contract to keep track of FAST memberships."
      },
      "paginateMembers(uint256,uint256)": {
        "notice": "Queries pages of members based on a start index and a page size."
      },
      "removeMember(address)": {
        "notice": "Removes a member from this contract.Requires that the caller is a member of this Issuer.Emits a `AHasMembers.MemberRemoved` event."
      }
    },
    "notice": "The Marketplace Access facet is in charge of keeping track of marketplace members.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}