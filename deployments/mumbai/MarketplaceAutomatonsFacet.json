{
  "address": "0xBa65E7994D7f3Ca1f92D37A7415b654b5d030097",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresIssuerMembership",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "automaton",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "privileges",
          "type": "uint256"
        }
      ],
      "name": "AutomatonPrivilegesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "automaton",
          "type": "address"
        }
      ],
      "name": "AutomatonRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "automatonCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "automaton",
          "type": "address"
        }
      ],
      "name": "automatonPrivileges",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "automaton",
          "type": "address"
        }
      ],
      "name": "automatonPrivilegesStruct",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "canAddMember",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canRemoveMember",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canActivateMember",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canDeactivateMember",
              "type": "bool"
            }
          ],
          "internalType": "struct LibMarketplaceAutomatons.Privileges",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        }
      ],
      "name": "isAutomaton",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perPage",
          "type": "uint256"
        }
      ],
      "name": "paginateAutomatons",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        }
      ],
      "name": "removeAutomaton",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "privileges",
          "type": "uint256"
        }
      ],
      "name": "setAutomatonPrivileges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b698fba6bf5c4d1316ff1b91271dab06816e911262c00ebe0c8d0fde70cea84",
  "receipt": {
    "to": "0x6DF2D25d8C6FD680730ee658b530A05a99BB769a",
    "from": "0x717634cfe06FFAB2CEAA7fcf1b9019813f4B25FE",
    "contractAddress": null,
    "transactionIndex": 42,
    "gasUsed": "746757",
    "logsBloom": "0x
    "blockHash": "0xd05c05dc34215ecfc87971eeeac31aff1924694e1ca0c66fa6ea0b119d7df244",
    "transactionHash": "0x6b698fba6bf5c4d1316ff1b91271dab06816e911262c00ebe0c8d0fde70cea84",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 29537323,
        "transactionHash": "0x6b698fba6bf5c4d1316ff1b91271dab06816e911262c00ebe0c8d0fde70cea84",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000717634cfe06ffab2ceaa7fcf1b9019813f4b25fe",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000003201c1fb29a5100000000000000000000000000000000000000000000000036edb0d175bc177f00000000000000000000000000000000000000000000181d0a2bc0dab707711500000000000000000000000000000000000000000000000036ea90b556097d2e00000000000000000000000000000000000000000000181d0a2ee0f6d6ba0b66",
        "logIndex": 101,
        "blockHash": "0xd05c05dc34215ecfc87971eeeac31aff1924694e1ca0c66fa6ea0b119d7df244"
      }
    ],
    "blockNumber": 29537323,
    "cumulativeGasUsed": "11734778",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "42c0432ae93016791b9d8cc43d363710",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresIssuerMembership\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"automaton\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"privileges\",\"type\":\"uint256\"}],\"name\":\"AutomatonPrivilegesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"automaton\",\"type\":\"address\"}],\"name\":\"AutomatonRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"automatonCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"automaton\",\"type\":\"address\"}],\"name\":\"automatonPrivileges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"automaton\",\"type\":\"address\"}],\"name\":\"automatonPrivilegesStruct\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"canAddMember\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canRemoveMember\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canActivateMember\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canDeactivateMember\",\"type\":\"bool\"}],\"internalType\":\"struct LibMarketplaceAutomatons.Privileges\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isAutomaton\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perPage\",\"type\":\"uint256\"}],\"name\":\"paginateAutomatons\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"removeAutomaton\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"privileges\",\"type\":\"uint256\"}],\"name\":\"setAutomatonPrivileges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"automatonCount()\":{\"returns\":{\"_0\":\"The number of automatons in this marketplace.\"}},\"automatonPrivileges(address)\":{\"params\":{\"automaton\":\"is the address to test.\"},\"returns\":{\"_0\":\"An `uint256` bitfield.\"}},\"automatonPrivilegesStruct(address)\":{\"params\":{\"automaton\":\"is the address to check.\"},\"returns\":{\"_0\":\"A `LibMarketplaceAutomatons.Privileges` struct populated with privileges bits.\"}},\"isAutomaton(address)\":{\"params\":{\"candidate\":\"is the address to test.\"},\"returns\":{\"_0\":\"A `boolean` flag.\"}},\"paginateAutomatons(uint256,uint256)\":{\"params\":{\"cursor\":\"is the index at which to start.\",\"perPage\":\"is how many records should be returned at most.\"},\"returns\":{\"_0\":\"A `address[]` list of values at most `perPage` big.\",\"_1\":\"A `uint256` index to the next page.\"}},\"removeAutomaton(address)\":{\"params\":{\"candidate\":\"is the automaton to remove.\"}},\"setAutomatonPrivileges(address,uint256)\":{\"params\":{\"candidate\":\"is the automaton address to which the privileges should be assigned.\",\"privileges\":\"is a bitfield of privileges to apply.\"}}},\"title\":\"The Marketplace Smart Contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"automatonCount()\":{\"notice\":\"Counts the numbers of automatons present in this Marketplace.\"},\"automatonPrivileges(address)\":{\"notice\":\"Returns the privileges for a given automaton address, or zero if no privileges exist.\"},\"automatonPrivilegesStruct(address)\":{\"notice\":\"Returns the privileges given to an automaton address in struct form.\"},\"isAutomaton(address)\":{\"notice\":\"Queries whether a given address is an automaton for this Marketplace or not.\"},\"paginateAutomatons(uint256,uint256)\":{\"notice\":\"Paginates the automatons of this Marketplace based on a starting cursor and a number of records per page.\"},\"removeAutomaton(address)\":{\"notice\":\"Removes an automaton completely.\"},\"setAutomatonPrivileges(address,uint256)\":{\"notice\":\"Sets privileges for a given automaton address.\"}},\"notice\":\"The Marketplace Automatons facet is in charge of keeping track of automaton accounts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/marketplace/MarketplaceAutomatonsFacet.sol\":\"MarketplaceAutomatonsFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/fast/lib/LibFastHistory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/**\\n * @notice This library centralises shared functionality between FAST diamonds facets that have to do with transfer\\n * history tracking.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFastHistory {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage.History'):\\n  bytes32 internal constant STORAGE_SLOT = 0x6bc8b61a9dd5fc049ea98027492a801d74e35fdf4d80d7fecd551a16e88fdbb4;\\n\\n  // Storage structures.\\n\\n  /**\\n   * @notice The history data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice All minting proofs are kept here.\\n    SupplyProof[] supplyProofs;\\n    /// @notice All transfer proofs are kept here.\\n    TransferProof[] transferProofs;\\n    /// @notice All transfers indices involving a given address are kept here.\\n    mapping(address => uint256[]) transferProofInvolvements;\\n  }\\n\\n  // Other structures.\\n\\n  /// @notice A minting operation could either be to mint or burn tokens.\\n  enum SupplyOp { Mint, Burn }\\n\\n  /// @notice Minting operations are recorded for papertrail. This is the structure that keeps track of them.\\n  struct SupplyProof {\\n    /// @notice How...\\n    SupplyOp op;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /// @notice Every transfer in is recorded. This is the structure that keeps track of them.\\n  struct TransferProof {\\n    /// @notice Who spent...\\n    address spender;\\n    /// @notice Who performed the transfer...\\n    address from;\\n    /// @notice Who received...\\n    address to;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /**\\n   * @notice Returns the history storage for the calling FAST.\\n   * @return s a struct pointer for history FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x39b21b41198e6fa219cd8eec59124cda25395bf19174aa809c0c41d650765d73\",\"license\":\"MIT\"},\"contracts/interfaces/ICustomErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\ninterface ICustomErrors {\\n  error AlreadyInitialized();\\n  error InternalMethod();\\n  error RequiresDiamondOwnership(address who);\\n  error RequiresFastContractCaller();\\n\\n  error RequiresTransfersEnabled();\\n  error RequiresIssuerMembership(address who);\\n  error RequiresMarketplaceMembership(address who);\\n  error RequiresMarketplaceActiveMembership(address who);\\n  error RequiresMarketplaceDeactivatedMember(address who);\\n\\n  error RequiresValidTokenHolder(address who);\\n  error RequiresFastGovernorship(address who);\\n  error RequiresFastMembership(address who);\\n  error RequiresNoFastMemberships(address who);\\n\\n  error DuplicateEntry();\\n  error UnsupportedOperation();\\n  error CannotSelfRemove(address who);\\n\\n  error RequiresContinuousSupply();\\n  error RequiresPositiveBalance(address holder);\\n  error RequiresDifferentSenderAndRecipient(address a);\\n}\\n\",\"keccak256\":\"0xe0f271229679e52f86d86f1754ea4b64229d05f1ed9e528a830f52da17fb4792\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title ERC173 Contract Ownership Standard\\n * @dev The ERC165 identifier for this interface is 0x7f5828d0.\\n */\\ninterface IERC173 {\\n    /// @notice This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @notice Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xdb5140cc2b82a3fa14aec9b29d77705e66a7b4ca5ea6ba6f4cd7364c636344df\",\"license\":\"MIT\"},\"contracts/interfaces/IHasAutomatons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/// @title An interface signifying that the inheriting contract implements the concept of automatonship ACLs.\\ninterface IHasAutomatons {\\n  /**\\n   * @notice Queries whether a given address is a automaton or not.\\n   * @param candidate is the address to test.\\n   * @return A `bool` equal to `true` when `candidate` is a automaton.\\n   */\\n  function isAutomaton(address candidate) external view returns(bool);\\n\\n  /**\\n   * @notice Queries flags assigned to a given automaton account.\\n   * @param automaton is the address to test.\\n   * @return A `uint256` representing a binary combination of possible flags.\\n   */\\n  function automatonPrivileges(address automaton) external view returns(uint256);\\n\\n  /**\\n   * @notice Queries the number of automatons.\\n   * @return An `uint256`.\\n   */\\n  function automatonCount() external view returns(uint256);\\n\\n  /**\\n   * @notice Queries pages of automatons based on a start index and a page size.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginateAutomatons(uint256 index, uint256 perPage) external view returns(address[] memory, uint256);\\n\\n  /**\\n   * @notice Adds a automaton to the list of known automatons.\\n   * @param candidate is the address to be added.\\n   * @param privileges is a bitfield describing the flags to assign to `candidate`.\\n   */\\n  function setAutomatonPrivileges(address candidate, uint256 privileges) external;\\n\\n  /**\\n   * @notice Removes a automaton from the list of known automatons.\\n   * @param automaton is the address to be removed.\\n   */\\n  function removeAutomaton(address automaton) external;\\n}\\n\",\"keccak256\":\"0x0eb9d089b9f72da81bbebf60e07460f2070490346789db20b174edb4184e21c8\",\"license\":\"MIT\"},\"contracts/interfaces/IHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/// @title An interface signifying that the inheriting contract implements the concept of membership ACLs.\\ninterface IHasMembers {\\n  /**\\n   * @notice Queries whether a given address is a member or not.\\n   * @param candidate is the address to test.\\n   * @return A `bool` equal to `true` when `candidate` is a member.\\n   */\\n  function isMember(address candidate) external view returns(bool);\\n\\n  /**\\n   * @notice Queries the number of members.\\n   * @return An `uint256`.\\n   */\\n  function memberCount() external view returns(uint256);\\n\\n  /**\\n   * @notice Queries pages of members based on a start index and a page size.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginateMembers(uint256 index, uint256 perPage) external view returns(address[] memory, uint256);\\n\\n  /**\\n   * @notice Adds a member to the list of known members.\\n   * @param candidate is the address to be added.\\n   */\\n  function addMember(address payable candidate) external;\\n\\n  /**\\n   * @notice Removes a member from the list of known members.\\n   * @param member is the address to be removed.\\n   */\\n  function removeMember(address member) external;\\n}\\n\",\"keccak256\":\"0xfc66597f16c7668a054f2bed1db32b85e2f240d9de257b5e38226daf8c891cd0\",\"license\":\"MIT\"},\"contracts/lib/LibAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\nlibrary LibAddressSet {\\n  /// @notice Represents a list of addresses.\\n  struct Data {\\n    mapping(address => uint256) indices;\\n    address[] values;\\n  }\\n\\n  /**\\n   * @notice Adds an item into the storage set. If the address already exists in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be added.\\n   */\\n  function add(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && exists) { return; }\\n    require(!exists, 'Address already in set');\\n    d.indices[key] = d.values.length;\\n    d.values.push(key);\\n  }\\n\\n  /**\\n   * @notice Removes an item from the storage set. If the address does not exist in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be removed.\\n   */\\n  function remove(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && !exists) { return; }\\n    require(exists, 'Address does not exist in set');\\n    address keyToMove = d.values[d.values.length - 1];\\n    uint256 idxToReplace = d.indices[key];\\n    d.indices[keyToMove] = idxToReplace;\\n    d.values[idxToReplace] = keyToMove;\\n\\n    delete d.indices[key];\\n    d.values.pop();\\n  }\\n\\n  /**\\n   * @notice Tests whether or not a given item already exists in the set.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to test.\\n   * @return a boolean.\\n   */\\n  function contains(Data storage d, address key)\\n      internal view returns(bool) {\\n    return d.values.length == 0\\n      ? false\\n      : d.values[d.indices[key]] == key;\\n  }\\n}\\n\",\"keccak256\":\"0x7411b83b6853f77fd7b0fef32c5367edad2396ec83f82c45c81297e1d1376e50\",\"license\":\"MIT\"},\"contracts/lib/LibConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\nlibrary LibConstants {\\n  address internal constant ZERO_ADDRESS = address(0);\\n  address internal constant DEPLOYER_CONTRACT = 0x6DF2D25d8C6FD680730ee658b530A05a99BB769a;\\n\\n  string internal constant INSUFFICIENT_TRANSFER_CREDITS = 'Insufficient transfer credits';\\n  string internal constant REQUIRES_MARKETPLACE_MEMBERSHIP = 'Requires Marketplace membership';\\n  string internal constant REQUIRES_FAST_MEMBERSHIP = 'Requires FAST membership';\\n  string internal constant REQUIRES_DIFFERENT_SENDER_AND_RECIPIENT = 'Requires different sender and recipient';\\n\\n  string internal constant DEAD_TOKENS_RETRIEVAL = 'Dead tokens retrieval';\\n}\",\"keccak256\":\"0x8bd177a0834ae3f6932d47890a958302a72de9ed4e6378d36a12d20eba42d1a4\",\"license\":\"MIT\"},\"contracts/lib/LibPaginate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../fast/lib/LibFastHistory.sol';\\n\\n\\nlibrary LibPaginate {\\n  function addresses(address[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(address[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      address[] memory values = new address[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function uint256s(uint256[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(uint256[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      uint256[] memory values = new uint256[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function supplyProofs(LibFastHistory.SupplyProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.SupplyProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.SupplyProof[] memory values = new LibFastHistory.SupplyProof[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function transferProofs(LibFastHistory.TransferProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.TransferProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.TransferProof[] memory values = new LibFastHistory.TransferProof[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n}\",\"keccak256\":\"0xb1c624707faa2688853bce5e4ad8e073bb67968a9de5134dfa80bb29fb73c8f4\",\"license\":\"MIT\"},\"contracts/marketplace/MarketplaceAutomatonsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../interfaces/IHasAutomatons.sol';\\nimport './lib/LibMarketplaceAutomatons.sol';\\nimport './lib/AMarketplaceFacet.sol';\\n\\n\\n/**\\n * @title The Marketplace Smart Contract.\\n * @notice The Marketplace Automatons facet is in charge of keeping track of automaton accounts.\\n */\\ncontract MarketplaceAutomatonsFacet is AMarketplaceFacet, IHasAutomatons {\\n  using LibAddressSet for LibAddressSet.Data;\\n  // Automatons management.\\n\\n  /**\\n   * @notice Queries whether a given address is an automaton for this Marketplace or not.\\n   * @param candidate is the address to test.\\n   * @return A `boolean` flag.\\n   */\\n  function isAutomaton(address candidate)\\n      external override view returns(bool) {\\n    return LibMarketplaceAutomatons.data().automatonSet.contains(candidate);\\n  }\\n\\n  /**\\n   * @notice Returns the privileges for a given automaton address, or zero if no privileges exist.\\n   * @param automaton is the address to test.\\n   * @return An `uint256` bitfield.\\n   */\\n  function automatonPrivileges(address automaton)\\n      external override view returns(uint256) {\\n    return LibMarketplaceAutomatons.data().automatonPrivileges[automaton];\\n  }\\n\\n  /**\\n   * @notice Counts the numbers of automatons present in this Marketplace.\\n   * @return The number of automatons in this marketplace.\\n   */\\n  function automatonCount()\\n      external override view returns(uint256) {\\n    return LibMarketplaceAutomatons.data().automatonSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Paginates the automatons of this Marketplace based on a starting cursor and a number of records per page.\\n   * @param cursor is the index at which to start.\\n   * @param perPage is how many records should be returned at most.\\n   * @return A `address[]` list of values at most `perPage` big.\\n   * @return A `uint256` index to the next page.\\n   */\\n  function paginateAutomatons(uint256 cursor, uint256 perPage)\\n    external override view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(\\n      LibMarketplaceAutomatons.data().automatonSet.values,\\n      cursor,\\n      perPage\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the privileges given to an automaton address in struct form.\\n   * @param automaton is the address to check.\\n   * @return A `LibMarketplaceAutomatons.Privileges` struct populated with privileges bits.\\n   */\\n  function automatonPrivilegesStruct(address automaton)\\n      external view returns(LibMarketplaceAutomatons.Privileges memory) {\\n    uint256 privileges = LibMarketplaceAutomatons.data().automatonPrivileges[automaton];\\n    return LibMarketplaceAutomatons.Privileges({\\n      canAddMember: (privileges & LibMarketplaceAutomatons.PRIVILEGE_ADD_MEMBER) != 0,\\n      canRemoveMember: (privileges & LibMarketplaceAutomatons.PRIVILEGE_REMOVE_MEMBER) != 0,\\n      canActivateMember: (privileges & LibMarketplaceAutomatons.PRIVILEGE_ACTIVATE_MEMBER) != 0,\\n      canDeactivateMember: (privileges & LibMarketplaceAutomatons.PRIVILEGE_DEACTIVATE_MEMBER) != 0\\n    });\\n  }\\n\\n  /**\\n   * @notice Sets privileges for a given automaton address.\\n   * @param candidate is the automaton address to which the privileges should be assigned.\\n   * @param privileges is a bitfield of privileges to apply.\\n   */\\n  function setAutomatonPrivileges(address candidate, uint256 privileges)\\n      external onlyIssuerMember {\\n    LibMarketplaceAutomatons.Data storage ds = LibMarketplaceAutomatons.data();\\n    ds.automatonSet.add(candidate, true);\\n    ds.automatonPrivileges[candidate] = privileges;\\n    emit AutomatonPrivilegesSet(candidate, privileges);\\n  }\\n\\n  /**\\n   * @notice Removes an automaton completely.\\n   * @param candidate is the automaton to remove.\\n   */\\n  function removeAutomaton(address candidate)\\n      external onlyIssuerMember {\\n    LibMarketplaceAutomatons.Data storage ds = LibMarketplaceAutomatons.data();\\n    ds.automatonSet.remove(candidate, false);\\n    delete ds.automatonPrivileges[candidate];\\n    emit AutomatonRemoved(candidate);\\n  }\\n}\\n\",\"keccak256\":\"0x1de90b00592633cdd292e13898e3a49e0159ca48cd0c061ee3b06c902f131e96\",\"license\":\"MIT\"},\"contracts/marketplace/lib/AMarketplaceFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibConstants.sol';\\nimport '../../lib/LibAddressSet.sol';\\nimport '../lib/LibMarketplace.sol';\\nimport '../lib/LibMarketplaceAccess.sol';\\nimport '../lib/LibMarketplaceTokenHolders.sol';\\nimport '../../interfaces/IERC173.sol';\\nimport '../../interfaces/ICustomErrors.sol';\\nimport '../../interfaces/IHasMembers.sol';\\nimport './IMarketplaceEvents.sol';\\n\\n\\n/**\\n* @notice This contract is a group of modifiers that can be used by any Marketplace facets to guard against\\n*       certain permissions.\\n*/\\nabstract contract AMarketplaceFacet is IMarketplaceEvents {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  // Modifiers.\\n\\n  /// @notice Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier onlyDeployer() {\\n    if (msg.sender != LibConstants.DEPLOYER_CONTRACT) {\\n      revert ICustomErrors.InternalMethod();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Requires that the message sender is a member of the linked Issuer.\\n   */\\n  modifier onlyIssuerMember() {\\n    if (!IHasMembers(LibMarketplace.data().issuer).isMember(msg.sender)) {\\n      revert ICustomErrors.RequiresIssuerMembership(msg.sender);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Requires that the given address is a member of the marketplace.\\n   * @param candidate is the address to be checked.\\n   */\\n  modifier onlyMember(address candidate) {\\n    if (!LibMarketplaceAccess.data().memberSet.contains(candidate)) {\\n      revert ICustomErrors.RequiresMarketplaceMembership(candidate);\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xd14965aa848acdac5535c52e10aefae2783b629129e68b81ed5122ec41f155ee\",\"license\":\"MIT\"},\"contracts/marketplace/lib/IMarketplaceEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\ninterface IMarketplaceEvents {\\n  // IHasAutomatons\\n  event AutomatonPrivilegesSet(address indexed automaton, uint256 indexed privileges);\\n  event AutomatonRemoved(address indexed automaton);\\n\\n  // IHasMembers.\\n  event MemberAdded(address indexed member);\\n  event MemberRemoved(address indexed member);\\n\\n  // IHasActiveMembers.\\n  event MemberActivated(address indexed member);\\n  event MemberDeactivated(address indexed member);\\n}\\n\",\"keccak256\":\"0x57321c9009c2b6494fc22b8e11f1f472f2295b1b11b58a3ad6ffe7a0d9954b4b\",\"license\":\"MIT\"},\"contracts/marketplace/lib/LibMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibMarketplace {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Marketplace.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0xb59ec141376cee83f618e10e881bbb4789cdeee27e0d441a8c37ead3cb8b93c1;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice The internal pointer to the Issuer contract.\\n    address issuer;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xc1e77e5ff5f05952b5928fcef4327355dedf57623ca3f7d72fea54021aaa9ed3\",\"license\":\"MIT\"},\"contracts/marketplace/lib/LibMarketplaceAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibMarketplaceAccess {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Marketplace.storage.Access'):\\n  bytes32 internal constant STORAGE_SLOT = 0xecb992c7a1185ca18ac50bc1672192fb67e7c3e74465887a8fcaab265dab37bd;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we hold our members data.\\n    LibAddressSet.Data memberSet;\\n    /// @notice This is where we keep track of our member FAST memberships.\\n    mapping(address => LibAddressSet.Data) fastMemberships;\\n    /// @notice This is where we keep track of our deactivated memberships.\\n    LibAddressSet.Data deactivatedMemberSet;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x23f7f94fb2ceebedccfae17ca552292fb9c76b835fee2127a845b42e2af68284\",\"license\":\"MIT\"},\"contracts/marketplace/lib/LibMarketplaceAutomatons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibMarketplaceAutomatons {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Marketplace.storage.Automatons'):\\n  bytes32 internal constant STORAGE_SLOT = 0x3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d845;\\n\\n  uint256 constant PRIVILEGE_ADD_MEMBER = 1;\\n  uint256 constant PRIVILEGE_REMOVE_MEMBER = 2;\\n  uint256 constant PRIVILEGE_ACTIVATE_MEMBER = 4;\\n  uint256 constant PRIVILEGE_DEACTIVATE_MEMBER = 8;\\n\\n  struct Privileges {\\n    bool canAddMember;\\n    bool canRemoveMember;\\n    bool canActivateMember;\\n    bool canDeactivateMember;\\n  }\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we hold our automatons data.\\n    LibAddressSet.Data automatonSet;\\n    /// @notice This is where we store privileges for each of our automaton account.\\n    mapping(address => uint256) automatonPrivileges;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xea6c4fa52bdf92919c2925828459cc000fb6f045a142f8d0584dad16af808299\",\"license\":\"MIT\"},\"contracts/marketplace/lib/LibMarketplaceTokenHolders.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibMarketplaceTokenHolders {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Marketplace.TokenHolders.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0xecf50453542504034bd40d376fb1408ada3025f2fe86ca1b9b4b1440b8d4a2f4;\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    /// @dev The tracked FAST holdings of a user.\\n    mapping(address => LibAddressSet.Data) fastHoldings;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xbf26680c8a06a75be462cf155feb163863762646239ec5ad26ca91abc52ae10c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c98806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b70cc72a1161005b578063b70cc72a146100d4578063b87c7475146100f7578063ccf90c741461015a578063eadfdf2c1461018157600080fd5b80635a9b210c1461008257806376a7383d14610097578063911a56cc146100c1575b600080fd5b610095610090366004610a90565b61026c565b005b6100aa6100a5366004610aba565b610403565b6040516100b8929190610adc565b60405180910390f35b6100956100cf366004610b3a565b61043d565b6100e76100e2366004610b3a565b6105cc565b60405190151581526020016100b8565b61014c610105366004610b3a565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d848602052604090205490565b6040519081526020016100b8565b7f3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d8475461014c565b61023161018f366004610b3a565b604080516080808201835260008083526020808401829052838501829052606093840182905273ffffffffffffffffffffffffffffffffffffffff9590951681527f3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d8488552839020548351918201845260018116151582526002811615159482019490945260048416151592810192909252600890921615159181019190915290565b6040516100b8919081511515815260208083015115159082015260408083015115159082015260609182015115159181019190915260800190565b7fb59ec141376cee83f618e10e881bbb4789cdeee27e0d441a8c37ead3cb8b93c1546040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063a230c52490602401602060405180830381865afa1580156102fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103229190610b55565b61035f576040517f1dd41c4d0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b7f3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d8456103ac7f3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d8468460016105fe565b73ffffffffffffffffffffffffffffffffffffffff83166000818152600383016020526040808220859055518492917f2aebbf146c31d63a7afeedc43d101e489e2d30af481acc58ec11d58d3a0c3bbf91a3505050565b606060006104327f3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d84785856106f2565b915091509250929050565b7fb59ec141376cee83f618e10e881bbb4789cdeee27e0d441a8c37ead3cb8b93c1546040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063a230c52490602401602060405180830381865afa1580156104cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f39190610b55565b61052b576040517f1dd41c4d000000000000000000000000000000000000000000000000000000008152336004820152602401610356565b7f3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d8456105787f3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d846836000610813565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600383016020526040808220829055517f4592667aee797226527dbacd5953afb6e4fd4263ffc6f671efc0441b45b098d49190a25050565b60006105f87f3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d846836109eb565b92915050565b600061060a84846109eb565b90508180156106165750805b156106215750505050565b8015610689576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4164647265737320616c726561647920696e20736574000000000000000000006044820152606401610356565b50506001808301805473ffffffffffffffffffffffffffffffffffffffff909316600081815260209586526040812085905592840182559082529290200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b60606000808486805490506107079190610ba6565b84116107135783610720565b8554610720908690610ba6565b905060008167ffffffffffffffff81111561073d5761073d610bbd565b604051908082528060200260200182016040528015610766578160200160208202803683370190505b50905060005b828110156107f9578761077f8289610bec565b8154811061078f5761078f610c04565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181106107cc576107cc610c04565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260010161076c565b50806108058388610bec565b935093505050935093915050565b600061081f84846109eb565b905081801561082c575080155b156108375750505050565b8061089e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4164647265737320646f6573206e6f7420657869737420696e207365740000006044820152606401610356565b600180850180546000926108b191610ba6565b815481106108c1576108c1610c04565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff87811684529188905260408084205492909116808452922081905560018701805492935090918391908390811061091d5761091d610c04565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94851617905591871681529087905260408120556001860180548061098b5761098b610c33565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055505050505050565b600182015460009015610a5d5773ffffffffffffffffffffffffffffffffffffffff82166000818152602085905260409020546001850180549091908110610a3557610a35610c04565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614610a60565b60005b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a8b57600080fd5b919050565b60008060408385031215610aa357600080fd5b610aac83610a67565b946020939093013593505050565b60008060408385031215610acd57600080fd5b50508035926020909101359150565b604080825283519082018190526000906020906060840190828701845b82811015610b2b57815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101610af9565b50505092019290925292915050565b600060208284031215610b4c57600080fd5b610a6082610a67565b600060208284031215610b6757600080fd5b81518015158114610a6057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610bb857610bb8610b77565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008219821115610bff57610bff610b77565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220cd81265871dd0b2f77d2c9b2fc23f08bd3755be8dd955015e45959d5b146c06764736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b70cc72a1161005b578063b70cc72a146100d4578063b87c7475146100f7578063ccf90c741461015a578063eadfdf2c1461018157600080fd5b80635a9b210c1461008257806376a7383d14610097578063911a56cc146100c1575b600080fd5b610095610090366004610a90565b61026c565b005b6100aa6100a5366004610aba565b610403565b6040516100b8929190610adc565b60405180910390f35b6100956100cf366004610b3a565b61043d565b6100e76100e2366004610b3a565b6105cc565b60405190151581526020016100b8565b61014c610105366004610b3a565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d848602052604090205490565b6040519081526020016100b8565b7f3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d8475461014c565b61023161018f366004610b3a565b604080516080808201835260008083526020808401829052838501829052606093840182905273ffffffffffffffffffffffffffffffffffffffff9590951681527f3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d8488552839020548351918201845260018116151582526002811615159482019490945260048416151592810192909252600890921615159181019190915290565b6040516100b8919081511515815260208083015115159082015260408083015115159082015260609182015115159181019190915260800190565b7fb59ec141376cee83f618e10e881bbb4789cdeee27e0d441a8c37ead3cb8b93c1546040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063a230c52490602401602060405180830381865afa1580156102fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103229190610b55565b61035f576040517f1dd41c4d0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b7f3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d8456103ac7f3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d8468460016105fe565b73ffffffffffffffffffffffffffffffffffffffff83166000818152600383016020526040808220859055518492917f2aebbf146c31d63a7afeedc43d101e489e2d30af481acc58ec11d58d3a0c3bbf91a3505050565b606060006104327f3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d84785856106f2565b915091509250929050565b7fb59ec141376cee83f618e10e881bbb4789cdeee27e0d441a8c37ead3cb8b93c1546040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063a230c52490602401602060405180830381865afa1580156104cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f39190610b55565b61052b576040517f1dd41c4d000000000000000000000000000000000000000000000000000000008152336004820152602401610356565b7f3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d8456105787f3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d846836000610813565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600383016020526040808220829055517f4592667aee797226527dbacd5953afb6e4fd4263ffc6f671efc0441b45b098d49190a25050565b60006105f87f3e5f2d0a4b37e30e18cfb9f02b5d58c14e633cc6134b80816aaa63374222d846836109eb565b92915050565b600061060a84846109eb565b90508180156106165750805b156106215750505050565b8015610689576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4164647265737320616c726561647920696e20736574000000000000000000006044820152606401610356565b50506001808301805473ffffffffffffffffffffffffffffffffffffffff909316600081815260209586526040812085905592840182559082529290200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b60606000808486805490506107079190610ba6565b84116107135783610720565b8554610720908690610ba6565b905060008167ffffffffffffffff81111561073d5761073d610bbd565b604051908082528060200260200182016040528015610766578160200160208202803683370190505b50905060005b828110156107f9578761077f8289610bec565b8154811061078f5761078f610c04565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181106107cc576107cc610c04565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260010161076c565b50806108058388610bec565b935093505050935093915050565b600061081f84846109eb565b905081801561082c575080155b156108375750505050565b8061089e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4164647265737320646f6573206e6f7420657869737420696e207365740000006044820152606401610356565b600180850180546000926108b191610ba6565b815481106108c1576108c1610c04565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff87811684529188905260408084205492909116808452922081905560018701805492935090918391908390811061091d5761091d610c04565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94851617905591871681529087905260408120556001860180548061098b5761098b610c33565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055505050505050565b600182015460009015610a5d5773ffffffffffffffffffffffffffffffffffffffff82166000818152602085905260409020546001850180549091908110610a3557610a35610c04565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614610a60565b60005b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a8b57600080fd5b919050565b60008060408385031215610aa357600080fd5b610aac83610a67565b946020939093013593505050565b60008060408385031215610acd57600080fd5b50508035926020909101359150565b604080825283519082018190526000906020906060840190828701845b82811015610b2b57815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101610af9565b50505092019290925292915050565b600060208284031215610b4c57600080fd5b610a6082610a67565b600060208284031215610b6757600080fd5b81518015158114610a6057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610bb857610bb8610b77565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008219821115610bff57610bff610b77565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220cd81265871dd0b2f77d2c9b2fc23f08bd3755be8dd955015e45959d5b146c06764736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "automatonCount()": {
        "returns": {
          "_0": "The number of automatons in this marketplace."
        }
      },
      "automatonPrivileges(address)": {
        "params": {
          "automaton": "is the address to test."
        },
        "returns": {
          "_0": "An `uint256` bitfield."
        }
      },
      "automatonPrivilegesStruct(address)": {
        "params": {
          "automaton": "is the address to check."
        },
        "returns": {
          "_0": "A `LibMarketplaceAutomatons.Privileges` struct populated with privileges bits."
        }
      },
      "isAutomaton(address)": {
        "params": {
          "candidate": "is the address to test."
        },
        "returns": {
          "_0": "A `boolean` flag."
        }
      },
      "paginateAutomatons(uint256,uint256)": {
        "params": {
          "cursor": "is the index at which to start.",
          "perPage": "is how many records should be returned at most."
        },
        "returns": {
          "_0": "A `address[]` list of values at most `perPage` big.",
          "_1": "A `uint256` index to the next page."
        }
      },
      "removeAutomaton(address)": {
        "params": {
          "candidate": "is the automaton to remove."
        }
      },
      "setAutomatonPrivileges(address,uint256)": {
        "params": {
          "candidate": "is the automaton address to which the privileges should be assigned.",
          "privileges": "is a bitfield of privileges to apply."
        }
      }
    },
    "title": "The Marketplace Smart Contract.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "automatonCount()": {
        "notice": "Counts the numbers of automatons present in this Marketplace."
      },
      "automatonPrivileges(address)": {
        "notice": "Returns the privileges for a given automaton address, or zero if no privileges exist."
      },
      "automatonPrivilegesStruct(address)": {
        "notice": "Returns the privileges given to an automaton address in struct form."
      },
      "isAutomaton(address)": {
        "notice": "Queries whether a given address is an automaton for this Marketplace or not."
      },
      "paginateAutomatons(uint256,uint256)": {
        "notice": "Paginates the automatons of this Marketplace based on a starting cursor and a number of records per page."
      },
      "removeAutomaton(address)": {
        "notice": "Removes an automaton completely."
      },
      "setAutomatonPrivileges(address,uint256)": {
        "notice": "Sets privileges for a given automaton address."
      }
    },
    "notice": "The Marketplace Automatons facet is in charge of keeping track of automaton accounts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}