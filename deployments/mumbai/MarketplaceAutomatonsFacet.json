{
  "address": "0xcB9649001d401EE4689b4103A320Ec828a0eb307",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresAutomatonsManager",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "automaton",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "privileges",
          "type": "uint32"
        }
      ],
      "name": "AutomatonPrivilegesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "automaton",
          "type": "address"
        }
      ],
      "name": "AutomatonRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberDeactivated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "automaton",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "privilege",
          "type": "uint32"
        }
      ],
      "name": "automatonCan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "automatonCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "automaton",
          "type": "address"
        }
      ],
      "name": "automatonPrivileges",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        }
      ],
      "name": "isAutomaton",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perPage",
          "type": "uint256"
        }
      ],
      "name": "paginateAutomatons",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        }
      ],
      "name": "removeAutomaton",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "privileges",
          "type": "uint32"
        }
      ],
      "name": "setAutomatonPrivileges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x466d661e8f10c5404e14fc9857e9b13619619319700624bd13b5ac6093c0c0fe",
  "receipt": {
    "to": "0x6DF2D25d8C6FD680730ee658b530A05a99BB769a",
    "from": "0x717634cfe06FFAB2CEAA7fcf1b9019813f4B25FE",
    "contractAddress": null,
    "transactionIndex": 21,
    "gasUsed": "722221",
    "logsBloom": "0x
    "blockHash": "0x5a46341cbf072e35f0fb8f0ee02f874d2a38e7526d452cac2eca47862f87d773",
    "transactionHash": "0x466d661e8f10c5404e14fc9857e9b13619619319700624bd13b5ac6093c0c0fe",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 34360491,
        "transactionHash": "0x466d661e8f10c5404e14fc9857e9b13619619319700624bd13b5ac6093c0c0fe",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000717634cfe06ffab2ceaa7fcf1b9019813f4b25fe",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000486a2e5753432000000000000000000000000000000000000000000000000320249c522dd979600000000000000000000000000000000000000000000061b193ed9084ec373a100000000000000000000000000000000000000000000000031fdc3223d68636400000000000000000000000000000000000000000000061b19435fab3438a7d3",
        "logIndex": 65,
        "blockHash": "0x5a46341cbf072e35f0fb8f0ee02f874d2a38e7526d452cac2eca47862f87d773"
      }
    ],
    "blockNumber": 34360491,
    "cumulativeGasUsed": "2237737",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "b117b55c0ee5e7b52854c27ddc3d5e99",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresAutomatonsManager\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"automaton\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"privileges\",\"type\":\"uint32\"}],\"name\":\"AutomatonPrivilegesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"automaton\",\"type\":\"address\"}],\"name\":\"AutomatonRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberDeactivated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"automaton\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"privilege\",\"type\":\"uint32\"}],\"name\":\"automatonCan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"automatonCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"automaton\",\"type\":\"address\"}],\"name\":\"automatonPrivileges\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isAutomaton\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perPage\",\"type\":\"uint256\"}],\"name\":\"paginateAutomatons\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"removeAutomaton\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"privileges\",\"type\":\"uint32\"}],\"name\":\"setAutomatonPrivileges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"automatonCount()\":{\"returns\":{\"_0\":\"The number of automatons in this marketplace.\"}},\"automatonPrivileges(address)\":{\"params\":{\"automaton\":\"is the address to test.\"},\"returns\":{\"_0\":\"An `uint256` bitfield.\"}},\"isAutomaton(address)\":{\"params\":{\"candidate\":\"is the address to test.\"},\"returns\":{\"_0\":\"A `boolean` flag.\"}},\"paginateAutomatons(uint256,uint256)\":{\"params\":{\"cursor\":\"is the index at which to start.\",\"perPage\":\"is how many records should be returned at most.\"},\"returns\":{\"_0\":\"A `address[]` list of values at most `perPage` big.\",\"_1\":\"A `uint256` index to the next page.\"}},\"removeAutomaton(address)\":{\"params\":{\"candidate\":\"is the automaton to remove.\"}},\"setAutomatonPrivileges(address,uint32)\":{\"params\":{\"candidate\":\"is the automaton address to which the privileges should be assigned.\",\"privileges\":\"is a bitfield of privileges to apply.\"}}},\"title\":\"The Marketplace Smart Contract.\",\"version\":1},\"userdoc\":{\"errors\":{\"RequiresAutomatonsManager(address)\":[{\"notice\":\"Errors.\"}]},\"events\":{\"AutomatonPrivilegesSet(address,uint32)\":{\"notice\":\"Emited when an automaton is added or changed.\"},\"AutomatonRemoved(address)\":{\"notice\":\"Emited when an automaton is removed.\"}},\"kind\":\"user\",\"methods\":{\"automatonCount()\":{\"notice\":\"Counts the numbers of automatons present in this Fast.\"},\"automatonPrivileges(address)\":{\"notice\":\"Returns the privileges for a given automaton address, or zero if no privileges exist.\"},\"isAutomaton(address)\":{\"notice\":\"Queries whether a given address is an automaton for this Fast or not.\"},\"paginateAutomatons(uint256,uint256)\":{\"notice\":\"Paginates the automatons of this Fast based on a starting cursor and a number of records per page.\"},\"removeAutomaton(address)\":{\"notice\":\"Removes an automaton completely.\"},\"setAutomatonPrivileges(address,uint32)\":{\"notice\":\"Sets privileges for a given automaton address.\"}},\"notice\":\"The Marketplace Automatons facet is in charge of keeping track of automaton accounts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/marketplace/MarketplaceAutomatonsFacet.sol\":\"MarketplaceAutomatonsFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/common/AHasAutomatons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../common/lib/LibHasAutomatons.sol';\\n\\n\\n/**\\n * @title The Fast Smart Contract.\\n * @notice The Fast Automatons abstract contract is in charge of keeping track of automaton accounts.\\n */\\nabstract contract AHasAutomatons {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Errors.\\n\\n  error RequiresAutomatonsManager(address who);\\n\\n  /// Events.\\n\\n  /**\\n   * @notice Emited when an automaton is added or changed.\\n   * @param automaton is the address of the automaton.\\n   * @param privileges is the new bitfield assigned to this automaton.\\n   */\\n  event AutomatonPrivilegesSet(address indexed automaton, uint32 indexed privileges);\\n\\n  /**\\n   * @notice Emited when an automaton is removed.\\n   * @param automaton is the address of the removed automaton.\\n   */\\n  event AutomatonRemoved(address indexed automaton);\\n\\n  // Must be overriden.\\n  function isAutomatonsManager(address who)\\n      virtual internal view\\n      returns(bool);\\n\\n  // May be overriden.\\n  function onAutomatonAdded(address member)\\n      virtual internal {}\\n  \\n  // May be overriden.\\n  function onAutomatonRemoved(address member)\\n      virtual internal {}\\n\\n  /// Automatons management.\\n\\n  /**\\n   * @notice Queries whether a given address is an automaton for this Fast or not.\\n   * @param candidate is the address to test.\\n   * @return A `boolean` flag.\\n   */\\n  function isAutomaton(address candidate)\\n      external view returns(bool) {\\n    return LibHasAutomatons.data().automatonSet.contains(candidate);\\n  }\\n\\n  /**\\n   * @notice Returns the privileges for a given automaton address, or zero if no privileges exist.\\n   * @param automaton is the address to test.\\n   * @return An `uint256` bitfield.\\n   */\\n  function automatonPrivileges(address automaton)\\n      external view returns(uint32) {\\n    return LibHasAutomatons.data().automatonPrivileges[automaton];\\n  }\\n\\n  function automatonCan(address automaton, uint32 privilege)\\n    external view returns(bool) {\\n      return (LibHasAutomatons.data().automatonPrivileges[automaton] & privilege) != 0;\\n    }\\n\\n  /**\\n   * @notice Counts the numbers of automatons present in this Fast.\\n   * @return The number of automatons in this marketplace.\\n   */\\n  function automatonCount()\\n      external view returns(uint256) {\\n    return LibHasAutomatons.data().automatonSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Paginates the automatons of this Fast based on a starting cursor and a number of records per page.\\n   * @param cursor is the index at which to start.\\n   * @param perPage is how many records should be returned at most.\\n   * @return A `address[]` list of values at most `perPage` big.\\n   * @return A `uint256` index to the next page.\\n   */\\n  function paginateAutomatons(uint256 cursor, uint256 perPage)\\n    external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(\\n      LibHasAutomatons.data().automatonSet.values,\\n      cursor,\\n      perPage\\n    );\\n  }\\n\\n  /**\\n   * @notice Sets privileges for a given automaton address.\\n   * @param candidate is the automaton address to which the privileges should be assigned.\\n   * @param privileges is a bitfield of privileges to apply.\\n   */\\n  function setAutomatonPrivileges(address candidate, uint32 privileges)\\n      external onlyAutomatonManager(msg.sender) {\\n    LibHasAutomatons.Data storage ds = LibHasAutomatons.data();\\n    ds.automatonSet.add(candidate, true);\\n    ds.automatonPrivileges[candidate] = privileges;\\n    emit AutomatonPrivilegesSet(candidate, privileges);\\n  }\\n\\n  /**\\n   * @notice Removes an automaton completely.\\n   * @param candidate is the automaton to remove.\\n   */\\n  function removeAutomaton(address candidate)\\n      external onlyAutomatonManager(msg.sender) {\\n    LibHasAutomatons.Data storage ds = LibHasAutomatons.data();\\n    ds.automatonSet.remove(candidate, false);\\n    delete ds.automatonPrivileges[candidate];\\n    emit AutomatonRemoved(candidate);\\n  }\\n\\n  /// Modifiers.\\n\\n  modifier onlyAutomatonManager(address who) {\\n    if (!isAutomatonsManager(who))\\n      revert RequiresAutomatonsManager(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xd163d134b9021fe9f7f56c3c740893e7cae2b2de575fb6e65823f7c7f18f9581\",\"license\":\"MIT\"},\"contracts/common/AHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../common/lib/LibHasMembers.sol';\\nimport '../interfaces/ICustomErrors.sol';\\n\\n\\n/**\\n * @title The Fast Smart Contract.\\n * @notice The Fast Members abstract contract is in charge of keeping track of automaton accounts.\\n */\\nabstract contract AHasMembers {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Errors.\\n\\n  /// @notice Happens when a function is called by an address that is not a members manager.\\n  error RequiresMembersManager(address who);\\n  /// @notice Happens when an address is used as a member but is not valid.\\n  error RequiresValidMember(address who);\\n\\n  /// Events.\\n\\n  /**\\n   * @notice Emited when a member is added to the implementing contract.\\n   * @param member is the address of the added member.\\n   */\\n  event MemberAdded(address indexed member);\\n  /**\\n   * @notice Emited when a member is removed to the implementing contract.\\n   * @param member is the address of the removed member.\\n   */\\n  event MemberRemoved(address indexed member);\\n\\n  /**\\n   * @notice Checks whether the given address is a members manager or not.\\n   * @dev Must be implemented by the inheriting contract.\\n   * @param who is the address to test.\\n   */\\n  function isMembersManager(address who)\\n      virtual internal view\\n      returns(bool);\\n\\n  /**\\n   * @notice Checks whether the given address can be added as a member or not.\\n   * @dev Must be implemented by the inheriting contract.\\n   * @param who is the address to test.\\n   */\\n  function isValidMember(address who)\\n      virtual internal view\\n      returns(bool);\\n\\n  /**\\n   * @notice This callback is called when a member is added to the contract.\\n   * @dev May be overriden by the inheriting contract.\\n   * @param member is the address which was added.\\n   */\\n  function onMemberAdded(address member)\\n      virtual internal {}\\n  \\n  /**\\n   * @notice This callback is called when a member is removed to the contract.\\n   * @dev May be overriden by the inheriting contract.\\n   * @param member is the address which was removed.\\n   */\\n  function onMemberRemoved(address member)\\n      virtual internal {}\\n  \\n  // Members management.\\n\\n  /**\\n   * @notice Queries whether a given address is a member or not.\\n   * @param who is the address to test.\\n   * @return A `bool` equal to `true` when `candidate` is a member.\\n   */\\n  function isMember(address who)\\n      external view returns(bool) {\\n    return LibHasMembers.data().memberSet.contains(who);\\n  }\\n\\n  /**\\n   * @notice Queries the number of members.\\n   * @return An `uint256`.\\n   */\\n  function memberCount()\\n      external view returns(uint256) {\\n    return LibHasMembers.data().memberSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Queries pages of members based on a start index and a page size.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginateMembers(uint256 index, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibHasMembers.data().memberSet.values, index, perPage);\\n  }\\n\\n  /**\\n   * @notice Adds a member to the list of known members.\\n   * @param who is the address to be added.\\n   */\\n  function addMember(address payable who)\\n      external \\n      onlyMemberManager(msg.sender) onlyValidMember(who) {\\n    // Add the member.\\n    LibHasMembers.data().memberSet.add(who, false);\\n    // Notify via callback.\\n    onMemberAdded(who);\\n    // Emit!\\n    emit MemberAdded(who);\\n  }\\n\\n  /**\\n   * @notice Removes a member from this contract.\\n   * @param member The address of the member to be removed.\\n   * @notice Requires that the caller is a member of this Issuer.\\n   * @notice Emits a `AHasMembers.MemberRemoved` event.\\n   */\\n  function removeMember(address member)\\n      external \\n      onlyMemberManager(msg.sender) {\\n    // Notify via callback.\\n    onMemberRemoved(member);\\n    // Remove member.\\n    LibHasMembers.data().memberSet.remove(member, false);\\n    // Emit!\\n    emit MemberRemoved(member);\\n  }\\n\\n  /// Modifiers.\\n\\n  modifier onlyMemberManager(address who) {\\n    if (!isMembersManager(who))\\n      revert RequiresMembersManager(who);\\n    _;\\n  }\\n\\n  modifier onlyValidMember(address who) {\\n    if (!isValidMember(who))\\n      revert RequiresValidMember(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xf5a8f86cc13f5aa313c02306d99affbaf73658e51aa7df1af60176bbccd18c74\",\"license\":\"MIT\"},\"contracts/common/lib/LibHasAutomatons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibHasAutomatons {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is `keccak256('HasAutomatons.storage.Main')`.\\n  bytes32 internal constant STORAGE_SLOT = 0x3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b9183;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we hold our automatons data.\\n    LibAddressSet.Data automatonSet;\\n    /// @notice This is where we store privileges for each of our automaton account.\\n    mapping(address => uint32) automatonPrivileges;\\n  }\\n\\n  function data() internal pure\\n      returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x0dad1ab3437a67476d7480b7cc89258ea857e5f9320226f46fe78654a30e5953\",\"license\":\"MIT\"},\"contracts/common/lib/LibHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibHasMembers {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is `keccak256('HasMembers.storage.Main')`.\\n  bytes32 internal constant STORAGE_SLOT = 0xd56529bfa3ed57257eed4751494e1d0c0f212cfe38768380e006e3bee06ffb91;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we hold our automatons data.\\n    LibAddressSet.Data memberSet;\\n  }\\n\\n  function data() internal pure\\n      returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x3c2d0885328df3aff3f7e8fd65f9bfe04ce43c5be28b376ea3803613d91b8bbe\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastHistory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/**\\n * @notice This library centralises shared functionality between FAST diamonds facets that have to do with transfer\\n * history tracking.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFastHistory {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage.History'):\\n  bytes32 internal constant STORAGE_SLOT = 0x6bc8b61a9dd5fc049ea98027492a801d74e35fdf4d80d7fecd551a16e88fdbb4;\\n\\n  // Storage structures.\\n\\n  /**\\n   * @notice The history data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice All minting proofs are kept here.\\n    SupplyProof[] supplyProofs;\\n    /// @notice All transfer proofs are kept here.\\n    TransferProof[] transferProofs;\\n    /// @notice All transfers indices involving a given address are kept here.\\n    mapping(address => uint256[]) transferProofInvolvements;\\n  }\\n\\n  // Other structures.\\n\\n  /// @notice A minting operation could either be to mint or burn tokens.\\n  enum SupplyOp { Mint, Burn }\\n\\n  /// @notice Minting operations are recorded for papertrail. This is the structure that keeps track of them.\\n  struct SupplyProof {\\n    /// @notice How...\\n    SupplyOp op;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /// @notice Every transfer in is recorded. This is the structure that keeps track of them.\\n  struct TransferProof {\\n    /// @notice Who spent...\\n    address spender;\\n    /// @notice Who performed the transfer...\\n    address from;\\n    /// @notice Who received...\\n    address to;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /**\\n   * @notice Returns the history storage for the calling FAST.\\n   * @return s a struct pointer for history FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x39b21b41198e6fa219cd8eec59124cda25395bf19174aa809c0c41d650765d73\",\"license\":\"MIT\"},\"contracts/interfaces/ICustomErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\ninterface ICustomErrors {\\n  error AlreadyInitialized();\\n  error InternalMethod();\\n  error RequiresDiamondOwnership(address who);\\n  error RequiresFastContractCaller();\\n\\n  error RequiresTransfersEnabled();\\n  error RequiresIssuerMembership(address who);\\n  error RequiresMarketplaceMembership(address who);\\n  error RequiresMarketplaceActiveMembership(address who);\\n  error RequiresMarketplaceDeactivatedMember(address who);\\n\\n  error RequiresValidTokenHolder(address who);\\n  error RequiresFastGovernorship(address who);\\n  error RequiresFastMembership(address who);\\n  error RequiresNoFastMemberships(address who);\\n\\n  error RequiresOwner(address who);\\n\\n  error InsufficientFunds(uint256 missing);\\n\\n  error DuplicateEntry();\\n  error NonExistentEntry();\\n  error UnsupportedOperation();\\n  error CannotSelfRemove(address who);\\n  error ReentrancyError();\\n\\n  error RequiresContinuousSupply();\\n  error RequiresPositiveBalance(address holder);\\n  error RequiresDifferentSenderAndRecipient(address a);\\n}\\n\",\"keccak256\":\"0x488da257b5263041fb65c72b8f87b6dcf941749d82e232c88a3246b89c7e730f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title ERC173 Contract Ownership Standard\\n * @dev The ERC165 identifier for this interface is 0x7f5828d0.\\n */\\ninterface IERC173 {\\n    /// @notice This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @notice Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xdb5140cc2b82a3fa14aec9b29d77705e66a7b4ca5ea6ba6f4cd7364c636344df\",\"license\":\"MIT\"},\"contracts/lib/LibAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\nlibrary LibAddressSet {\\n  /// @notice Represents a list of addresses.\\n  struct Data {\\n    mapping(address => uint256) indices;\\n    address[] values;\\n  }\\n\\n  /**\\n   * @notice Adds an item into the storage set. If the address already exists in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be added.\\n   */\\n  function add(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && exists) { return; }\\n    require(!exists, 'Address already in set');\\n    d.indices[key] = d.values.length;\\n    d.values.push(key);\\n  }\\n\\n  /**\\n   * @notice Removes an item from the storage set. If the address does not exist in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be removed.\\n   */\\n  function remove(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && !exists) { return; }\\n    require(exists, 'Address does not exist in set');\\n    address keyToMove = d.values[d.values.length - 1];\\n    uint256 idxToReplace = d.indices[key];\\n    d.indices[keyToMove] = idxToReplace;\\n    d.values[idxToReplace] = keyToMove;\\n\\n    delete d.indices[key];\\n    d.values.pop();\\n  }\\n\\n  /**\\n   * @notice Tests whether or not a given item already exists in the set.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to test.\\n   * @return a boolean.\\n   */\\n  function contains(Data storage d, address key)\\n      internal view returns(bool) {\\n    return d.values.length == 0\\n      ? false\\n      : d.values[d.indices[key]] == key;\\n  }\\n}\\n\",\"keccak256\":\"0x7411b83b6853f77fd7b0fef32c5367edad2396ec83f82c45c81297e1d1376e50\",\"license\":\"MIT\"},\"contracts/lib/LibHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport './LibHelpers.sol';\\nimport '../interfaces/IERC173.sol';\\n\\nlibrary LibHelpers {\\n  address internal constant ZERO_ADDRESS = address(0);\\n  address internal constant DEPLOYER_CONTRACT = 0x6DF2D25d8C6FD680730ee658b530A05a99BB769a;\\n\\n  function _isDiamondFacet(address who)\\n      internal view returns(bool) {\\n    return who == address(this);\\n  }\\n  \\n  function _isDiamondOwner(address who)\\n      internal view returns(bool) {\\n    return who == IERC173(address(this)).owner();\\n  }\\n\\n  function _isDeployer(address who)\\n      internal pure returns(bool) {\\n    return who == LibHelpers.DEPLOYER_CONTRACT;\\n  }\\n}\\n\",\"keccak256\":\"0xe49c0442da7b7cce1940847f70bc6c77e85f97b5ae8e580e612b4f027d2c7dc4\",\"license\":\"MIT\"},\"contracts/lib/LibPaginate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../fast/lib/LibFastHistory.sol';\\n\\n\\nlibrary LibPaginate {\\n  function addresses(address[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(address[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      address[] memory values = new address[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function uint256s(uint256[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(uint256[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      uint256[] memory values = new uint256[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function supplyProofs(LibFastHistory.SupplyProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.SupplyProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.SupplyProof[] memory values = new LibFastHistory.SupplyProof[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function transferProofs(LibFastHistory.TransferProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.TransferProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.TransferProof[] memory values = new LibFastHistory.TransferProof[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n}\",\"keccak256\":\"0xb1c624707faa2688853bce5e4ad8e073bb67968a9de5134dfa80bb29fb73c8f4\",\"license\":\"MIT\"},\"contracts/marketplace/MarketplaceAutomatonsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport './lib/AMarketplaceFacet.sol';\\nimport '../common/AHasAutomatons.sol';\\n\\n\\n// Privileges bits.\\nuint32 constant MARKETPLACE_PRIVILEGE_MANAGE_MEMBERS = 1;\\n\\n/**\\n * @title The Marketplace Smart Contract.\\n * @notice The Marketplace Automatons facet is in charge of keeping track of automaton accounts.\\n */\\ncontract MarketplaceAutomatonsFacet is AMarketplaceFacet, AHasAutomatons {\\n  /// Automatons management.\\n\\n  function isAutomatonsManager(address who)\\n      internal view override(AHasAutomatons)\\n      returns(bool) {\\n    return _isIssuerMember(who);\\n  }\\n}\\n\",\"keccak256\":\"0x3ea65149b8f82fa95e1efdfc22e9d1e05ed404d595b408dc4cd7c42df190d303\",\"license\":\"MIT\"},\"contracts/marketplace/lib/AMarketplaceFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibHelpers.sol';\\nimport '../../common/AHasMembers.sol';\\nimport '../../interfaces/ICustomErrors.sol';\\nimport '../lib/LibMarketplace.sol';\\nimport './IMarketplaceEvents.sol';\\n\\n\\n/**\\n* @notice This contract is a group of modifiers that can be used by any Marketplace facets to guard against\\n*       certain permissions.\\n*/\\nabstract contract AMarketplaceFacet is IMarketplaceEvents {\\n  /// Internal ACL functions.\\n\\n  function _isIssuerMember(address who)\\n      internal view returns(bool) {\\n    return AHasMembers(LibMarketplace.data().issuer).isMember(who);\\n  }\\n\\n  // Modifiers.\\n\\n  /// @notice Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier onlyDeployer()\\n      virtual {\\n    if (!LibHelpers._isDeployer(msg.sender))\\n      revert ICustomErrors.InternalMethod();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Requires that the message sender is a member of the linked Issuer.\\n   */\\n  modifier onlyIssuerMember()\\n      virtual {\\n    if (!_isIssuerMember(msg.sender))\\n      revert ICustomErrors.RequiresIssuerMembership(msg.sender);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Requires that the given address is a member of the marketplace.\\n   * @param who is the address to be checked.\\n   */\\n  modifier onlyMember(address who)\\n      virtual {\\n    if (!AHasMembers(address(this)).isMember(who))\\n      revert ICustomErrors.RequiresMarketplaceMembership(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xae9b36ca73eede418eb23a646696e37f381546665671b8e498db5cc8657ad2af\",\"license\":\"MIT\"},\"contracts/marketplace/lib/IMarketplaceEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\ninterface IMarketplaceEvents {\\n  /// @dev See `IHasActiveMembers`.\\n  event MemberActivated(address indexed member);\\n  /// @dev See `IHasActiveMembers`.\\n  event MemberDeactivated(address indexed member);\\n}\\n\",\"keccak256\":\"0x0ba156d29699cc3499e8b2acbd2b0bf0a0654b80958c6dde678858fc45e979cb\",\"license\":\"MIT\"},\"contracts/marketplace/lib/LibMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibMarketplace {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Marketplace.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0xb59ec141376cee83f618e10e881bbb4789cdeee27e0d441a8c37ead3cb8b93c1;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice The internal pointer to the Issuer contract.\\n    address issuer;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xc1e77e5ff5f05952b5928fcef4327355dedf57623ca3f7d72fea54021aaa9ed3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c25806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063911a56cc1161005b578063911a56cc1461012e578063b70cc72a14610141578063b87c747514610154578063ccf90c74146101c457600080fd5b80633e39e4cf14610082578063617b0b9d1461009757806376a7383d1461010d575b600080fd5b610095610090366004610a07565b6101f4565b005b6100f86100a5366004610a07565b73ffffffffffffffffffffffffffffffffffffffff9190911660009081527f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b918660205260409020541663ffffffff16151590565b60405190151581526020015b60405180910390f35b61012061011b366004610a47565b610325565b604051610104929190610a69565b61009561013c366004610ac7565b61035f565b6100f861014f366004610ac7565b61047c565b6101af610162366004610ac7565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b9186602052604090205463ffffffff1690565b60405163ffffffff9091168152602001610104565b7f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b918554604051908152602001610104565b336101fe816104ae565b610251576040517f972aa5a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b7f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b918361029e7f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b91848560016104b9565b73ffffffffffffffffffffffffffffffffffffffff8416600081815260038301602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff881690811790915590519092917f5fd56a5aab6279a81e4acca954bf23ce5ffea9c6351189f4faf647731c38dffa91a350505050565b606060006103547f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b918585856105ad565b915091509250929050565b33610369816104ae565b6103b7576040517f972aa5a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610248565b7f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b91836104047f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b91848460006106ce565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260038301602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000169055517f4592667aee797226527dbacd5953afb6e4fd4263ffc6f671efc0441b45b098d49190a2505050565b60006104a87f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b9184836108a6565b92915050565b60006104a882610922565b60006104c584846108a6565b90508180156104d15750805b156104dc5750505050565b8015610544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4164647265737320616c726561647920696e20736574000000000000000000006044820152606401610248565b50506001808301805473ffffffffffffffffffffffffffffffffffffffff909316600081815260209586526040812085905592840182559082529290200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b60606000808486805490506105c29190610b11565b84116105ce57836105db565b85546105db908690610b11565b905060008167ffffffffffffffff8111156105f8576105f8610b28565b604051908082528060200260200182016040528015610621578160200160208202803683370190505b50905060005b828110156106b4578761063a8289610b57565b8154811061064a5761064a610b6f565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061068757610687610b6f565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101610627565b50806106c08388610b57565b935093505050935093915050565b60006106da84846108a6565b90508180156106e7575080155b156106f25750505050565b80610759576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4164647265737320646f6573206e6f7420657869737420696e207365740000006044820152606401610248565b6001808501805460009261076c91610b11565b8154811061077c5761077c610b6f565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff8781168452918890526040808420549290911680845292208190556001870180549293509091839190839081106107d8576107d8610b6f565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94851617905591871681529087905260408120556001860180548061084657610846610b9e565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055505050505050565b6001820154600090156109185773ffffffffffffffffffffffffffffffffffffffff821660008181526020859052604090205460018501805490919081106108f0576108f0610b6f565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161461091b565b60005b9392505050565b60007fb59ec141376cee83f618e10e881bbb4789cdeee27e0d441a8c37ead3cb8b93c1546040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152620100009092049091169063a230c52490602401602060405180830381865afa1580156109ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a89190610bcd565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a0257600080fd5b919050565b60008060408385031215610a1a57600080fd5b610a23836109de565b9150602083013563ffffffff81168114610a3c57600080fd5b809150509250929050565b60008060408385031215610a5a57600080fd5b50508035926020909101359150565b604080825283519082018190526000906020906060840190828701845b82811015610ab857815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101610a86565b50505092019290925292915050565b600060208284031215610ad957600080fd5b61091b826109de565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610b2357610b23610ae2565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008219821115610b6a57610b6a610ae2565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600060208284031215610bdf57600080fd5b8151801515811461091b57600080fdfea264697066735822122098d628fd8ce30c5a99e85822c4ef36dcbdb567aa74a10b7efe5893acbcc427f664736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063911a56cc1161005b578063911a56cc1461012e578063b70cc72a14610141578063b87c747514610154578063ccf90c74146101c457600080fd5b80633e39e4cf14610082578063617b0b9d1461009757806376a7383d1461010d575b600080fd5b610095610090366004610a07565b6101f4565b005b6100f86100a5366004610a07565b73ffffffffffffffffffffffffffffffffffffffff9190911660009081527f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b918660205260409020541663ffffffff16151590565b60405190151581526020015b60405180910390f35b61012061011b366004610a47565b610325565b604051610104929190610a69565b61009561013c366004610ac7565b61035f565b6100f861014f366004610ac7565b61047c565b6101af610162366004610ac7565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b9186602052604090205463ffffffff1690565b60405163ffffffff9091168152602001610104565b7f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b918554604051908152602001610104565b336101fe816104ae565b610251576040517f972aa5a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b7f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b918361029e7f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b91848560016104b9565b73ffffffffffffffffffffffffffffffffffffffff8416600081815260038301602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff881690811790915590519092917f5fd56a5aab6279a81e4acca954bf23ce5ffea9c6351189f4faf647731c38dffa91a350505050565b606060006103547f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b918585856105ad565b915091509250929050565b33610369816104ae565b6103b7576040517f972aa5a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610248565b7f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b91836104047f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b91848460006106ce565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260038301602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000169055517f4592667aee797226527dbacd5953afb6e4fd4263ffc6f671efc0441b45b098d49190a2505050565b60006104a87f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b9184836108a6565b92915050565b60006104a882610922565b60006104c584846108a6565b90508180156104d15750805b156104dc5750505050565b8015610544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4164647265737320616c726561647920696e20736574000000000000000000006044820152606401610248565b50506001808301805473ffffffffffffffffffffffffffffffffffffffff909316600081815260209586526040812085905592840182559082529290200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b60606000808486805490506105c29190610b11565b84116105ce57836105db565b85546105db908690610b11565b905060008167ffffffffffffffff8111156105f8576105f8610b28565b604051908082528060200260200182016040528015610621578160200160208202803683370190505b50905060005b828110156106b4578761063a8289610b57565b8154811061064a5761064a610b6f565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061068757610687610b6f565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101610627565b50806106c08388610b57565b935093505050935093915050565b60006106da84846108a6565b90508180156106e7575080155b156106f25750505050565b80610759576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4164647265737320646f6573206e6f7420657869737420696e207365740000006044820152606401610248565b6001808501805460009261076c91610b11565b8154811061077c5761077c610b6f565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff8781168452918890526040808420549290911680845292208190556001870180549293509091839190839081106107d8576107d8610b6f565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94851617905591871681529087905260408120556001860180548061084657610846610b9e565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055505050505050565b6001820154600090156109185773ffffffffffffffffffffffffffffffffffffffff821660008181526020859052604090205460018501805490919081106108f0576108f0610b6f565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161461091b565b60005b9392505050565b60007fb59ec141376cee83f618e10e881bbb4789cdeee27e0d441a8c37ead3cb8b93c1546040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152620100009092049091169063a230c52490602401602060405180830381865afa1580156109ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a89190610bcd565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a0257600080fd5b919050565b60008060408385031215610a1a57600080fd5b610a23836109de565b9150602083013563ffffffff81168114610a3c57600080fd5b809150509250929050565b60008060408385031215610a5a57600080fd5b50508035926020909101359150565b604080825283519082018190526000906020906060840190828701845b82811015610ab857815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101610a86565b50505092019290925292915050565b600060208284031215610ad957600080fd5b61091b826109de565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610b2357610b23610ae2565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008219821115610b6a57610b6a610ae2565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600060208284031215610bdf57600080fd5b8151801515811461091b57600080fdfea264697066735822122098d628fd8ce30c5a99e85822c4ef36dcbdb567aa74a10b7efe5893acbcc427f664736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "automatonCount()": {
        "returns": {
          "_0": "The number of automatons in this marketplace."
        }
      },
      "automatonPrivileges(address)": {
        "params": {
          "automaton": "is the address to test."
        },
        "returns": {
          "_0": "An `uint256` bitfield."
        }
      },
      "isAutomaton(address)": {
        "params": {
          "candidate": "is the address to test."
        },
        "returns": {
          "_0": "A `boolean` flag."
        }
      },
      "paginateAutomatons(uint256,uint256)": {
        "params": {
          "cursor": "is the index at which to start.",
          "perPage": "is how many records should be returned at most."
        },
        "returns": {
          "_0": "A `address[]` list of values at most `perPage` big.",
          "_1": "A `uint256` index to the next page."
        }
      },
      "removeAutomaton(address)": {
        "params": {
          "candidate": "is the automaton to remove."
        }
      },
      "setAutomatonPrivileges(address,uint32)": {
        "params": {
          "candidate": "is the automaton address to which the privileges should be assigned.",
          "privileges": "is a bitfield of privileges to apply."
        }
      }
    },
    "title": "The Marketplace Smart Contract.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "RequiresAutomatonsManager(address)": [
        {
          "notice": "Errors."
        }
      ]
    },
    "events": {
      "AutomatonPrivilegesSet(address,uint32)": {
        "notice": "Emited when an automaton is added or changed."
      },
      "AutomatonRemoved(address)": {
        "notice": "Emited when an automaton is removed."
      }
    },
    "kind": "user",
    "methods": {
      "automatonCount()": {
        "notice": "Counts the numbers of automatons present in this Fast."
      },
      "automatonPrivileges(address)": {
        "notice": "Returns the privileges for a given automaton address, or zero if no privileges exist."
      },
      "isAutomaton(address)": {
        "notice": "Queries whether a given address is an automaton for this Fast or not."
      },
      "paginateAutomatons(uint256,uint256)": {
        "notice": "Paginates the automatons of this Fast based on a starting cursor and a number of records per page."
      },
      "removeAutomaton(address)": {
        "notice": "Removes an automaton completely."
      },
      "setAutomatonPrivileges(address,uint32)": {
        "notice": "Sets privileges for a given automaton address."
      }
    },
    "notice": "The Marketplace Automatons facet is in charge of keeping track of automaton accounts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}