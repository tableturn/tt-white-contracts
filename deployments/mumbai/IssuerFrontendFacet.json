{
  "address": "0x7348b0e0B21E0B40E8dcF01637726C4ee1c109B1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fast",
          "type": "address"
        }
      ],
      "name": "FastRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fast",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "GovernorshipAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fast",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "GovernorshipRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perPage",
          "type": "uint256"
        }
      ],
      "name": "paginateDetailedFasts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "transferCredits",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isSemiPublic",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasFixedSupply",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "reserveBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "memberCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "governorCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct FastFrontendFacet.Details[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x08c9871143f7586c2a2896faa37d7495512c71c68abbf1f3c88bc165644cffe0",
  "receipt": {
    "to": "0x6DF2D25d8C6FD680730ee658b530A05a99BB769a",
    "from": "0x717634cfe06FFAB2CEAA7fcf1b9019813f4B25FE",
    "contractAddress": null,
    "transactionIndex": 28,
    "gasUsed": "517278",
    "logsBloom": "0x
    "blockHash": "0xf845748674a6b9995547edd506b72e5c0729461436f842406e37e92e048e78bf",
    "transactionHash": "0x08c9871143f7586c2a2896faa37d7495512c71c68abbf1f3c88bc165644cffe0",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 28097949,
        "transactionHash": "0x08c9871143f7586c2a2896faa37d7495512c71c68abbf1f3c88bc165644cffe0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000717634cfe06ffab2ceaa7fcf1b9019813f4b25fe",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000002c1b14129020000000000000000000000000000000000000000000000000037cd0216a0dec59d00000000000000000000000000000000000000000000154358579ff4b18b9bb000000000000000000000000000000000000000000000000037ca40655fb5c39d000000000000000000000000000000000000000000001543585a61a5f2b49db0",
        "logIndex": 156,
        "blockHash": "0xf845748674a6b9995547edd506b72e5c0729461436f842406e37e92e048e78bf"
      }
    ],
    "blockNumber": 28097949,
    "cumulativeGasUsed": "6049819",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "3deee25745861ef06d8c00170b2967f3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fast\",\"type\":\"address\"}],\"name\":\"FastRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fast\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"GovernorshipAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fast\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"GovernorshipRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perPage\",\"type\":\"uint256\"}],\"name\":\"paginateDetailedFasts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferCredits\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSemiPublic\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasFixedSupply\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reserveBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"memberCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"governorCount\",\"type\":\"uint256\"}],\"internalType\":\"struct FastFrontendFacet.Details[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paginateDetailedFasts(uint256,uint256)\":{\"params\":{\"cursor\":\"The index at which to start.\",\"perPage\":\"How many records should be returned at most.\"},\"returns\":{\"_0\":\"A `address[]` list of values at most `perPage` big.\",\"_1\":\"A `uint256` index to the next page.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"FastRegistered(address)\":{\"notice\":\"Emited when a new FAST is registered.\"}},\"kind\":\"user\",\"methods\":{\"paginateDetailedFasts(uint256,uint256)\":{\"notice\":\"Paginates the FAST diamonds registered with this Issuer based on a starting cursor and        a number of records per page. It returns rich details for each FAST diamond.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/issuer/IssuerFrontendFacet.sol\":\"IssuerFrontendFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/fast/FastFrontendFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFastAccess.sol';\\nimport './lib/LibFastToken.sol';\\n\\n\\n/**\\n * @notice A facet dedicated to view / UI only methods. This facet should never hold any method that\\n * is not either `pure` or `view`, except to emit events.\\n */\\ncontract FastFrontendFacet is AFastFacet {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  // Data structures.\\n\\n  /**\\n   * @notice This struct groups the common attributes of a FAST.\\n   * @dev This struct shouldn't be used in internal storage.\\n   */\\n  struct Details {\\n    /// @notice The `address` of the FAST.\\n    address addr;\\n    /// @notice The `name` of the FAST (ERC20).\\n    string name;\\n    /// @notice The `symbol` of the FAST (ERC20).\\n    string symbol;\\n    /// @notice The `decimals` of the FAST (ERC20).\\n    uint8 decimals;\\n    /// @notice The `totalSupply` of the FAST (ERC20).\\n    uint256 totalSupply;\\n    /// @notice The number of transfer credits the FAST currently has.\\n    uint256 transferCredits;\\n    /// @notice Whether the FAST is semi public or not.\\n    bool isSemiPublic;\\n    /// @notice Whether the FAST has a fixed supply or continious.\\n    bool hasFixedSupply;\\n    /// @notice The reserve balance.\\n    uint256 reserveBalance;\\n    /// @notice The Ether balance.\\n    uint256 ethBalance;\\n    /// @notice The number of members the FAST has.\\n    uint256 memberCount;\\n    /// @notice The number of governors for the FAST.\\n    uint256 governorCount;\\n  }\\n\\n  /**\\n   * @notice Member level details.\\n   * @dev This struct shouldn't be used in internal storage.\\n   */\\n  struct MemberDetails {\\n    /// @notice The Member's address.\\n    address addr;\\n    /// @notice The Member's balance.\\n    uint256 balance;\\n    uint256 ethBalance;\\n    /// @notice Whether the Member is also a Governor.\\n    bool isGovernor;\\n  }\\n\\n  /**\\n   * @notice Governor level details.\\n   * @dev Note that **this struct shouldn't be used in internal storage**.\\n   */\\n  struct GovernorDetails {\\n    /// @notice The Governor's address.\\n    address addr;\\n    uint256 ethBalance;\\n    /// @notice Whether the Governor is also a Member.\\n    bool isMember;\\n  }\\n\\n  // Emitters.\\n\\n  /**\\n   * @notice Called by diamond facets, signals that FAST details may have changed.\\n   * \\n   * Business logic:\\n   * - Modifiers:\\n   *   - Requires the caller to be another facet of the diamond.\\n   * Emits `DetailsChanged`, see `IFastEvents.DetailsChanged`\\n   */\\n  function emitDetailsChanged()\\n      external onlyDiamondFacet {\\n    LibFastAccess.Data storage accessData = LibFastAccess.data();\\n    LibFastToken.Data storage tokenData = LibFastToken.data();\\n    emit DetailsChanged({\\n      memberCount: accessData.memberSet.values.length,\\n      governorCount: accessData.governorSet.values.length,\\n      totalSupply: tokenData.totalSupply,\\n      transferCredits: tokenData.transferCredits,\\n      reserveBalance: tokenData.balances[LibConstants.ZERO_ADDRESS],\\n      ethBalance: payable(address(this)).balance\\n    });\\n  }\\n\\n  // Public functions.\\n\\n  /**\\n   * @notice Gets the details of a FAST.\\n   * @return The details for the current FAST, see `Details`.\\n   */\\n  function details()\\n      public view returns(Details memory) {\\n    LibFast.Data storage topStorage = LibFast.data();\\n    LibFastAccess.Data storage accessStorage = LibFastAccess.data();\\n    LibFastToken.Data storage tokenStorage = LibFastToken.data();\\n    return Details({\\n      addr: address(this),\\n      name: tokenStorage.name,\\n      symbol: tokenStorage.symbol,\\n      decimals: tokenStorage.decimals,\\n      totalSupply: tokenStorage.totalSupply,\\n      transferCredits: tokenStorage.transferCredits,\\n      isSemiPublic: topStorage.isSemiPublic,\\n      hasFixedSupply: topStorage.hasFixedSupply,\\n      reserveBalance: tokenStorage.balances[LibConstants.ZERO_ADDRESS],\\n      ethBalance: payable(address(this)).balance,\\n      memberCount: accessStorage.memberSet.values.length,\\n      governorCount: accessStorage.governorSet.values.length\\n    });\\n  }\\n\\n  /**\\n   * @notice Gets detailed member details.\\n   * @return A FAST member's details, see `MemberDetails`.\\n   */\\n  function detailedMember(address member)\\n      public view returns(MemberDetails memory) {\\n    return MemberDetails({\\n      addr: member,\\n      balance: LibFastToken.data().balances[member],\\n      ethBalance: member.balance,\\n      isGovernor: LibFastAccess.data().governorSet.contains(member)\\n    });\\n  }\\n\\n  /**\\n   * @notice Gets detailed governor details.\\n   * @return GovernorDetails See: `GovernorDetails`.\\n   */\\n  function detailedGovernor(address governor)\\n      public view returns(GovernorDetails memory) {\\n    return GovernorDetails({\\n      addr: governor,\\n      ethBalance: governor.balance,\\n      isMember: LibFastAccess.data().memberSet.contains(governor)\\n    });\\n  }\\n\\n  function paginateDetailedMembers(uint256 index, uint256 perPage)\\n      external view returns(MemberDetails[] memory, uint256) {\\n    (address[] memory members, uint256 nextCursor) =\\n      LibPaginate.addresses(LibFastAccess.data().memberSet.values, index, perPage);\\n    MemberDetails[] memory values = new MemberDetails[](members.length);\\n    uint256 length = members.length;\\n    for (uint256 i = 0; i < length;) {\\n      values[i] = detailedMember(members[i]);\\n      unchecked { ++i; }\\n    }\\n    return (values, nextCursor);\\n  }\\n\\n  function paginateDetailedGovernors(uint256 index, uint256 perPage)\\n      external view returns(GovernorDetails[] memory, uint256) {\\n    (address[] memory governors, uint256 nextCursor) =\\n      LibPaginate.addresses(LibFastAccess.data().governorSet.values, index, perPage);\\n    GovernorDetails[] memory values = new GovernorDetails[](governors.length);\\n    uint256 length =  governors.length;\\n    for (uint256 i = 0; i < length;) {\\n      values[i] = detailedGovernor(governors[i]);\\n      unchecked { ++i; }\\n    }\\n    return (values, nextCursor);\\n  }\\n}\\n\",\"keccak256\":\"0xbf625672b665e07d7ca3b1c9771962c8945dc87caa034a6c5c7a3d3b2d39b9b8\",\"license\":\"MIT\"},\"contracts/fast/lib/AFastFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibConstants.sol';\\nimport '../../lib/LibHelpers.sol';\\nimport '../../lib/LibAddressSet.sol';\\nimport '../../interfaces/ICustomErrors.sol';\\nimport '../../interfaces/IHasMembers.sol';\\nimport '../../interfaces/IHasGovernors.sol';\\nimport '../../interfaces/IHasActiveMembers.sol';\\nimport '../../interfaces/IERC173.sol';\\nimport '../lib/LibFast.sol';\\nimport './IFastEvents.sol';\\n\\n\\n/**\\n * @title Abstract FAST helper contract.\\n * @notice This abstract contract encapsulates modifiers allowing inheriting facets to guard against\\n * certain permissions.\\n */\\nabstract contract AFastFacet is IFastEvents {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Modifiers.\\n\\n  /// @notice Ensures that a method can only be called by another facet of the same diamond.\\n  modifier onlyDiamondFacet() {\\n    if (msg.sender != address(this)) {\\n      revert ICustomErrors.InternalMethod();\\n    }\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the owner of this diamond.\\n  modifier onlyDiamondOwner() {\\n    if (msg.sender != IERC173(address(this)).owner()) {\\n      revert ICustomErrors.RequiresDiamondOwnership();\\n    }\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier onlyDeployer() {\\n    if (msg.sender != LibConstants.DEPLOYER_CONTRACT) {\\n      revert ICustomErrors.InternalMethod();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a member of the Marketplace.\\n   * @param candidate The address to check.\\n   */\\n  modifier onlyMarketplaceMember(address candidate) {\\n    if (!IHasMembers(LibFast.data().marketplace).isMember(candidate)) {\\n      revert ICustomErrors.RequiresMarketplaceMembership(candidate);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures a candidate is an active member of the Marketplace.\\n   * @param candidate The address to check.\\n   */\\n  modifier onlyMarketplaceActiveMember(address candidate) {\\n    if (!IHasActiveMembers(LibFast.data().marketplace).isMemberActive(candidate)) {\\n      revert ICustomErrors.RequiresMarketplaceActiveMember(candidate);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the message sender is a member of the Issuer.\\n   */\\n  modifier onlyIssuerMember() {\\n    if (!IHasMembers(LibFast.data().issuer).isMember(msg.sender)) {\\n      revert ICustomErrors.RequiresIssuerMembership(msg.sender);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a governor of the FAST.\\n   * @param candidate The address to check.\\n   */\\n  modifier onlyGovernor(address candidate) {\\n    if (!IHasGovernors(address(this)).isGovernor(candidate)) {\\n      revert ICustomErrors.RequiresFastGovernorship(candidate);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a member of the FAST.\\n   * @param candidate The address to check.\\n   */\\n  modifier onlyMember(address candidate) {\\n    if (!IHasMembers(address(this)).isMember(candidate)) {\\n      revert ICustomErrors.RequiresFastMembership(candidate);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures address `a` and `b` are different.\\n   * @param a Address a\\n   * @param b Address b\\n   */\\n  modifier differentAddresses(address a, address b) {\\n    if (a == b) {\\n      revert ICustomErrors.RequiresDifferentSenderAndRecipient(a);\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xce6827559caffba5a47faea7964ea696d9ddddea3bc6e1d629850863e2bc9b8b\",\"license\":\"MIT\"},\"contracts/fast/lib/IFastEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/**\\n * @title FAST events inventory.\\n * @notice An interface allowing to use events within the Diamond pattern without name colisions.\\n * @dev The idea is that as several facets can emit the same events, we don't want to have to re-declare\\n * the same event several time. This interface is a per-diamond central place for such event declaration.\\n */\\ninterface IFastEvents {\\n  // IHasMembers.\\n\\n  /**\\n   * @notice Emited when a member is added to the implementing contract.\\n   * @param member is the address of the added member.\\n   */\\n  event MemberAdded(address indexed member);\\n  /**\\n   * @notice Emited when a member is removed to the implementing contract.\\n   * @param member is the address of the removed member.\\n   */\\n  event MemberRemoved(address indexed member);\\n\\n  // IHasGovernors.\\n\\n  /**\\n   * @notice Emited when a governor is added to the implementing contract.\\n   * @param governor is the address of the added governor.\\n   */\\n  event GovernorAdded(address indexed governor);\\n  /**\\n   * @notice Emited when a governor is removed to the implementing contract.\\n   * @param governor is the address of the removed member.\\n   */\\n  event GovernorRemoved(address indexed governor);\\n\\n  // Issuance related events.\\n  /**\\n   * @notice Emited whenever an issuance happens in a FAST.\\n   * @param amount is the amount of tokens that have been minted.\\n   * @param ref is the reference associated with the minting operation.\\n   */\\n  event Minted(uint256 indexed amount, string indexed ref);\\n  /**\\n   * @notice Emited whenever an burning happens in a FAST.\\n   * @param amount is the amount of tokens that have been burnt.\\n   * @param ref is the reference associated with the burning operation.\\n   */\\n  event Burnt(uint256 indexed amount, string indexed ref);\\n\\n  // Transfer credits related events.\\n  /**\\n   * @notice Emited whenever transfer credits increase inside a FAST.\\n   * @param issuerMember is the address of the Issuer member who performed the operation.\\n   * @param amount is the number of issued transfer credits.\\n   */\\n  event TransferCreditsAdded(address indexed issuerMember, uint256 amount);\\n  /**\\n   * @notice Emited whenever transfer credits are drained inside a FAST.\\n   * @param issuerMember is the address of the Issuer member who performed the operation.\\n   * @param amount is the number of drained transfer credits.\\n   */\\n  event TransferCreditsDrained(address indexed issuerMember, uint256 amount);\\n\\n  // ERC20 stuff.\\n\\n  /// @notice See `ERC20.Transfer`.\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  /// @notice See `ERC20.Approval`.\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  /// @notice See `ERC20.Disapproval`.\\n  event Disapproval(address indexed owner, address indexed spender, uint256 value);\\n\\n  // General events.\\n\\n  /**\\n   * @notice This is an event that is fired whenever any of some of the FAST parameters\\n   * change, so that the frontend can react to it and refresh the general header\\n   * for that fast as well as the baseball cards in the FASTs list.\\n   * @param memberCount is the number of members in the FAST.\\n   * @param governorCount is the number of governors in the FAST.\\n   * @param totalSupply is the amount of tokens in circulation in the FAST.\\n   * @param transferCredits represents how many transfer credits are available inside the FAST.\\n   * @param reserveBalance is the balance of the zero-address (aka reserve) for the FAST.\\n   * @param ethBalance is the amount of Eth locked in the FAST.\\n   */\\n  event DetailsChanged(\\n    uint256 memberCount,\\n    uint256 governorCount,\\n    uint256 totalSupply,\\n    uint256 transferCredits,\\n    uint256 reserveBalance,\\n    uint256 ethBalance\\n  );\\n}\\n\",\"keccak256\":\"0x7ce33d04c780c18384f5164c8a04441aa9f3b20ac3cbe101b10f5d0d6a09df12\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/**\\n * @notice Top-level shared functionality for FAST diamonds.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFast {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0x80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705;\\n\\n  // Data structures.\\n\\n  /**\\n   * @notice The top-level data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice The internal pointer to the Issuer contract.\\n    address issuer;\\n    /// @notice The internal pointer to the Marketplace contract.\\n    address marketplace;\\n    /// @notice We have to track whether the token facet provides continuous minting or fixed supply.\\n    bool hasFixedSupply;\\n    /// @notice Whether or not this FAST requires to be a member to hold tokens.\\n    bool isSemiPublic;\\n  }\\n\\n  /**\\n   * @notice Returns the top-level storage for the calling FAST.\\n   * @return s a struct pointer for top-level FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xe5a46fc391b5dbead8199127742c18cbe6ff19153b15c3d632747b154b76326c\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n/**\\n * @notice This library centralises shared functionality between FAST diamonds facets that have to do with ACLs.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFastAccess {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage.Access'):\\n  bytes32 internal constant STORAGE_SLOT = 0x87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9a;\\n\\n  /**\\n   * @notice The access data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice We hold the list of the FAST governors in there.\\n    LibAddressSet.Data governorSet;\\n    /// @notice The FAST members are held in there.\\n    LibAddressSet.Data memberSet;\\n  }\\n\\n  /**\\n   * @notice Returns the access storage for the calling FAST.\\n   * @return s a struct pointer for access FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xb671ecfaa95bd5e9f46a01970fae2a814e640cb08d13a62fed595083683fccc3\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastHistory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/**\\n * @notice This library centralises shared functionality between FAST diamonds facets that have to do with transfer\\n * history tracking.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFastHistory {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage.History'):\\n  bytes32 internal constant STORAGE_SLOT = 0x6bc8b61a9dd5fc049ea98027492a801d74e35fdf4d80d7fecd551a16e88fdbb4;\\n\\n  // Storage structures.\\n\\n  /**\\n   * @notice The history data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice All minting proofs are kept here.\\n    SupplyProof[] supplyProofs;\\n    /// @notice All transfer proofs are kept here.\\n    TransferProof[] transferProofs;\\n    /// @notice All transfers indices involving a given address are kept here.\\n    mapping(address => uint256[]) transferProofInvolvements;\\n  }\\n\\n  // Other structures.\\n\\n  /// @notice A minting operation could either be to mint or burn tokens.\\n  enum SupplyOp { Mint, Burn }\\n\\n  /// @notice Minting operations are recorded for papertrail. This is the structure that keeps track of them.\\n  struct SupplyProof {\\n    /// @notice How...\\n    SupplyOp op;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /// @notice Every transfer in is recorded. This is the structure that keeps track of them.\\n  struct TransferProof {\\n    /// @notice Who spent...\\n    address spender;\\n    /// @notice Who performed the transfer...\\n    address from;\\n    /// @notice Who received...\\n    address to;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /**\\n   * @notice Returns the history storage for the calling FAST.\\n   * @return s a struct pointer for history FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x39b21b41198e6fa219cd8eec59124cda25395bf19174aa809c0c41d650765d73\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\n/**\\n * @notice This library centralises shared functionality between FAST diamonds facets that have to do with token related logic.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFastToken {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage.Token'):\\n  bytes32 internal constant STORAGE_SLOT = 0xb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261;\\n\\n  // Constants.\\n\\n  string internal constant DEFAULT_TRANSFER_REFERENCE = 'Unspecified - via ERC20';\\n\\n  // Data structures.\\n\\n  /**\\n   * @notice The token data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    // ERC20 related properties for this FAST Token.\\n    /// @notice The name of the FAST.\\n    string name;\\n    /// @notice The symbol for this FAST.\\n    string symbol;\\n    /// @notice The decimal points used by this FAST.\\n    uint8 decimals;\\n    /// @notice The amount of tokens in circulation.\\n    uint256 totalSupply;\\n    /**\\n   * @notice Every time a transfer is executed, the credit decreases by the amount of said transfer.\\n     * It becomes impossible to transact once it reaches zero, and must be provisioned by an Issuer member.\\n    */\\n    uint256 transferCredits;\\n    /// @notice Our members balances are held here.\\n    mapping(address => uint256) balances;\\n    // Allowances are stored here.\\n    /// @notice Allowance amounts are stored in here, via mapping of `owner.spender.amount`\\n    mapping(address => mapping(address => uint256)) allowances;\\n    /// @notice A reverse lookup table allowing to retrieve allowances given by owner.\\n    mapping(address => LibAddressSet.Data) allowancesByOwner;\\n    /// @notice A reverse lookup table allowing to retrieve allowances given by spender.\\n    mapping(address => LibAddressSet.Data) allowancesBySpender;\\n    // Token holders\\n    LibAddressSet.Data tokenHolders;\\n  }\\n\\n  /**\\n   * @notice Returns the token storage for the calling FAST.\\n   * @return s a struct pointer for token FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x2875453fbefe3ec24c3c69129e42a8edff9eadda6d44c4fe395e94f2892e8ee2\",\"license\":\"MIT\"},\"contracts/interfaces/ICustomErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\ninterface ICustomErrors {\\n  error AlreadyInitialized();\\n  error InternalMethod();\\n  error RequiresDiamondOwnership();\\n  error RequiresFastContractCaller();\\n\\n  error RequiresIssuerMembership(address who);\\n  error RequiresMarketplaceMembership(address who);\\n  error RequiresMarketplaceActiveMember(address who);\\n  error RequiresMarketplaceDeactivatedMember(address who);\\n\\n  error RequiresFastGovernorship(address who);\\n  error RequiresFastMembership(address who);\\n  error RequiresNoFastMemberships(address who);\\n\\n  error DuplicateEntry();\\n  error UnsupportedOperation();\\n  error CannotSelfRemove(address who);\\n\\n  error RequiresContinuousSupply();\\n  error RequiresPositiveBalance(address holder);\\n  error RequiresDifferentSenderAndRecipient(address a);\\n}\\n\",\"keccak256\":\"0xaa89077b8be2c61400a97a508dee4f6eb00334ea1a101937c705d3eee070fb02\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title ERC173 Contract Ownership Standard\\n * @dev The ERC165 identifier for this interface is 0x7f5828d0.\\n */\\ninterface IERC173 {\\n    /// @notice This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @notice Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xdb5140cc2b82a3fa14aec9b29d77705e66a7b4ca5ea6ba6f4cd7364c636344df\",\"license\":\"MIT\"},\"contracts/interfaces/IHasActiveMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/// @title An interface signifying that the inheriting contract implements the concept of active memberships.\\ninterface IHasActiveMembers {\\n  /**\\n   * @notice Queries whether a given account is active.\\n   * @param member is the address to query.\\n   * @return A `bool` set to `true` if the candidate is an active member.\\n   */\\n  function isMemberActive(address member) external view returns(bool);\\n\\n  /**\\n   * @notice Deactivates a given member address.\\n   * @param member is the address to deactivate.\\n   */\\n  function deactivateMember(address payable member) external;\\n\\n  /**\\n   * @notice Activates a given member address.\\n   * @param member is the address to activate.\\n   */\\n  function activateMember(address member) external;\\n}\\n\",\"keccak256\":\"0xe82489064310ba738b47a070409d96af5c86d755f7f9f6604e0ec2257ab27c08\",\"license\":\"MIT\"},\"contracts/interfaces/IHasGovernors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/// @title An interface signifying that the inheriting contract implements the concept of governorship ACLs.\\ninterface IHasGovernors {\\n  /**\\n   * @notice Queries whether a given address is a governor or not.\\n   * @param candidate is the address to test.\\n   * @return A `bool` equal to `true` when `candidate` is a governor.\\n   */\\n  function isGovernor(address candidate) external view returns(bool);\\n\\n  /**\\n   * @notice Queries the number of governors.\\n   * @return An `uint256`.\\n   */\\n  function governorCount() external view returns(uint256);\\n\\n  /**\\n   * @notice Queries pages of governors based on a start index and a page size.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginateGovernors(uint256 index, uint256 perPage) external view returns(address[] memory, uint256);\\n\\n  /**\\n   * @notice Adds a governor to the list of known governors.\\n   * @param governor is the address to be added.\\n   */\\n  function addGovernor(address payable governor) external;\\n\\n  /**\\n   * @notice Removes a governor from the list of known governors.\\n   * @param governor is the address to be removed.\\n   */\\n  function removeGovernor(address governor) external;\\n}\\n\",\"keccak256\":\"0xf80b84746be3c4ddab96aadf19078603eda1c9222981677b48a6d6726209eab6\",\"license\":\"MIT\"},\"contracts/interfaces/IHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/// @title An interface signifying that the inheriting contract implements the concept of membership ACLs.\\ninterface IHasMembers {\\n  /**\\n   * @notice Queries whether a given address is a member or not.\\n   * @param candidate is the address to test.\\n   * @return A `bool` equal to `true` when `candidate` is a member.\\n   */\\n  function isMember(address candidate) external view returns(bool);\\n\\n  /**\\n   * @notice Queries the number of members.\\n   * @return An `uint256`.\\n   */\\n  function memberCount() external view returns(uint256);\\n\\n  /**\\n   * @notice Queries pages of members based on a start index and a page size.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginateMembers(uint256 index, uint256 perPage) external view returns(address[] memory, uint256);\\n\\n  /**\\n   * @notice Adds a member to the list of known members.\\n   * @param candidate is the address to be added.\\n   */\\n  function addMember(address payable candidate) external;\\n\\n  /**\\n   * @notice Removes a member from the list of known members.\\n   * @param member is the address to be removed.\\n   */\\n  function removeMember(address member) external;\\n}\\n\",\"keccak256\":\"0xfc66597f16c7668a054f2bed1db32b85e2f240d9de257b5e38226daf8c891cd0\",\"license\":\"MIT\"},\"contracts/issuer/IssuerFrontendFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibPaginate.sol';\\nimport '../fast/FastFrontendFacet.sol';\\nimport './lib/AIssuerFacet.sol';\\nimport './lib/LibIssuer.sol';\\n\\n\\ncontract IssuerFrontendFacet is AIssuerFacet {\\n\\n  // Public functions.\\n\\n  /**\\n   * @notice Paginates the FAST diamonds registered with this Issuer based on a starting cursor and\\n   *        a number of records per page. It returns rich details for each FAST diamond.\\n   * @param cursor The index at which to start.\\n   * @param perPage How many records should be returned at most.\\n   * @return A `address[]` list of values at most `perPage` big.\\n   * @return A `uint256` index to the next page.\\n   */\\n  function paginateDetailedFasts(uint256 cursor, uint256 perPage)\\n      external view\\n      returns(FastFrontendFacet.Details[] memory, uint256) {\\n    (address[] memory addresses, uint256 nextCursor) = LibPaginate.addresses(LibIssuer.data().fastSet.values, cursor, perPage);\\n    FastFrontendFacet.Details[] memory fastDetails = new FastFrontendFacet.Details[](addresses.length);\\n    uint256 length = addresses.length;\\n    for (uint256 i = 0; i < length;) {\\n      fastDetails[i] = FastFrontendFacet(addresses[i]).details();\\n      unchecked { ++i; }\\n    }\\n    return (fastDetails, nextCursor);\\n  }\\n}\\n\",\"keccak256\":\"0x1cc29c28d79abeff356c5725da6ba4c8375ab787df04846ce65d9580429c318e\",\"license\":\"MIT\"},\"contracts/issuer/lib/AIssuerFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibConstants.sol';\\nimport '../../lib/LibHelpers.sol';\\nimport '../../lib/LibAddressSet.sol';\\nimport '../../interfaces/IERC173.sol';\\nimport '../../interfaces/ICustomErrors.sol';\\nimport '../lib/LibIssuerAccess.sol';\\nimport './IIssuerEvents.sol';\\n\\n\\n/**\\n* @notice This abstract contract encapsulates modifiers allowing inheriting facets to guard against\\n* certain permissions.\\n*/\\nabstract contract AIssuerFacet is IIssuerEvents {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Modifiers.\\n\\n  /// @notice Ensures that a method can only be called by another facet of the same diamond.\\n  modifier onlyDiamondFacet() {\\n    if (msg.sender != address(this)) {\\n      revert ICustomErrors.InternalMethod();\\n    }\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the owner of this diamond.\\n  modifier onlyDiamondOwner() {\\n    if (msg.sender != IERC173(address(this)).owner()) {\\n      revert ICustomErrors.RequiresDiamondOwnership();\\n    }\\n    _;\\n  }\\n\\n  /// @notice Ensures that the given address is a member of the current FAST.\\n  modifier onlyMember(address candidate) {\\n    if (!LibIssuerAccess.data().memberSet.contains(candidate)) {\\n      revert ICustomErrors.RequiresIssuerMembership(candidate);\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x1f251965b92146d410433301f47ae2e5d8b817e400c813fad323c4765433730c\",\"license\":\"MIT\"},\"contracts/issuer/lib/IIssuerEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n// WARNING: These events must be maintained 1:1 with LibIssuerEvents!\\n// They also should never be emitted directly, they only help us defining\\n// typescript types!\\ninterface IIssuerEvents {\\n  // Fast registration events.\\n\\n  /**\\n   * @notice Emited when a new FAST is registered.\\n   * @param fast The address of the newly registered FAST diamond.\\n   */\\n  event FastRegistered(address indexed fast);\\n\\n  // IHasMembers.\\n\\n  event MemberAdded(address indexed member);\\n  event MemberRemoved(address indexed member);\\n\\n  // Governors.\\n\\n  event GovernorshipRemoved(address indexed fast, address indexed governor);\\n  event GovernorshipAdded(address indexed fast, address indexed governor);\\n}\\n\",\"keccak256\":\"0xd4fde94e2c28af5c3f9b1be3c4550648d78af4477f97f17ec7dcf3aaae8884cb\",\"license\":\"MIT\"},\"contracts/issuer/lib/LibIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibIssuer {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Issuer.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0xd681d5f1de7bc4b7442c088939dc202585e09699e92a94c9717ace8d0f4fcaa5;\\n\\n  // Data structures.\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    // This is where we keep our list of deployed fast FASTs.\\n    LibAddressSet.Data fastSet;\\n    // We keep track of the FAST symbols that were already used.\\n    mapping(string => address) fastSymbols;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x9a8c697e32b3f8640cff2559aa286583b3f8e80f77a6048e525cd78c0e203135\",\"license\":\"MIT\"},\"contracts/issuer/lib/LibIssuerAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibIssuerAccess {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Issuer.storage.Access'):\\n  bytes32 internal constant STORAGE_SLOT = 0x3ceaa4d5edf9c96fbd56140abe6389d65a87143d4f11819874ff2fe0ae9574db;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    // This is where we hold our members data.\\n    LibAddressSet.Data memberSet;\\n    // For a given address we store list of FASTs where that address is a governor.\\n    mapping(address => LibAddressSet.Data) fastGovernorships;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x31753917f07b0daa09848aa3814e711d1c2e7a82fbc5ba1db9f0a1c391666a9c\",\"license\":\"MIT\"},\"contracts/lib/LibAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\nlibrary LibAddressSet {\\n  /// @notice Represents a list of addresses.\\n  struct Data {\\n    mapping(address => uint256) indices;\\n    address[] values;\\n  }\\n\\n  /**\\n   * @notice Adds an item into the storage set. If the address already exists in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be added.\\n   */\\n  function add(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && exists) { return; }\\n    require(!exists, 'Address already in set');\\n    d.indices[key] = d.values.length;\\n    d.values.push(key);\\n  }\\n\\n  /**\\n   * @notice Removes an item from the storage set. If the address does not exist in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be removed.\\n   */\\n  function remove(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && !exists) { return; }\\n    require(exists, 'Address does not exist in set');\\n    address keyToMove = d.values[d.values.length - 1];\\n    uint256 idxToReplace = d.indices[key];\\n    d.indices[keyToMove] = idxToReplace;\\n    d.values[idxToReplace] = keyToMove;\\n\\n    delete d.indices[key];\\n    d.values.pop();\\n  }\\n\\n  /**\\n   * @notice Tests whether or not a given item already exists in the set.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to test.\\n   * @return a boolean.\\n   */\\n  function contains(Data storage d, address key)\\n      internal view returns(bool) {\\n    return d.values.length == 0\\n      ? false\\n      : d.values[d.indices[key]] == key;\\n  }\\n}\\n\",\"keccak256\":\"0x7411b83b6853f77fd7b0fef32c5367edad2396ec83f82c45c81297e1d1376e50\",\"license\":\"MIT\"},\"contracts/lib/LibConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\nlibrary LibConstants {\\n  address internal constant ZERO_ADDRESS = address(0);\\n  address internal constant DEPLOYER_CONTRACT = 0x6DF2D25d8C6FD680730ee658b530A05a99BB769a;\\n\\n  string internal constant INSUFFICIENT_TRANSFER_CREDITS = 'Insufficient transfer credits';\\n  string internal constant REQUIRES_MARKETPLACE_MEMBERSHIP = 'Requires Marketplace membership';\\n  string internal constant REQUIRES_FAST_MEMBERSHIP = 'Requires FAST membership';\\n  string internal constant REQUIRES_DIFFERENT_SENDER_AND_RECIPIENT = 'Requires different sender and recipient';\\n}\",\"keccak256\":\"0xe27f317692bd3b51c815a3a463a6449dde9e686f4623dc40e4b2620e621a3c5c\",\"license\":\"MIT\"},\"contracts/lib/LibHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary LibHelpers {\\n}\\n\",\"keccak256\":\"0x37d04f54a3887bd432df5b25b29ed345758d66c90cb6393ad818fc55f1dd1435\",\"license\":\"MIT\"},\"contracts/lib/LibPaginate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../fast/lib/LibFastHistory.sol';\\n\\n\\nlibrary LibPaginate {\\n  function addresses(address[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(address[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      address[] memory values = new address[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function uint256s(uint256[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(uint256[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      uint256[] memory values = new uint256[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function supplyProofs(LibFastHistory.SupplyProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.SupplyProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.SupplyProof[] memory values = new LibFastHistory.SupplyProof[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function transferProofs(LibFastHistory.TransferProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.TransferProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.TransferProof[] memory values = new LibFastHistory.TransferProof[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n}\",\"keccak256\":\"0xb1c624707faa2688853bce5e4ad8e073bb67968a9de5134dfa80bb29fb73c8f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610865806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c631108b14610030575b600080fd5b61004361003e36600461036d565b61005a565b604051610051929190610409565b60405180910390f35b60606000808061008b7fd681d5f1de7bc4b7442c088939dc202585e09699e92a94c9717ace8d0f4fcaa7878761024c565b915091506000825167ffffffffffffffff8111156100ab576100ab610541565b60405190808252806020026020018201604052801561015d57816020015b61014a604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600060ff1681526020016000815260200160008152602001600015158152602001600015158152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816100c95790505b50835190915060005b8181101561023d5784818151811061018057610180610570565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663565974d36040518163ffffffff1660e01b8152600401600060405180830381865afa1580156101d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261021891908101906106b9565b83828151811061022a5761022a610570565b6020908102919091010152600101610166565b50909791965090945050505050565b60606000808486805490506102619190610800565b841161026d578361027a565b855461027a908690610800565b905060008167ffffffffffffffff81111561029757610297610541565b6040519080825280602002602001820160405280156102c0578160200160208202803683370190505b50905060005b8281101561035357876102d98289610817565b815481106102e9576102e9610570565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061032657610326610570565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016102c6565b508061035f8388610817565b935093505050935093915050565b6000806040838503121561038057600080fd5b50508035926020909101359150565b60005b838110156103aa578181015183820152602001610392565b838111156103b9576000848401525b50505050565b600081518084526103d781602086016020860161038f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006040808301818452808651808352606092508286019150828160051b8701016020808a0160005b8481101561052c578984037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa00186528151805173ffffffffffffffffffffffffffffffffffffffff168552610180848201518186880152610495828801826103bf565b915050898201518682038b8801526104ad82826103bf565b915050888201516104c28a88018260ff169052565b506080828101519087015260a0808301519087015260c08083015115159087015260e0808301511515908701526101008083015190870152610120808301519087015261014080830151908701526101609182015191909501529482019490820190600101610432565b50509690960196909652509295945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b604051610180810167ffffffffffffffff811182821017156105c3576105c3610541565b60405290565b805173ffffffffffffffffffffffffffffffffffffffff811681146105ed57600080fd5b919050565b600082601f83011261060357600080fd5b815167ffffffffffffffff8082111561061e5761061e610541565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561066457610664610541565b8160405283815286602085880101111561067d57600080fd5b61068e84602083016020890161038f565b9695505050505050565b805160ff811681146105ed57600080fd5b805180151581146105ed57600080fd5b6000602082840312156106cb57600080fd5b815167ffffffffffffffff808211156106e357600080fd5b9083019061018082860312156106f857600080fd5b61070061059f565b610709836105c9565b815260208301518281111561071d57600080fd5b610729878286016105f2565b60208301525060408301518281111561074157600080fd5b61074d878286016105f2565b60408301525061075f60608401610698565b60608201526080830151608082015260a083015160a082015261078460c084016106a9565b60c082015261079560e084016106a9565b60e08201526101008381015190820152610120808401519082015261014080840151908201526101609283015192810192909252509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610812576108126107d1565b500390565b6000821982111561082a5761082a6107d1565b50019056fea2646970667358221220dba1e3054dad37130e9c5817b37ec9433695e9618d3845d7468d0ed9faed0d3a64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c631108b14610030575b600080fd5b61004361003e36600461036d565b61005a565b604051610051929190610409565b60405180910390f35b60606000808061008b7fd681d5f1de7bc4b7442c088939dc202585e09699e92a94c9717ace8d0f4fcaa7878761024c565b915091506000825167ffffffffffffffff8111156100ab576100ab610541565b60405190808252806020026020018201604052801561015d57816020015b61014a604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600060ff1681526020016000815260200160008152602001600015158152602001600015158152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816100c95790505b50835190915060005b8181101561023d5784818151811061018057610180610570565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663565974d36040518163ffffffff1660e01b8152600401600060405180830381865afa1580156101d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261021891908101906106b9565b83828151811061022a5761022a610570565b6020908102919091010152600101610166565b50909791965090945050505050565b60606000808486805490506102619190610800565b841161026d578361027a565b855461027a908690610800565b905060008167ffffffffffffffff81111561029757610297610541565b6040519080825280602002602001820160405280156102c0578160200160208202803683370190505b50905060005b8281101561035357876102d98289610817565b815481106102e9576102e9610570565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061032657610326610570565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016102c6565b508061035f8388610817565b935093505050935093915050565b6000806040838503121561038057600080fd5b50508035926020909101359150565b60005b838110156103aa578181015183820152602001610392565b838111156103b9576000848401525b50505050565b600081518084526103d781602086016020860161038f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006040808301818452808651808352606092508286019150828160051b8701016020808a0160005b8481101561052c578984037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa00186528151805173ffffffffffffffffffffffffffffffffffffffff168552610180848201518186880152610495828801826103bf565b915050898201518682038b8801526104ad82826103bf565b915050888201516104c28a88018260ff169052565b506080828101519087015260a0808301519087015260c08083015115159087015260e0808301511515908701526101008083015190870152610120808301519087015261014080830151908701526101609182015191909501529482019490820190600101610432565b50509690960196909652509295945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b604051610180810167ffffffffffffffff811182821017156105c3576105c3610541565b60405290565b805173ffffffffffffffffffffffffffffffffffffffff811681146105ed57600080fd5b919050565b600082601f83011261060357600080fd5b815167ffffffffffffffff8082111561061e5761061e610541565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561066457610664610541565b8160405283815286602085880101111561067d57600080fd5b61068e84602083016020890161038f565b9695505050505050565b805160ff811681146105ed57600080fd5b805180151581146105ed57600080fd5b6000602082840312156106cb57600080fd5b815167ffffffffffffffff808211156106e357600080fd5b9083019061018082860312156106f857600080fd5b61070061059f565b610709836105c9565b815260208301518281111561071d57600080fd5b610729878286016105f2565b60208301525060408301518281111561074157600080fd5b61074d878286016105f2565b60408301525061075f60608401610698565b60608201526080830151608082015260a083015160a082015261078460c084016106a9565b60c082015261079560e084016106a9565b60e08201526101008381015190820152610120808401519082015261014080840151908201526101609283015192810192909252509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610812576108126107d1565b500390565b6000821982111561082a5761082a6107d1565b50019056fea2646970667358221220dba1e3054dad37130e9c5817b37ec9433695e9618d3845d7468d0ed9faed0d3a64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paginateDetailedFasts(uint256,uint256)": {
        "params": {
          "cursor": "The index at which to start.",
          "perPage": "How many records should be returned at most."
        },
        "returns": {
          "_0": "A `address[]` list of values at most `perPage` big.",
          "_1": "A `uint256` index to the next page."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "FastRegistered(address)": {
        "notice": "Emited when a new FAST is registered."
      }
    },
    "kind": "user",
    "methods": {
      "paginateDetailedFasts(uint256,uint256)": {
        "notice": "Paginates the FAST diamonds registered with this Issuer based on a starting cursor and        a number of records per page. It returns rich details for each FAST diamond."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}