{
  "address": "0xCcE6f4cf9a4189ebCCa31B33cFA37c3d6AE19CE4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EthDrained",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EthReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fast",
          "type": "address"
        }
      ],
      "name": "FastRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perPage",
          "type": "uint256"
        }
      ],
      "name": "paginateDetailedFasts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "transferCredits",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isSemiPublic",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasFixedSupply",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "reserveBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "memberCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "governorCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct FastFrontendFacet.Details[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1b0b3400a5f15e0ed12e1aab08ea9d182bbcc1c1f1873f84413a44baa12926e7",
  "receipt": {
    "to": "0x6DF2D25d8C6FD680730ee658b530A05a99BB769a",
    "from": "0x717634cfe06FFAB2CEAA7fcf1b9019813f4B25FE",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "757151",
    "logsBloom": "0x
    "blockHash": "0xe06d60007caf37ef104787ddd57298cb5295bc977f5d5b1e53168a201bc35b27",
    "transactionHash": "0x1b0b3400a5f15e0ed12e1aab08ea9d182bbcc1c1f1873f84413a44baa12926e7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 27634146,
        "transactionHash": "0x1b0b3400a5f15e0ed12e1aab08ea9d182bbcc1c1f1873f84413a44baa12926e7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000717634cfe06ffab2ceaa7fcf1b9019813f4b25fe",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000006519efb934d9080000000000000000000000000000000000000000000000005034c8e46680ce1b0000000000000000000000000000000000000000000007eeb9b65da2b46a1ce50000000000000000000000000000000000000000000000004fcfaef4ad4bf5130000000000000000000000000000000000000000000007eeba1b77926d9ef5ed",
        "logIndex": 0,
        "blockHash": "0xe06d60007caf37ef104787ddd57298cb5295bc977f5d5b1e53168a201bc35b27"
      }
    ],
    "blockNumber": 27634146,
    "cumulativeGasUsed": "757151",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "edc3c8d2f379da73f114f322f7d3a3a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthDrained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fast\",\"type\":\"address\"}],\"name\":\"FastRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perPage\",\"type\":\"uint256\"}],\"name\":\"paginateDetailedFasts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferCredits\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSemiPublic\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasFixedSupply\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reserveBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"memberCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"governorCount\",\"type\":\"uint256\"}],\"internalType\":\"struct FastFrontendFacet.Details[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paginateDetailedFasts(uint256,uint256)\":{\"details\":\"Paginates the FAST diamonds registered with this Issuer based on a starting cursor and        a number of records per page. It returns rich details for each FAST diamond.\",\"params\":{\"cursor\":\"The index at which to start.\",\"perPage\":\"How many records should be returned at most.\"},\"returns\":{\"_0\":\"A `address[]` list of values at most `perPage` big.\",\"_1\":\"A `uint256` index to the next page.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/issuer/IssuerFrontendFacet.sol\":\"IssuerFrontendFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/fast/FastFrontendFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFastAccess.sol';\\nimport './lib/LibFastToken.sol';\\n\\n\\ncontract FastFrontendFacet is AFastFacet {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  // Data structures.\\n\\n  struct Details {\\n    address addr;\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n    uint256 totalSupply;\\n    uint256 transferCredits;\\n    bool isSemiPublic;\\n    bool hasFixedSupply;\\n    uint256 reserveBalance;\\n    uint256 ethBalance;\\n    uint256 memberCount;\\n    uint256 governorCount;\\n  }\\n\\n  struct MemberDetails {\\n    address addr;\\n    uint256 balance;\\n    uint256 ethBalance;\\n    bool isGovernor;\\n  }\\n\\n  struct GovernorDetails {\\n    address addr;\\n    uint256 ethBalance;\\n    bool isMember;\\n  }\\n  // Emitters.\\n\\n  function emitDetailsChanged()\\n      external onlyDiamondFacet {\\n    LibFastAccess.Data storage accessData = LibFastAccess.data();\\n    LibFastToken.Data storage tokenData = LibFastToken.data();\\n    emit DetailsChanged({\\n      memberCount: accessData.memberSet.values.length,\\n      governorCount: accessData.governorSet.values.length,\\n      totalSupply: tokenData.totalSupply,\\n      transferCredits: tokenData.transferCredits,\\n      reserveBalance: tokenData.balances[LibConstants.ZERO_ADDRESS],\\n      ethBalance: payable(address(this)).balance\\n    });\\n  }\\n\\n  // Public functions.\\n\\n  function details()\\n      public view returns(Details memory) {\\n    LibFast.Data storage topStorage = LibFast.data();\\n    LibFastAccess.Data storage accessStorage = LibFastAccess.data();\\n    LibFastToken.Data storage tokenStorage = LibFastToken.data();\\n    return Details({\\n      addr: address(this),\\n      name: tokenStorage.name,\\n      symbol: tokenStorage.symbol,\\n      decimals: tokenStorage.decimals,\\n      totalSupply: tokenStorage.totalSupply,\\n      transferCredits: tokenStorage.transferCredits,\\n      isSemiPublic: topStorage.isSemiPublic,\\n      hasFixedSupply: topStorage.hasFixedSupply,\\n      reserveBalance: tokenStorage.balances[LibConstants.ZERO_ADDRESS],\\n      ethBalance: payable(address(this)).balance,\\n      memberCount: accessStorage.memberSet.values.length,\\n      governorCount: accessStorage.governorSet.values.length\\n    });\\n  }\\n\\n  function detailedMember(address member)\\n      public view returns(MemberDetails memory) {\\n    LibFastToken.Data storage tokenStorage = LibFastToken.data();\\n    LibFastAccess.Data storage accessStorage = LibFastAccess.data();\\n    return MemberDetails({\\n      addr: member,\\n      balance: tokenStorage.balances[member],\\n      ethBalance: member.balance,\\n      isGovernor: accessStorage.governorSet.contains(member)\\n    });\\n  }\\n\\n  function detailedGovernor(address governor)\\n      public view returns(GovernorDetails memory) {\\n    LibFastAccess.Data storage accessStorage = LibFastAccess.data();\\n    return GovernorDetails({\\n      addr: governor,\\n      ethBalance: governor.balance,\\n      isMember: accessStorage.memberSet.contains(governor)\\n    });\\n  }\\n\\n  function paginateDetailedMembers(uint256 index, uint256 perPage)\\n      external view returns(MemberDetails[] memory, uint256) {\\n    LibFastAccess.Data storage accessStorage = LibFastAccess.data();\\n    (address[] memory members, uint256 nextCursor) =\\n      LibPaginate.addresses(accessStorage.memberSet.values, index, perPage);\\n    MemberDetails[] memory values = new MemberDetails[](members.length);\\n    for (uint256 i = 0; i < members.length; ++i) {\\n      values[i] = detailedMember(members[i]);\\n    }\\n    return (values, nextCursor);\\n  }\\n\\n  function paginateDetailedGovernors(uint256 index, uint256 perPage)\\n      external view returns(GovernorDetails[] memory, uint256) {\\n    LibFastAccess.Data storage accessStorage = LibFastAccess.data();\\n    (address[] memory governors, uint256 nextCursor) =\\n      LibPaginate.addresses(accessStorage.governorSet.values, index, perPage);\\n    GovernorDetails[] memory values = new GovernorDetails[](governors.length);\\n    for (uint256 i = 0; i < governors.length; ++i) {\\n      values[i] = detailedGovernor(governors[i]);\\n    }\\n    return (values, nextCursor);\\n  }\\n}\\n\",\"keccak256\":\"0x0d6a32e26b2a5c707de582658b1a9e6659cf3e3863f6a2ff1e497a8ff7427d87\",\"license\":\"MIT\"},\"contracts/fast/lib/AFastFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../../lib/LibConstants.sol';\\nimport '../../lib/LibHelpers.sol';\\nimport '../../lib/LibAddressSet.sol';\\nimport '../../interfaces/IHasMembers.sol';\\nimport '../../interfaces/IHasGovernors.sol';\\nimport '../../interfaces/IHasActiveMembers.sol';\\nimport '../../interfaces/IERC173.sol';\\nimport '../lib/LibFast.sol';\\nimport './IFastEvents.sol';\\n\\n\\n/**\\n* @dev This contract is a group of modifiers that can be used by any facets to guard against\\n*       certain permissions.\\n*/\\nabstract contract AFastFacet is IFastEvents {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Modifiers.\\n\\n  /// @dev Ensures that a method can only be called by another facet of the same diamond.\\n  modifier onlyDiamondFacet() {\\n    require(\\n      msg.sender == address(this),\\n      LibConstants.INTERNAL_METHOD\\n    );\\n    _;\\n  }\\n\\n  /// @dev Ensures that a method can only be called by the owner of this diamond.\\n  modifier onlyDiamondOwner() {\\n    require(\\n      msg.sender == IERC173(address(this)).owner(),\\n      LibConstants.REQUIRES_DIAMOND_OWNERSHIP\\n    );\\n    _;\\n  }\\n\\n  /// @dev Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier onlyDeployer() {\\n    require(\\n      msg.sender == LibConstants.DEPLOYER_CONTRACT,\\n      LibConstants.INTERNAL_METHOD\\n    );\\n    _;\\n  }\\n\\n  /** @dev Ensures that the given address is a member of the Marketplace.\\n   *  @param candidate The address to check.\\n   */\\n  modifier onlyMarketplaceMember(address candidate) {\\n    require(\\n      IHasMembers(LibFast.data().marketplace).isMember(candidate),\\n      LibConstants.REQUIRES_MARKETPLACE_MEMBERSHIP\\n    );\\n    _;\\n  }\\n\\n  /** @dev Ensures a candidate is active in the Marketplace.\\n   *  @param candidate The address to check activation status on.\\n   */\\n  modifier onlyMarketplaceActiveMember(address candidate) {\\n    require(\\n      IHasActiveMembers(LibFast.data().marketplace).isMemberActive(candidate),\\n      LibConstants.REQUIRES_MARKETPLACE_ACTIVE_MEMBER\\n    );\\n    _;\\n  }\\n\\n  /** @dev Ensures that the message sender is a member of the ISSUER.\\n   */\\n  modifier onlyIssuerMember() {\\n    require(\\n      IHasMembers(LibFast.data().issuer).isMember(msg.sender),\\n      LibConstants.REQUIRES_ISSUER_MEMBERSHIP\\n    );\\n    _;\\n  }\\n\\n  /** @dev Ensures that the given address is a governor of the FAST.\\n   *  @param candidate The address to check.\\n   */\\n  modifier onlyGovernor(address candidate) {\\n    require(\\n      IHasGovernors(address(this)).isGovernor(candidate),\\n      LibConstants.REQUIRES_FAST_GOVERNORSHIP\\n    );\\n    _;\\n  }\\n\\n  /** @dev Ensures that the given address is a member of the FAST.\\n   *  @param candidate The address to check.\\n   */\\n  modifier onlyMember(address candidate) {\\n    require(\\n      IHasMembers(address(this)).isMember(candidate),\\n      LibConstants.REQUIRES_FAST_MEMBERSHIP\\n    );\\n    _;\\n  }\\n\\n  /** @dev Ensures address a is different from address b.\\n   *  @param a Address a\\n   *  @param b Address b\\n   */\\n  modifier differentAddresses(address a, address b) {\\n    require(a != b, LibConstants.REQUIRES_DIFFERENT_SENDER_AND_RECIPIENT);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x9daacc49f2758b6d88280646b092897371bba4b5e6136e8bb4427a2b6110cf3d\",\"license\":\"MIT\"},\"contracts/fast/lib/IFastEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\ninterface IFastEvents {\\n  // ETH provisioning events.\\n\\n  /** @dev Emited when someone provisions this Issuer with Eth.\\n   *  @param from The sender of the Eth.\\n   *  @param amount The quantity of Eth, expressed in Wei.\\n   */\\n  event EthReceived(address indexed from, uint256 amount);\\n  /** @dev Emited when Eth is drained from this Issuer.\\n   *  @param to The caller and recipient of the drained Eth.\\n   *  @param amount The quantity of Eth that was drained, expressed in Wei.\\n   */\\n  event EthDrained(address indexed to, uint256 amount);\\n\\n  // IHasMembers.\\n\\n  event MemberAdded(address indexed member);\\n  event MemberRemoved(address indexed member);\\n\\n  // IHasGovernors.\\n\\n  event GovernorAdded(address indexed governor);\\n  event GovernorRemoved(address indexed governor);\\n\\n  // Token related events.\\n\\n  // Issuance related events.\\n  event Minted(uint256 indexed amount, string indexed ref);\\n  event Burnt(uint256 indexed amount, string indexed ref);\\n\\n  // Transfer credits related events.\\n  event TransferCreditsAdded(address indexed issuerMember, uint256 amount);\\n  event TransferCreditsDrained(address indexed issuerMember, uint256 amount);\\n\\n  // ERC20 stuff.\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Disapproval(address indexed owner, address indexed spender);\\n\\n  // General events.\\n\\n  // This is an event that is fired whenever any of some of the FAST parameters\\n  // change, so that the frontend can react to it and refresh the general header\\n  // for that fast as well as the baseball cards in the FASTs list.\\n  event DetailsChanged(\\n    uint256 memberCount,\\n    uint256 governorCount,\\n    uint256 totalSupply,\\n    uint256 transferCredits,\\n    uint256 reserveBalance,\\n    uint256 ethBalance\\n  );\\n}\\n\",\"keccak256\":\"0x88c78543b04186504b265ef0c9af3d2f97ea12bbe41245422c24a8fd803b3382\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\nlibrary LibFast {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Fast.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0x80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705;\\n\\n  // Data structures.\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    /// @dev The internal pointer to the Issuer contract.\\n    address issuer;\\n    /// @dev The internal pointer to the Marketplace contract.\\n    address marketplace;\\n    /// @dev We have to track whether the token facet provides continuous minting or fixed supply.\\n    bool hasFixedSupply;\\n    /// @dev Whether or not this FAST requires to be a member to hold tokens.\\n    bool isSemiPublic;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x256d4e621e78e372066e339ef7ce4933e054cb0c409e3aa1ea1fdebc71677a9d\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\nlibrary LibFastAccess {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Fast.storage.Access'):\\n  bytes32 internal constant STORAGE_SLOT = 0x87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9a;\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    /// @dev We hold the list of the FAST governors in there.\\n    LibAddressSet.Data governorSet;\\n    // @dev The FAST members are held in there.\\n    LibAddressSet.Data memberSet;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x9744c77467b854899d5b5f9beaf4665f461adc8110432d174601a97f00e594ad\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastHistory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\nlibrary LibFastHistory {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Fast.storage.History'):\\n  bytes32 internal constant STORAGE_SLOT = 0x6bc8b61a9dd5fc049ea98027492a801d74e35fdf4d80d7fecd551a16e88fdbb4;\\n\\n  // Storage structures.\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    /// @dev All minting proofs are kept here.\\n    SupplyProof[] supplyProofs;\\n    /// @dev All transfer proofs are kept here.\\n    TransferProof[] transferProofs;\\n    /// @dev All transfers indices involving a given address are kept here.\\n    mapping(address => uint256[]) transferProofInvolvements;\\n  }\\n\\n  // Other structures.\\n\\n  /// @dev A minting operation could either be to mint or unmint tokens.\\n  enum SupplyOp { Mint, Burn }\\n\\n  /// @dev Minting operations are recorded for papertrail. This is the structure that keeps track of them.\\n  struct SupplyProof {\\n    SupplyOp op;\\n    uint256 amount;\\n    uint256 blockNumber;\\n    string ref;\\n  }\\n\\n  /// @dev Every transfer in is recorded. This is the structure that keeps track of them.\\n  struct TransferProof {\\n    address spender;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 blockNumber;\\n    string ref;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xd6af0fc0867dd0259fa6e0797f2b46cffac8a36f0380bf266e3ccf778aeb724c\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibFastToken {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Fast.storage.Token'):\\n  bytes32 internal constant STORAGE_SLOT = 0xb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261;\\n\\n  // Constants.\\n\\n  // ERC1404 Restriction codes.\\n  uint8 internal constant INSUFFICIENT_TRANSFER_CREDITS_CODE = 1;\\n  uint8 internal constant REQUIRES_FAST_MEMBERSHIP_CODE = 2;\\n  uint8 internal constant REQUIRES_MARKETPLACE_MEMBERSHIP_CODE = 3;\\n  uint8 internal constant REQUIRES_DIFFERENT_SENDER_AND_RECIPIENT_CODE = 4;\\n\\n  string internal constant DEFAULT_TRANSFER_REFERENCE = 'Unspecified - via ERC20';\\n\\n  // Data structures.\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    // ERC20 related properties for this FAST Token.\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n    uint256 totalSupply;\\n    // Every time a transfer is executed, the credit decreases by the amount\\n    // of said transfer.\\n    // It becomes impossible to transact once it reaches zero, and must\\n    // be provisioned by an Issuer member.\\n    uint256 transferCredits;\\n    // Our members balances are held here.\\n    mapping(address => uint256) balances;\\n    // Allowances are stored here.\\n    mapping(address => mapping(address => uint256)) allowances;\\n    mapping(address => LibAddressSet.Data) allowancesByOwner;\\n    mapping(address => LibAddressSet.Data) allowancesBySpender;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x34fbf2b9e5e3c6302dda7969f44f804ed21a9f08d55766d4b4b4b92de5afa5c8\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x6ab22e74708905d9c31867461fffbd2e24bc6ad094aa1aab39211d99e296ab32\",\"license\":\"MIT\"},\"contracts/interfaces/IHasActiveMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\ninterface IHasActiveMembers {\\n  function isMemberActive(address member) external view returns(bool);\\n  function deactivateMember(address payable member) external;\\n  function activateMember(address member) external;\\n}\\n\",\"keccak256\":\"0x59859780a1d3a37c35d1dd2516434b170d49d044ef20918aa565703ab8f4a09a\",\"license\":\"MIT\"},\"contracts/interfaces/IHasGovernors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\ninterface IHasGovernors {\\n  function isGovernor(address governor) external view returns(bool);\\n  function governorCount() external view returns(uint256);\\n  function paginateGovernors(uint256 index, uint256 perPage) external view returns(address[] memory, uint256);\\n  function addGovernor(address payable governor) external;\\n  function removeGovernor(address governor) external;\\n}\\n\",\"keccak256\":\"0x87c9cb1f7f829c1197834d12eb05763217b0b56be530f1ab6fe0ded4500b5dd0\",\"license\":\"MIT\"},\"contracts/interfaces/IHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\ninterface IHasMembers {\\n  function isMember(address member) external view returns(bool);\\n  function memberCount() external view returns(uint256);\\n  function paginateMembers(uint256 index, uint256 perPage) external view returns(address[] memory, uint256);\\n  function addMember(address payable member) external;\\n  function removeMember(address member) external;\\n}\\n\",\"keccak256\":\"0x41cfdd80b0ab31a1e0a00f65cae19690aab7917b2c61faa7f7f478771e9a28ae\",\"license\":\"MIT\"},\"contracts/issuer/IssuerFrontendFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../lib/LibPaginate.sol';\\nimport '../fast/FastFrontendFacet.sol';\\nimport './lib/AIssuerFacet.sol';\\nimport './lib/LibIssuer.sol';\\n\\n\\ncontract IssuerFrontendFacet is AIssuerFacet {\\n\\n  // Public functions.\\n\\n  /** @dev Paginates the FAST diamonds registered with this Issuer based on a starting cursor and\\n   *        a number of records per page. It returns rich details for each FAST diamond.\\n   *  @param cursor The index at which to start.\\n   *  @param perPage How many records should be returned at most.\\n   *  @return A `address[]` list of values at most `perPage` big.\\n   *  @return A `uint256` index to the next page.\\n   */\\n  function paginateDetailedFasts(uint256 cursor, uint256 perPage)\\n      external view\\n      returns(FastFrontendFacet.Details[] memory, uint256) {\\n    (address[] memory addresses, uint256 nextCursor) = LibPaginate.addresses(LibIssuer.data().fastSet.values, cursor, perPage);\\n    FastFrontendFacet.Details[] memory fastDetails = new FastFrontendFacet.Details[](addresses.length);\\n    for (uint256 i = 0; i < addresses.length; ++i) {\\n      address fast = addresses[i];\\n      fastDetails[i] = FastFrontendFacet(fast).details();\\n    }\\n    return (fastDetails, nextCursor);\\n  }\\n}\\n\",\"keccak256\":\"0x33651fdc9b3b3b429befa4778e7bcec94f662eeca1d932222d2eb88f63e4518d\",\"license\":\"MIT\"},\"contracts/issuer/lib/AIssuerFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../../lib/LibConstants.sol';\\nimport '../../lib/LibHelpers.sol';\\nimport '../../lib/LibAddressSet.sol';\\nimport '../../interfaces/IERC173.sol';\\nimport '../lib/LibIssuerAccess.sol';\\nimport './IIssuerEvents.sol';\\n\\n\\n/**\\n* @dev This contract is a group of modifiers that can be used by any facets to guard against\\n*       certain permissions.\\n*/\\nabstract contract AIssuerFacet is IIssuerEvents {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Modifiers.\\n\\n  /// @dev Ensures that a method can only be called by another facet of the same diamond.\\n  modifier onlyDiamondFacet() {\\n    require(\\n      msg.sender == address(this),\\n      LibConstants.INTERNAL_METHOD\\n    );\\n    _;\\n  }\\n\\n  /// @dev Ensures that a method can only be called by the owner of this diamond.\\n  modifier onlyDiamondOwner() {\\n    require(\\n      msg.sender == IERC173(address(this)).owner(),\\n      LibConstants.REQUIRES_DIAMOND_OWNERSHIP\\n    );\\n    _;\\n  }\\n\\n  /// @dev Ensures that the given address is a member of the current FAST.\\n  modifier onlyMember(address candidate) {\\n    require(\\n      LibIssuerAccess.data().memberSet.contains(candidate),\\n      LibConstants.REQUIRES_ISSUER_MEMBERSHIP\\n    );\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xfc528a49a213e09230a9807adfa61cff88ea68cd08d497d27a094c3deb983f5e\",\"license\":\"MIT\"},\"contracts/issuer/lib/IIssuerEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\n// WARNING: These events must be maintained 1:1 with LibIssuerEvents!\\n// They also should never be emitted directly, they only help us defining\\n// typescript types!\\ninterface IIssuerEvents {\\n  // ETH provisioning events.\\n\\n  /** @dev Emited when someone provisions this Issuer with Eth.\\n   *  @param from The sender of the Eth.\\n   *  @param amount The quantity of Eth, expressed in Wei.\\n   */\\n  event EthReceived(address indexed from, uint256 amount);\\n  /** @dev Emited when Eth is drained from this Issuer.\\n   *  @param to The caller and recipient of the drained Eth.\\n   *  @param amount The quantity of Eth that was drained, expressed in Wei.\\n   */\\n  event EthDrained(address indexed to, uint256 amount);\\n\\n  // Fast registration events.\\n\\n  /** @dev Emited when a new FAST is registered.\\n   *  @param fast The address of the newly registered FAST diamond.\\n   */\\n  event FastRegistered(address indexed fast);\\n\\n  // IHasMembers.\\n\\n  event MemberAdded(address indexed member);\\n  event MemberRemoved(address indexed member);\\n}\\n\",\"keccak256\":\"0xc276da3d29e167c500731a012609352b06224efc8e5a0016fcbe2ab8cc141d22\",\"license\":\"MIT\"},\"contracts/issuer/lib/LibIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibIssuer {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Issuer.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0xd681d5f1de7bc4b7442c088939dc202585e09699e92a94c9717ace8d0f4fcaa5;\\n\\n  // Data structures.\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    // This is where we keep our list of deployed fast FASTs.\\n    LibAddressSet.Data fastSet;\\n    // We keep track of the FAST symbols that were already used.\\n    mapping(string => address) fastSymbols;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xc90a1bfdebb43e451d28ec2505405642a6526fea88cee1c3d04005d1eb11ae47\",\"license\":\"MIT\"},\"contracts/issuer/lib/LibIssuerAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibIssuerAccess {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Issuer.storage.Access'):\\n  bytes32 internal constant STORAGE_SLOT = 0x3ceaa4d5edf9c96fbd56140abe6389d65a87143d4f11819874ff2fe0ae9574db;\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    // This is where we hold our members data.\\n    LibAddressSet.Data memberSet;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x9605ebf07d01e36b595a50874cca80af5da88819625b2ec33aca959e9998b2fc\",\"license\":\"MIT\"},\"contracts/lib/LibAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\nlibrary LibAddressSet {\\n  /// @dev Represents a list of addresses.\\n  struct Data {\\n    mapping(address => uint256) indices;\\n    address[] values;\\n  }\\n\\n  /**\\n   * @dev Adds an item into the storage set. If the address already exists in the\\n   *      set, the function reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be added.\\n   */\\n  function add(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && exists) { return; }\\n    require(!exists, 'Address already in set');\\n    d.indices[key] = d.values.length;\\n    d.values.push(key);\\n  }\\n\\n  /**\\n   * @dev Removes an item from the storage set. If the address does not exist in the\\n   *      set, the function reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be removed.\\n   */\\n  function remove(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && !exists) { return; }\\n    require(exists, 'Address does not exist in set');\\n    uint256 lastIndex = d.values.length - 1;\\n    address keyToMove = d.values[lastIndex];\\n    uint256 idxToReplace = d.indices[key];\\n    d.indices[keyToMove] = idxToReplace;\\n    d.values[idxToReplace] = keyToMove;\\n    delete d.indices[key];\\n    d.values.pop();\\n  }\\n\\n  /**\\n   * @dev Tests whether or not a given item already exists in the set.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to test.\\n   * @return a boolean.\\n   */\\n  function contains(Data storage d, address key)\\n      internal view returns(bool) {\\n    return d.values.length == 0\\n      ? false\\n      : d.values[d.indices[key]] == key;\\n  }\\n}\\n\",\"keccak256\":\"0x7daf050d0864e085c227521b1157b4ea652fe75ea7e10f685027b42d6e1caf87\",\"license\":\"MIT\"},\"contracts/lib/LibConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\nlibrary LibConstants {\\n  address internal constant ZERO_ADDRESS = address(0);\\n  address internal constant DEPLOYER_CONTRACT = 0x6DF2D25d8C6FD680730ee658b530A05a99BB769a;\\n\\n  string internal constant ALREADY_INITIALIZED = 'Already initialized';\\n  string internal constant INTERNAL_METHOD = 'Internal method';\\n  string internal constant REQUIRES_DIAMOND_OWNERSHIP = 'Requires diamond ownership';\\n  string internal constant REQUIRES_FAST_CONTRACT_CALLER = 'Caller must be a FAST contract';\\n\\n  string internal constant REQUIRES_ISSUER_MEMBERSHIP = 'Requires Issuer membership';\\n  string internal constant REQUIRES_MARKETPLACE_MEMBERSHIP = 'Requires Marketplace membership';\\n  string internal constant REQUIRES_MARKETPLACE_ACTIVE_MEMBER = 'Requires active Marketplace member';\\n  string internal constant REQUIRES_MARKETPLACE_DEACTIVATED_MEMBER = 'Requires a deactivated Marketplace member';\\n\\n  string internal constant REQUIRES_FAST_GOVERNORSHIP = 'Requires FAST governorship';\\n  string internal constant REQUIRES_FAST_MEMBERSHIP = 'Requires FAST membership';\\n  string internal constant REQUIRES_NO_FAST_MEMBERSHIPS = 'Member still part of at least one FAST';\\n\\n  string internal constant DUPLICATE_ENTRY = 'Duplicate entry';\\n  string internal constant UNSUPPORTED_OPERATION = 'Unsupported operation';\\n  string internal constant REQUIRES_NON_ZERO_ADDRESS = 'Requires non-zero address';\\n  string internal constant REQUIRES_NON_CONTRACT_ADDR = 'Address cannot be a contract';\\n\\n  string internal constant REQUIRES_CONTINUOUS_SUPPLY = 'Requires continuous supply';\\n  string internal constant INSUFFICIENT_FUNDS = 'Insufficient token balance';\\n  string internal constant INSUFFICIENT_ALLOWANCE = 'Insufficient allowance';\\n  string internal constant INSUFFICIENT_TRANSFER_CREDITS = 'Insufficient transfer credits';\\n  string internal constant REQUIRES_DIFFERENT_SENDER_AND_RECIPIENT = 'Requires different sender and recipient';\\n  string internal constant UNKNOWN_RESTRICTION_CODE = 'Unknown restriction code';\\n}\\n\",\"keccak256\":\"0x6d1434c3486841d115794d0e31d13ef5bbb7babe42bfae164c51ea0fd59753fd\",\"license\":\"MIT\"},\"contracts/lib/LibHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary LibHelpers {\\n}\\n\",\"keccak256\":\"0x44e3992ae1f6a30bb38f404596fda43b2ff7a6b6d62620d14cd3656bea4b9ded\",\"license\":\"MIT\"},\"contracts/lib/LibPaginate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../fast/lib/LibFastHistory.sol';\\n\\n\\nlibrary LibPaginate {\\n  function addresses(address[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(address[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      address[] memory values = new address[](length);\\n      for (uint256 i = 0; i < length; i++) {\\n        values[i] = collection[cursor + i];\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function uint256s(uint256[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(uint256[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      uint256[] memory values = new uint256[](length);\\n      for (uint256 i = 0; i < length; i++) {\\n        values[i] = collection[cursor + i];\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function supplyProofs(LibFastHistory.SupplyProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.SupplyProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.SupplyProof[] memory values = new LibFastHistory.SupplyProof[](length);\\n      for (uint256 i = 0; i < length; i++) {\\n        values[i] = collection[cursor + i];\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function transferProofs(LibFastHistory.TransferProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.TransferProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.TransferProof[] memory values = new LibFastHistory.TransferProof[](length);\\n      for (uint256 i = 0; i < length; i++) {\\n        values[i] = collection[cursor + i];\\n      }\\n      return (values, cursor + length);\\n  }\\n}\",\"keccak256\":\"0xedbf24531aa1b21a17a7962b2053fe1bd81ddf9e8869f508f14f7fb9087631d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610cc3806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c631108b14610030575b600080fd5b61004a60048036038101906100459190610707565b610061565b60405161005892919061095b565b60405180910390f35b6060600080600061008061007361023e565b6001016001018787610266565b915091506000825167ffffffffffffffff8111156100c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561010057816020015b6100ed610429565b8152602001906001900390816100e55790505b50905060005b835181101561022d57600084828151811061014a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508073ffffffffffffffffffffffffffffffffffffffff1663565974d36040518163ffffffff1660e01b815260040160006040518083038186803b15801561019a57600080fd5b505afa1580156101ae573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906101d791906106c6565b838381518110610210577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250508061022690610b79565b9050610106565b508082945094505050509250929050565b60007fd681d5f1de7bc4b7442c088939dc202585e09699e92a94c9717ace8d0f4fcaa5905090565b606060008084868054905061027b9190610a8c565b84116102875783610298565b8486805490506102979190610a8c565b5b905060008167ffffffffffffffff8111156102dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561030a5781602001602082028036833780820191505090505b50905060005b8281101561040d578781886103259190610a36565b8154811061035c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181106103c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061040590610b79565b915050610310565b5080828761041b9190610a36565b935093505050935093915050565b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600060ff1681526020016000815260200160008152602001600015158152602001600015158152602001600081526020016000815260200160008152602001600081525090565b60006104ba6104b5846109b0565b61098b565b9050828152602081018484840111156104d257600080fd5b6104dd848285610b15565b509392505050565b6000815190506104f481610c31565b92915050565b60008151905061050981610c48565b92915050565b600082601f83011261052057600080fd5b81516105308482602086016104a7565b91505092915050565b6000610180828403121561054c57600080fd5b61055761018061098b565b90506000610567848285016104e5565b600083015250602082015167ffffffffffffffff81111561058757600080fd5b6105938482850161050f565b602083015250604082015167ffffffffffffffff8111156105b357600080fd5b6105bf8482850161050f565b60408301525060606105d3848285016106b1565b60608301525060806105e78482850161069c565b60808301525060a06105fb8482850161069c565b60a08301525060c061060f848285016104fa565b60c08301525060e0610623848285016104fa565b60e0830152506101006106388482850161069c565b6101008301525061012061064e8482850161069c565b610120830152506101406106648482850161069c565b6101408301525061016061067a8482850161069c565b6101608301525092915050565b60008135905061069681610c5f565b92915050565b6000815190506106ab81610c5f565b92915050565b6000815190506106c081610c76565b92915050565b6000602082840312156106d857600080fd5b600082015167ffffffffffffffff8111156106f257600080fd5b6106fe84828501610539565b91505092915050565b6000806040838503121561071a57600080fd5b600061072885828601610687565b925050602061073985828601610687565b9150509250929050565b600061074f8383610823565b905092915050565b61076081610ac0565b82525050565b6000610771826109f1565b61077b8185610a14565b93508360208202850161078d856109e1565b8060005b858110156107c957848403895281516107aa8582610743565b94506107b583610a07565b925060208a01995050600181019050610791565b50829750879550505050505092915050565b6107e481610ad2565b82525050565b60006107f5826109fc565b6107ff8185610a25565b935061080f818560208601610b15565b61081881610c20565b840191505092915050565b60006101808301600083015161083c6000860182610757565b506020830151848203602086015261085482826107ea565b9150506040830151848203604086015261086e82826107ea565b9150506060830151610883606086018261094c565b506080830151610896608086018261092e565b5060a08301516108a960a086018261092e565b5060c08301516108bc60c08601826107db565b5060e08301516108cf60e08601826107db565b506101008301516108e461010086018261092e565b506101208301516108f961012086018261092e565b5061014083015161090e61014086018261092e565b5061016083015161092361016086018261092e565b508091505092915050565b61093781610afe565b82525050565b61094681610afe565b82525050565b61095581610b08565b82525050565b600060408201905081810360008301526109758185610766565b9050610984602083018461093d565b9392505050565b60006109956109a6565b90506109a18282610b48565b919050565b6000604051905090565b600067ffffffffffffffff8211156109cb576109ca610bf1565b5b6109d482610c20565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610a4182610afe565b9150610a4c83610afe565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a8157610a80610bc2565b5b828201905092915050565b6000610a9782610afe565b9150610aa283610afe565b925082821015610ab557610ab4610bc2565b5b828203905092915050565b6000610acb82610ade565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610b33578082015181840152602081019050610b18565b83811115610b42576000848401525b50505050565b610b5182610c20565b810181811067ffffffffffffffff82111715610b7057610b6f610bf1565b5b80604052505050565b6000610b8482610afe565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610bb757610bb6610bc2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610c3a81610ac0565b8114610c4557600080fd5b50565b610c5181610ad2565b8114610c5c57600080fd5b50565b610c6881610afe565b8114610c7357600080fd5b50565b610c7f81610b08565b8114610c8a57600080fd5b5056fea2646970667358221220145f1b8e7a48b81d67108e9ac7ec875a30d2377b1225443221d1984bb6f1d54264736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c631108b14610030575b600080fd5b61004a60048036038101906100459190610707565b610061565b60405161005892919061095b565b60405180910390f35b6060600080600061008061007361023e565b6001016001018787610266565b915091506000825167ffffffffffffffff8111156100c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561010057816020015b6100ed610429565b8152602001906001900390816100e55790505b50905060005b835181101561022d57600084828151811061014a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508073ffffffffffffffffffffffffffffffffffffffff1663565974d36040518163ffffffff1660e01b815260040160006040518083038186803b15801561019a57600080fd5b505afa1580156101ae573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906101d791906106c6565b838381518110610210577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250508061022690610b79565b9050610106565b508082945094505050509250929050565b60007fd681d5f1de7bc4b7442c088939dc202585e09699e92a94c9717ace8d0f4fcaa5905090565b606060008084868054905061027b9190610a8c565b84116102875783610298565b8486805490506102979190610a8c565b5b905060008167ffffffffffffffff8111156102dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561030a5781602001602082028036833780820191505090505b50905060005b8281101561040d578781886103259190610a36565b8154811061035c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181106103c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061040590610b79565b915050610310565b5080828761041b9190610a36565b935093505050935093915050565b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600060ff1681526020016000815260200160008152602001600015158152602001600015158152602001600081526020016000815260200160008152602001600081525090565b60006104ba6104b5846109b0565b61098b565b9050828152602081018484840111156104d257600080fd5b6104dd848285610b15565b509392505050565b6000815190506104f481610c31565b92915050565b60008151905061050981610c48565b92915050565b600082601f83011261052057600080fd5b81516105308482602086016104a7565b91505092915050565b6000610180828403121561054c57600080fd5b61055761018061098b565b90506000610567848285016104e5565b600083015250602082015167ffffffffffffffff81111561058757600080fd5b6105938482850161050f565b602083015250604082015167ffffffffffffffff8111156105b357600080fd5b6105bf8482850161050f565b60408301525060606105d3848285016106b1565b60608301525060806105e78482850161069c565b60808301525060a06105fb8482850161069c565b60a08301525060c061060f848285016104fa565b60c08301525060e0610623848285016104fa565b60e0830152506101006106388482850161069c565b6101008301525061012061064e8482850161069c565b610120830152506101406106648482850161069c565b6101408301525061016061067a8482850161069c565b6101608301525092915050565b60008135905061069681610c5f565b92915050565b6000815190506106ab81610c5f565b92915050565b6000815190506106c081610c76565b92915050565b6000602082840312156106d857600080fd5b600082015167ffffffffffffffff8111156106f257600080fd5b6106fe84828501610539565b91505092915050565b6000806040838503121561071a57600080fd5b600061072885828601610687565b925050602061073985828601610687565b9150509250929050565b600061074f8383610823565b905092915050565b61076081610ac0565b82525050565b6000610771826109f1565b61077b8185610a14565b93508360208202850161078d856109e1565b8060005b858110156107c957848403895281516107aa8582610743565b94506107b583610a07565b925060208a01995050600181019050610791565b50829750879550505050505092915050565b6107e481610ad2565b82525050565b60006107f5826109fc565b6107ff8185610a25565b935061080f818560208601610b15565b61081881610c20565b840191505092915050565b60006101808301600083015161083c6000860182610757565b506020830151848203602086015261085482826107ea565b9150506040830151848203604086015261086e82826107ea565b9150506060830151610883606086018261094c565b506080830151610896608086018261092e565b5060a08301516108a960a086018261092e565b5060c08301516108bc60c08601826107db565b5060e08301516108cf60e08601826107db565b506101008301516108e461010086018261092e565b506101208301516108f961012086018261092e565b5061014083015161090e61014086018261092e565b5061016083015161092361016086018261092e565b508091505092915050565b61093781610afe565b82525050565b61094681610afe565b82525050565b61095581610b08565b82525050565b600060408201905081810360008301526109758185610766565b9050610984602083018461093d565b9392505050565b60006109956109a6565b90506109a18282610b48565b919050565b6000604051905090565b600067ffffffffffffffff8211156109cb576109ca610bf1565b5b6109d482610c20565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610a4182610afe565b9150610a4c83610afe565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a8157610a80610bc2565b5b828201905092915050565b6000610a9782610afe565b9150610aa283610afe565b925082821015610ab557610ab4610bc2565b5b828203905092915050565b6000610acb82610ade565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610b33578082015181840152602081019050610b18565b83811115610b42576000848401525b50505050565b610b5182610c20565b810181811067ffffffffffffffff82111715610b7057610b6f610bf1565b5b80604052505050565b6000610b8482610afe565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610bb757610bb6610bc2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610c3a81610ac0565b8114610c4557600080fd5b50565b610c5181610ad2565b8114610c5c57600080fd5b50565b610c6881610afe565b8114610c7357600080fd5b50565b610c7f81610b08565b8114610c8a57600080fd5b5056fea2646970667358221220145f1b8e7a48b81d67108e9ac7ec875a30d2377b1225443221d1984bb6f1d54264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paginateDetailedFasts(uint256,uint256)": {
        "details": "Paginates the FAST diamonds registered with this Issuer based on a starting cursor and        a number of records per page. It returns rich details for each FAST diamond.",
        "params": {
          "cursor": "The index at which to start.",
          "perPage": "How many records should be returned at most."
        },
        "returns": {
          "_0": "A `address[]` list of values at most `perPage` big.",
          "_1": "A `uint256` index to the next page."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}