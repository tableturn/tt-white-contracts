{
  "address": "0x899Edbd4B0C29900D3Bf6c7b7284DcAd88Ca7e56",
  "abi": [
    {
      "inputs": [],
      "name": "InternalMethod",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "Burnt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "memberCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "governorCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferCredits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethBalance",
          "type": "uint256"
        }
      ],
      "name": "DetailsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Disapproval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "GovernorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "GovernorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuerMember",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferCreditsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuerMember",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferCreditsDrained",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "detailedGovernor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "ethBalance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isMember",
              "type": "bool"
            }
          ],
          "internalType": "struct FastFrontendFacet.GovernorDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "detailedMember",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethBalance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isGovernor",
              "type": "bool"
            }
          ],
          "internalType": "struct FastFrontendFacet.MemberDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "details",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "transferCredits",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isSemiPublic",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasFixedSupply",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "reserveBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "memberCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "governorCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct FastFrontendFacet.Details",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emitDetailsChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perPage",
          "type": "uint256"
        }
      ],
      "name": "paginateDetailedGovernors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "ethBalance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isMember",
              "type": "bool"
            }
          ],
          "internalType": "struct FastFrontendFacet.GovernorDetails[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perPage",
          "type": "uint256"
        }
      ],
      "name": "paginateDetailedMembers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethBalance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isGovernor",
              "type": "bool"
            }
          ],
          "internalType": "struct FastFrontendFacet.MemberDetails[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x579322b584a3fe20e71d6ddaa44c0ba5398d8cfbda8840664c9980f14acfd48e",
  "receipt": {
    "to": "0x6DF2D25d8C6FD680730ee658b530A05a99BB769a",
    "from": "0x717634cfe06FFAB2CEAA7fcf1b9019813f4B25FE",
    "contractAddress": null,
    "transactionIndex": 15,
    "gasUsed": "910051",
    "logsBloom": "0x
    "blockHash": "0x82a9a185d0a685c87ac62baeabc8619072f86039eaebbf67cad01889ea87e9a8",
    "transactionHash": "0x579322b584a3fe20e71d6ddaa44c0ba5398d8cfbda8840664c9980f14acfd48e",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 28494394,
        "transactionHash": "0x579322b584a3fe20e71d6ddaa44c0ba5398d8cfbda8840664c9980f14acfd48e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000717634cfe06ffab2ceaa7fcf1b9019813f4b25fe",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000004d987a3dfad000000000000000000000000000000000000000000000000003708ae76b8a3620b00000000000000000000000000000000000000000000161d49ddd43ef057cbbf0000000000000000000000000000000000000000000000003703d4ef14c3b50b00000000000000000000000000000000000000000000161d49e2adc6943778bf",
        "logIndex": 42,
        "blockHash": "0x82a9a185d0a685c87ac62baeabc8619072f86039eaebbf67cad01889ea87e9a8"
      }
    ],
    "blockNumber": 28494394,
    "cumulativeGasUsed": "2216834",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "57fc878374d054c3aeb94e41cf27b966",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InternalMethod\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"memberCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"governorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferCredits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"}],\"name\":\"DetailsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Disapproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"GovernorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"GovernorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuerMember\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferCreditsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuerMember\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferCreditsDrained\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"detailedGovernor\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMember\",\"type\":\"bool\"}],\"internalType\":\"struct FastFrontendFacet.GovernorDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"detailedMember\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isGovernor\",\"type\":\"bool\"}],\"internalType\":\"struct FastFrontendFacet.MemberDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"details\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferCredits\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSemiPublic\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasFixedSupply\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reserveBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"memberCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"governorCount\",\"type\":\"uint256\"}],\"internalType\":\"struct FastFrontendFacet.Details\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitDetailsChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perPage\",\"type\":\"uint256\"}],\"name\":\"paginateDetailedGovernors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMember\",\"type\":\"bool\"}],\"internalType\":\"struct FastFrontendFacet.GovernorDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perPage\",\"type\":\"uint256\"}],\"name\":\"paginateDetailedMembers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isGovernor\",\"type\":\"bool\"}],\"internalType\":\"struct FastFrontendFacet.MemberDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"detailedGovernor(address)\":{\"returns\":{\"_0\":\"GovernorDetails See: `GovernorDetails`.\"}},\"detailedMember(address)\":{\"returns\":{\"_0\":\"A FAST member's details, see `MemberDetails`.\"}},\"details()\":{\"returns\":{\"_0\":\"The details for the current FAST, see `Details`.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"See `ERC20.Approval`.\"},\"Burnt(uint256,string)\":{\"notice\":\"Emited whenever an burning happens in a FAST.\"},\"DetailsChanged(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"This is an event that is fired whenever any of some of the FAST parameters change, so that the frontend can react to it and refresh the general header for that fast as well as the baseball cards in the FASTs list.\"},\"Disapproval(address,address,uint256)\":{\"notice\":\"See `ERC20.Disapproval`.\"},\"GovernorAdded(address)\":{\"notice\":\"Emited when a governor is added to the implementing contract.\"},\"GovernorRemoved(address)\":{\"notice\":\"Emited when a governor is removed to the implementing contract.\"},\"MemberAdded(address)\":{\"notice\":\"Emited when a member is added to the implementing contract.\"},\"MemberRemoved(address)\":{\"notice\":\"Emited when a member is removed to the implementing contract.\"},\"Minted(uint256,string)\":{\"notice\":\"Emited whenever an issuance happens in a FAST.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"See `ERC20.Transfer`.\"},\"TransferCreditsAdded(address,uint256)\":{\"notice\":\"Emited whenever transfer credits increase inside a FAST.\"},\"TransferCreditsDrained(address,uint256)\":{\"notice\":\"Emited whenever transfer credits are drained inside a FAST.\"}},\"kind\":\"user\",\"methods\":{\"detailedGovernor(address)\":{\"notice\":\"Gets detailed governor details.\"},\"detailedMember(address)\":{\"notice\":\"Gets detailed member details.\"},\"details()\":{\"notice\":\"Gets the details of a FAST.\"},\"emitDetailsChanged()\":{\"notice\":\"Called by diamond facets, signals that FAST details may have changed.  Business logic: - Modifiers:   - Requires the caller to be another facet of the diamond. Emits `DetailsChanged`, see `IFastEvents.DetailsChanged`\"}},\"notice\":\"A facet dedicated to view / UI only methods. This facet should never hold any method that is not either `pure` or `view`, except to emit events.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fast/FastFrontendFacet.sol\":\"FastFrontendFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/fast/FastFrontendFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFastAccess.sol';\\nimport './lib/LibFastToken.sol';\\n\\n\\n/**\\n * @notice A facet dedicated to view / UI only methods. This facet should never hold any method that\\n * is not either `pure` or `view`, except to emit events.\\n */\\ncontract FastFrontendFacet is AFastFacet {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  // Data structures.\\n\\n  /**\\n   * @notice This struct groups the common attributes of a FAST.\\n   * @dev This struct shouldn't be used in internal storage.\\n   */\\n  struct Details {\\n    /// @notice The `address` of the FAST.\\n    address addr;\\n    /// @notice The `name` of the FAST (ERC20).\\n    string name;\\n    /// @notice The `symbol` of the FAST (ERC20).\\n    string symbol;\\n    /// @notice The `decimals` of the FAST (ERC20).\\n    uint8 decimals;\\n    /// @notice The `totalSupply` of the FAST (ERC20).\\n    uint256 totalSupply;\\n    /// @notice The number of transfer credits the FAST currently has.\\n    uint256 transferCredits;\\n    /// @notice Whether the FAST is semi public or not.\\n    bool isSemiPublic;\\n    /// @notice Whether the FAST has a fixed supply or continious.\\n    bool hasFixedSupply;\\n    /// @notice The reserve balance.\\n    uint256 reserveBalance;\\n    /// @notice The Ether balance.\\n    uint256 ethBalance;\\n    /// @notice The number of members the FAST has.\\n    uint256 memberCount;\\n    /// @notice The number of governors for the FAST.\\n    uint256 governorCount;\\n  }\\n\\n  /**\\n   * @notice Member level details.\\n   * @dev This struct shouldn't be used in internal storage.\\n   */\\n  struct MemberDetails {\\n    /// @notice The Member's address.\\n    address addr;\\n    /// @notice The Member's balance.\\n    uint256 balance;\\n    uint256 ethBalance;\\n    /// @notice Whether the Member is also a Governor.\\n    bool isGovernor;\\n  }\\n\\n  /**\\n   * @notice Governor level details.\\n   * @dev Note that **this struct shouldn't be used in internal storage**.\\n   */\\n  struct GovernorDetails {\\n    /// @notice The Governor's address.\\n    address addr;\\n    uint256 ethBalance;\\n    /// @notice Whether the Governor is also a Member.\\n    bool isMember;\\n  }\\n\\n  // Emitters.\\n\\n  /**\\n   * @notice Called by diamond facets, signals that FAST details may have changed.\\n   * \\n   * Business logic:\\n   * - Modifiers:\\n   *   - Requires the caller to be another facet of the diamond.\\n   * Emits `DetailsChanged`, see `IFastEvents.DetailsChanged`\\n   */\\n  function emitDetailsChanged()\\n      external onlyDiamondFacet {\\n    LibFastAccess.Data storage accessData = LibFastAccess.data();\\n    LibFastToken.Data storage tokenData = LibFastToken.data();\\n    emit DetailsChanged({\\n      memberCount: accessData.memberSet.values.length,\\n      governorCount: accessData.governorSet.values.length,\\n      totalSupply: tokenData.totalSupply,\\n      transferCredits: tokenData.transferCredits,\\n      reserveBalance: tokenData.balances[LibConstants.ZERO_ADDRESS],\\n      ethBalance: payable(address(this)).balance\\n    });\\n  }\\n\\n  // Public functions.\\n\\n  /**\\n   * @notice Gets the details of a FAST.\\n   * @return The details for the current FAST, see `Details`.\\n   */\\n  function details()\\n      public view returns(Details memory) {\\n    LibFast.Data storage topStorage = LibFast.data();\\n    LibFastAccess.Data storage accessStorage = LibFastAccess.data();\\n    LibFastToken.Data storage tokenStorage = LibFastToken.data();\\n    return Details({\\n      addr: address(this),\\n      name: tokenStorage.name,\\n      symbol: tokenStorage.symbol,\\n      decimals: tokenStorage.decimals,\\n      totalSupply: tokenStorage.totalSupply,\\n      transferCredits: tokenStorage.transferCredits,\\n      isSemiPublic: topStorage.isSemiPublic,\\n      hasFixedSupply: topStorage.hasFixedSupply,\\n      reserveBalance: tokenStorage.balances[LibConstants.ZERO_ADDRESS],\\n      ethBalance: payable(address(this)).balance,\\n      memberCount: accessStorage.memberSet.values.length,\\n      governorCount: accessStorage.governorSet.values.length\\n    });\\n  }\\n\\n  /**\\n   * @notice Gets detailed member details.\\n   * @return A FAST member's details, see `MemberDetails`.\\n   */\\n  function detailedMember(address member)\\n      public view returns(MemberDetails memory) {\\n    return MemberDetails({\\n      addr: member,\\n      balance: LibFastToken.data().balances[member],\\n      ethBalance: member.balance,\\n      isGovernor: LibFastAccess.data().governorSet.contains(member)\\n    });\\n  }\\n\\n  /**\\n   * @notice Gets detailed governor details.\\n   * @return GovernorDetails See: `GovernorDetails`.\\n   */\\n  function detailedGovernor(address governor)\\n      public view returns(GovernorDetails memory) {\\n    return GovernorDetails({\\n      addr: governor,\\n      ethBalance: governor.balance,\\n      isMember: LibFastAccess.data().memberSet.contains(governor)\\n    });\\n  }\\n\\n  function paginateDetailedMembers(uint256 index, uint256 perPage)\\n      external view returns(MemberDetails[] memory, uint256) {\\n    (address[] memory members, uint256 nextCursor) =\\n      LibPaginate.addresses(LibFastAccess.data().memberSet.values, index, perPage);\\n    MemberDetails[] memory values = new MemberDetails[](members.length);\\n    uint256 length = members.length;\\n    for (uint256 i = 0; i < length;) {\\n      values[i] = detailedMember(members[i]);\\n      unchecked { ++i; }\\n    }\\n    return (values, nextCursor);\\n  }\\n\\n  function paginateDetailedGovernors(uint256 index, uint256 perPage)\\n      external view returns(GovernorDetails[] memory, uint256) {\\n    (address[] memory governors, uint256 nextCursor) =\\n      LibPaginate.addresses(LibFastAccess.data().governorSet.values, index, perPage);\\n    GovernorDetails[] memory values = new GovernorDetails[](governors.length);\\n    uint256 length =  governors.length;\\n    for (uint256 i = 0; i < length;) {\\n      values[i] = detailedGovernor(governors[i]);\\n      unchecked { ++i; }\\n    }\\n    return (values, nextCursor);\\n  }\\n}\\n\",\"keccak256\":\"0xbf625672b665e07d7ca3b1c9771962c8945dc87caa034a6c5c7a3d3b2d39b9b8\",\"license\":\"MIT\"},\"contracts/fast/lib/AFastFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibConstants.sol';\\nimport '../../lib/LibHelpers.sol';\\nimport '../../lib/LibAddressSet.sol';\\nimport '../../interfaces/ICustomErrors.sol';\\nimport '../../interfaces/IHasMembers.sol';\\nimport '../../interfaces/IHasGovernors.sol';\\nimport '../../interfaces/IHasActiveMembers.sol';\\nimport '../../interfaces/IERC173.sol';\\nimport '../lib/LibFast.sol';\\nimport './IFastEvents.sol';\\n\\n\\n/**\\n * @title Abstract FAST helper contract.\\n * @notice This abstract contract encapsulates modifiers allowing inheriting facets to guard against\\n * certain permissions.\\n */\\nabstract contract AFastFacet is IFastEvents {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Modifiers.\\n\\n  /// @notice Ensures that a method can only be called by another facet of the same diamond.\\n  modifier onlyDiamondFacet() {\\n    if (msg.sender != address(this)) {\\n      revert ICustomErrors.InternalMethod();\\n    }\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the owner of this diamond.\\n  modifier onlyDiamondOwner() {\\n    if (msg.sender != IERC173(address(this)).owner()) {\\n      revert ICustomErrors.RequiresDiamondOwnership(msg.sender);\\n    }\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier onlyDeployer() {\\n    if (msg.sender != LibConstants.DEPLOYER_CONTRACT) {\\n      revert ICustomErrors.InternalMethod();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a member of the Marketplace.\\n   * @param candidate The address to check.\\n   */\\n  modifier onlyMarketplaceMember(address candidate) {\\n    if (!IHasMembers(LibFast.data().marketplace).isMember(candidate)) {\\n      revert ICustomErrors.RequiresMarketplaceMembership(candidate);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures a candidate is an active member of the Marketplace.\\n   * @param candidate The address to check.\\n   */\\n  modifier onlyMarketplaceActiveMember(address candidate) {\\n    if (!IHasActiveMembers(LibFast.data().marketplace).isMemberActive(candidate)) {\\n      revert ICustomErrors.RequiresMarketplaceActiveMember(candidate);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the message sender is a member of the Issuer.\\n   */\\n  modifier onlyIssuerMember() {\\n    if (!IHasMembers(LibFast.data().issuer).isMember(msg.sender)) {\\n      revert ICustomErrors.RequiresIssuerMembership(msg.sender);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a governor of the FAST.\\n   * @param candidate The address to check.\\n   */\\n  modifier onlyGovernor(address candidate) {\\n    if (!IHasGovernors(address(this)).isGovernor(candidate)) {\\n      revert ICustomErrors.RequiresFastGovernorship(candidate);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a member of the FAST.\\n   * @param candidate The address to check.\\n   */\\n  modifier onlyMember(address candidate) {\\n    if (!IHasMembers(address(this)).isMember(candidate)) {\\n      revert ICustomErrors.RequiresFastMembership(candidate);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures address `a` and `b` are different.\\n   * @param a Address a\\n   * @param b Address b\\n   */\\n  modifier differentAddresses(address a, address b) {\\n    if (a == b) {\\n      revert ICustomErrors.RequiresDifferentSenderAndRecipient(a);\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xdb1e880bdefc806076dadc031fde99663b71c69f5ca0e1d7b60b99a9dec2a55a\",\"license\":\"MIT\"},\"contracts/fast/lib/IFastEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/**\\n * @title FAST events inventory.\\n * @notice An interface allowing to use events within the Diamond pattern without name colisions.\\n * @dev The idea is that as several facets can emit the same events, we don't want to have to re-declare\\n * the same event several time. This interface is a per-diamond central place for such event declaration.\\n */\\ninterface IFastEvents {\\n  // IHasMembers.\\n\\n  /**\\n   * @notice Emited when a member is added to the implementing contract.\\n   * @param member is the address of the added member.\\n   */\\n  event MemberAdded(address indexed member);\\n  /**\\n   * @notice Emited when a member is removed to the implementing contract.\\n   * @param member is the address of the removed member.\\n   */\\n  event MemberRemoved(address indexed member);\\n\\n  // IHasGovernors.\\n\\n  /**\\n   * @notice Emited when a governor is added to the implementing contract.\\n   * @param governor is the address of the added governor.\\n   */\\n  event GovernorAdded(address indexed governor);\\n  /**\\n   * @notice Emited when a governor is removed to the implementing contract.\\n   * @param governor is the address of the removed member.\\n   */\\n  event GovernorRemoved(address indexed governor);\\n\\n  // Issuance related events.\\n  /**\\n   * @notice Emited whenever an issuance happens in a FAST.\\n   * @param amount is the amount of tokens that have been minted.\\n   * @param ref is the reference associated with the minting operation.\\n   */\\n  event Minted(uint256 indexed amount, string indexed ref);\\n  /**\\n   * @notice Emited whenever an burning happens in a FAST.\\n   * @param amount is the amount of tokens that have been burnt.\\n   * @param ref is the reference associated with the burning operation.\\n   */\\n  event Burnt(uint256 indexed amount, string indexed ref);\\n\\n  // Transfer credits related events.\\n  /**\\n   * @notice Emited whenever transfer credits increase inside a FAST.\\n   * @param issuerMember is the address of the Issuer member who performed the operation.\\n   * @param amount is the number of issued transfer credits.\\n   */\\n  event TransferCreditsAdded(address indexed issuerMember, uint256 amount);\\n  /**\\n   * @notice Emited whenever transfer credits are drained inside a FAST.\\n   * @param issuerMember is the address of the Issuer member who performed the operation.\\n   * @param amount is the number of drained transfer credits.\\n   */\\n  event TransferCreditsDrained(address indexed issuerMember, uint256 amount);\\n\\n  // ERC20 stuff.\\n\\n  /// @notice See `ERC20.Transfer`.\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  /// @notice See `ERC20.Approval`.\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  /// @notice See `ERC20.Disapproval`.\\n  event Disapproval(address indexed owner, address indexed spender, uint256 value);\\n\\n  // General events.\\n\\n  /**\\n   * @notice This is an event that is fired whenever any of some of the FAST parameters\\n   * change, so that the frontend can react to it and refresh the general header\\n   * for that fast as well as the baseball cards in the FASTs list.\\n   * @param memberCount is the number of members in the FAST.\\n   * @param governorCount is the number of governors in the FAST.\\n   * @param totalSupply is the amount of tokens in circulation in the FAST.\\n   * @param transferCredits represents how many transfer credits are available inside the FAST.\\n   * @param reserveBalance is the balance of the zero-address (aka reserve) for the FAST.\\n   * @param ethBalance is the amount of Eth locked in the FAST.\\n   */\\n  event DetailsChanged(\\n    uint256 memberCount,\\n    uint256 governorCount,\\n    uint256 totalSupply,\\n    uint256 transferCredits,\\n    uint256 reserveBalance,\\n    uint256 ethBalance\\n  );\\n}\\n\",\"keccak256\":\"0x7ce33d04c780c18384f5164c8a04441aa9f3b20ac3cbe101b10f5d0d6a09df12\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/**\\n * @notice Top-level shared functionality for FAST diamonds.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFast {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0x80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705;\\n\\n  // Data structures.\\n\\n  /**\\n   * @notice The top-level data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice The internal pointer to the Issuer contract.\\n    address issuer;\\n    /// @notice The internal pointer to the Marketplace contract.\\n    address marketplace;\\n    /// @notice We have to track whether the token facet provides continuous minting or fixed supply.\\n    bool hasFixedSupply;\\n    /// @notice Whether or not this FAST requires to be a member to hold tokens.\\n    bool isSemiPublic;\\n  }\\n\\n  /**\\n   * @notice Returns the top-level storage for the calling FAST.\\n   * @return s a struct pointer for top-level FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xe5a46fc391b5dbead8199127742c18cbe6ff19153b15c3d632747b154b76326c\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n/**\\n * @notice This library centralises shared functionality between FAST diamonds facets that have to do with ACLs.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFastAccess {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage.Access'):\\n  bytes32 internal constant STORAGE_SLOT = 0x87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9a;\\n\\n  /**\\n   * @notice The access data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice We hold the list of the FAST governors in there.\\n    LibAddressSet.Data governorSet;\\n    /// @notice The FAST members are held in there.\\n    LibAddressSet.Data memberSet;\\n  }\\n\\n  /**\\n   * @notice Returns the access storage for the calling FAST.\\n   * @return s a struct pointer for access FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xb671ecfaa95bd5e9f46a01970fae2a814e640cb08d13a62fed595083683fccc3\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastHistory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/**\\n * @notice This library centralises shared functionality between FAST diamonds facets that have to do with transfer\\n * history tracking.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFastHistory {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage.History'):\\n  bytes32 internal constant STORAGE_SLOT = 0x6bc8b61a9dd5fc049ea98027492a801d74e35fdf4d80d7fecd551a16e88fdbb4;\\n\\n  // Storage structures.\\n\\n  /**\\n   * @notice The history data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice All minting proofs are kept here.\\n    SupplyProof[] supplyProofs;\\n    /// @notice All transfer proofs are kept here.\\n    TransferProof[] transferProofs;\\n    /// @notice All transfers indices involving a given address are kept here.\\n    mapping(address => uint256[]) transferProofInvolvements;\\n  }\\n\\n  // Other structures.\\n\\n  /// @notice A minting operation could either be to mint or burn tokens.\\n  enum SupplyOp { Mint, Burn }\\n\\n  /// @notice Minting operations are recorded for papertrail. This is the structure that keeps track of them.\\n  struct SupplyProof {\\n    /// @notice How...\\n    SupplyOp op;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /// @notice Every transfer in is recorded. This is the structure that keeps track of them.\\n  struct TransferProof {\\n    /// @notice Who spent...\\n    address spender;\\n    /// @notice Who performed the transfer...\\n    address from;\\n    /// @notice Who received...\\n    address to;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /**\\n   * @notice Returns the history storage for the calling FAST.\\n   * @return s a struct pointer for history FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x39b21b41198e6fa219cd8eec59124cda25395bf19174aa809c0c41d650765d73\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\n/**\\n * @notice This library centralises shared functionality between FAST diamonds facets that have to do with token related logic.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFastToken {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage.Token'):\\n  bytes32 internal constant STORAGE_SLOT = 0xb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261;\\n\\n  // Constants.\\n\\n  string internal constant DEFAULT_TRANSFER_REFERENCE = 'Unspecified - via ERC20';\\n\\n  // Data structures.\\n\\n  /**\\n   * @notice The token data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    // ERC20 related properties for this FAST Token.\\n    /// @notice The name of the FAST.\\n    string name;\\n    /// @notice The symbol for this FAST.\\n    string symbol;\\n    /// @notice The decimal points used by this FAST.\\n    uint8 decimals;\\n    /// @notice The amount of tokens in circulation.\\n    uint256 totalSupply;\\n    /**\\n   * @notice Every time a transfer is executed, the credit decreases by the amount of said transfer.\\n     * It becomes impossible to transact once it reaches zero, and must be provisioned by an Issuer member.\\n    */\\n    uint256 transferCredits;\\n    /// @notice Our members balances are held here.\\n    mapping(address => uint256) balances;\\n    // Allowances are stored here.\\n    /// @notice Allowance amounts are stored in here, via mapping of `owner.spender.amount`\\n    mapping(address => mapping(address => uint256)) allowances;\\n    /// @notice A reverse lookup table allowing to retrieve allowances given by owner.\\n    mapping(address => LibAddressSet.Data) allowancesByOwner;\\n    /// @notice A reverse lookup table allowing to retrieve allowances given by spender.\\n    mapping(address => LibAddressSet.Data) allowancesBySpender;\\n    // Token holders\\n    LibAddressSet.Data tokenHolders;\\n  }\\n\\n  /**\\n   * @notice Returns the token storage for the calling FAST.\\n   * @return s a struct pointer for token FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x2875453fbefe3ec24c3c69129e42a8edff9eadda6d44c4fe395e94f2892e8ee2\",\"license\":\"MIT\"},\"contracts/interfaces/ICustomErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\ninterface ICustomErrors {\\n  error AlreadyInitialized();\\n  error InternalMethod();\\n  error RequiresDiamondOwnership(address who);\\n  error RequiresFastContractCaller();\\n\\n  error RequiresIssuerMembership(address who);\\n  error RequiresMarketplaceMembership(address who);\\n  error RequiresMarketplaceActiveMember(address who);\\n  error RequiresMarketplaceDeactivatedMember(address who);\\n\\n  error RequiresFastGovernorship(address who);\\n  error RequiresFastMembership(address who);\\n  error RequiresNoFastMemberships(address who);\\n\\n  error DuplicateEntry();\\n  error UnsupportedOperation();\\n  error CannotSelfRemove(address who);\\n\\n  error RequiresContinuousSupply();\\n  error RequiresPositiveBalance(address holder);\\n  error RequiresDifferentSenderAndRecipient(address a);\\n}\\n\",\"keccak256\":\"0x3a53b4cd981cf0c192ae72e2951e1204119229fa6650c340517085d257d1d6c9\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title ERC173 Contract Ownership Standard\\n * @dev The ERC165 identifier for this interface is 0x7f5828d0.\\n */\\ninterface IERC173 {\\n    /// @notice This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @notice Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xdb5140cc2b82a3fa14aec9b29d77705e66a7b4ca5ea6ba6f4cd7364c636344df\",\"license\":\"MIT\"},\"contracts/interfaces/IHasActiveMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/// @title An interface signifying that the inheriting contract implements the concept of active memberships.\\ninterface IHasActiveMembers {\\n  /**\\n   * @notice Queries whether a given account is active.\\n   * @param member is the address to query.\\n   * @return A `bool` set to `true` if the candidate is an active member.\\n   */\\n  function isMemberActive(address member) external view returns(bool);\\n\\n  /**\\n   * @notice Deactivates a given member address.\\n   * @param member is the address to deactivate.\\n   */\\n  function deactivateMember(address payable member) external;\\n\\n  /**\\n   * @notice Activates a given member address.\\n   * @param member is the address to activate.\\n   */\\n  function activateMember(address member) external;\\n}\\n\",\"keccak256\":\"0xe82489064310ba738b47a070409d96af5c86d755f7f9f6604e0ec2257ab27c08\",\"license\":\"MIT\"},\"contracts/interfaces/IHasGovernors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/// @title An interface signifying that the inheriting contract implements the concept of governorship ACLs.\\ninterface IHasGovernors {\\n  /**\\n   * @notice Queries whether a given address is a governor or not.\\n   * @param candidate is the address to test.\\n   * @return A `bool` equal to `true` when `candidate` is a governor.\\n   */\\n  function isGovernor(address candidate) external view returns(bool);\\n\\n  /**\\n   * @notice Queries the number of governors.\\n   * @return An `uint256`.\\n   */\\n  function governorCount() external view returns(uint256);\\n\\n  /**\\n   * @notice Queries pages of governors based on a start index and a page size.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginateGovernors(uint256 index, uint256 perPage) external view returns(address[] memory, uint256);\\n\\n  /**\\n   * @notice Adds a governor to the list of known governors.\\n   * @param governor is the address to be added.\\n   */\\n  function addGovernor(address payable governor) external;\\n\\n  /**\\n   * @notice Removes a governor from the list of known governors.\\n   * @param governor is the address to be removed.\\n   */\\n  function removeGovernor(address governor) external;\\n}\\n\",\"keccak256\":\"0xf80b84746be3c4ddab96aadf19078603eda1c9222981677b48a6d6726209eab6\",\"license\":\"MIT\"},\"contracts/interfaces/IHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/// @title An interface signifying that the inheriting contract implements the concept of membership ACLs.\\ninterface IHasMembers {\\n  /**\\n   * @notice Queries whether a given address is a member or not.\\n   * @param candidate is the address to test.\\n   * @return A `bool` equal to `true` when `candidate` is a member.\\n   */\\n  function isMember(address candidate) external view returns(bool);\\n\\n  /**\\n   * @notice Queries the number of members.\\n   * @return An `uint256`.\\n   */\\n  function memberCount() external view returns(uint256);\\n\\n  /**\\n   * @notice Queries pages of members based on a start index and a page size.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginateMembers(uint256 index, uint256 perPage) external view returns(address[] memory, uint256);\\n\\n  /**\\n   * @notice Adds a member to the list of known members.\\n   * @param candidate is the address to be added.\\n   */\\n  function addMember(address payable candidate) external;\\n\\n  /**\\n   * @notice Removes a member from the list of known members.\\n   * @param member is the address to be removed.\\n   */\\n  function removeMember(address member) external;\\n}\\n\",\"keccak256\":\"0xfc66597f16c7668a054f2bed1db32b85e2f240d9de257b5e38226daf8c891cd0\",\"license\":\"MIT\"},\"contracts/lib/LibAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\nlibrary LibAddressSet {\\n  /// @notice Represents a list of addresses.\\n  struct Data {\\n    mapping(address => uint256) indices;\\n    address[] values;\\n  }\\n\\n  /**\\n   * @notice Adds an item into the storage set. If the address already exists in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be added.\\n   */\\n  function add(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && exists) { return; }\\n    require(!exists, 'Address already in set');\\n    d.indices[key] = d.values.length;\\n    d.values.push(key);\\n  }\\n\\n  /**\\n   * @notice Removes an item from the storage set. If the address does not exist in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be removed.\\n   */\\n  function remove(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && !exists) { return; }\\n    require(exists, 'Address does not exist in set');\\n    address keyToMove = d.values[d.values.length - 1];\\n    uint256 idxToReplace = d.indices[key];\\n    d.indices[keyToMove] = idxToReplace;\\n    d.values[idxToReplace] = keyToMove;\\n\\n    delete d.indices[key];\\n    d.values.pop();\\n  }\\n\\n  /**\\n   * @notice Tests whether or not a given item already exists in the set.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to test.\\n   * @return a boolean.\\n   */\\n  function contains(Data storage d, address key)\\n      internal view returns(bool) {\\n    return d.values.length == 0\\n      ? false\\n      : d.values[d.indices[key]] == key;\\n  }\\n}\\n\",\"keccak256\":\"0x7411b83b6853f77fd7b0fef32c5367edad2396ec83f82c45c81297e1d1376e50\",\"license\":\"MIT\"},\"contracts/lib/LibConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\nlibrary LibConstants {\\n  address internal constant ZERO_ADDRESS = address(0);\\n  address internal constant DEPLOYER_CONTRACT = 0x6DF2D25d8C6FD680730ee658b530A05a99BB769a;\\n\\n  string internal constant INSUFFICIENT_TRANSFER_CREDITS = 'Insufficient transfer credits';\\n  string internal constant REQUIRES_MARKETPLACE_MEMBERSHIP = 'Requires Marketplace membership';\\n  string internal constant REQUIRES_FAST_MEMBERSHIP = 'Requires FAST membership';\\n  string internal constant REQUIRES_DIFFERENT_SENDER_AND_RECIPIENT = 'Requires different sender and recipient';\\n}\",\"keccak256\":\"0xe27f317692bd3b51c815a3a463a6449dde9e686f4623dc40e4b2620e621a3c5c\",\"license\":\"MIT\"},\"contracts/lib/LibHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary LibHelpers {\\n}\\n\",\"keccak256\":\"0x37d04f54a3887bd432df5b25b29ed345758d66c90cb6393ad818fc55f1dd1435\",\"license\":\"MIT\"},\"contracts/lib/LibPaginate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../fast/lib/LibFastHistory.sol';\\n\\n\\nlibrary LibPaginate {\\n  function addresses(address[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(address[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      address[] memory values = new address[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function uint256s(uint256[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(uint256[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      uint256[] memory values = new uint256[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function supplyProofs(LibFastHistory.SupplyProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.SupplyProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.SupplyProof[] memory values = new LibFastHistory.SupplyProof[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function transferProofs(LibFastHistory.TransferProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.TransferProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.TransferProof[] memory values = new LibFastHistory.TransferProof[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n}\",\"keccak256\":\"0xb1c624707faa2688853bce5e4ad8e073bb67968a9de5134dfa80bb29fb73c8f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610f81806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c806388a915241161005057806388a91524146100bf57806398d55d68146100df5780639f4c440b1461010057600080fd5b80634f2274c014610077578063565974d314610081578063677d9a681461009f575b600080fd5b61007f610121565b005b6100896102ca565b6040516100969190610b49565b60405180910390f35b6100b26100ad366004610c55565b6105b5565b6040516100969190610c92565b6100d26100cd366004610c55565b610632565b6040516100969190610ccb565b6100f26100ed366004610d0e565b610705565b604051610096929190610d30565b61011361010e366004610d0e565b610826565b604051610096929190610db0565b33301461015a576040517f12e9ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9e547f87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9c547fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8265547fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826654600080527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826760209081527f46c1c84a085e09f9e9a4265c25fbada4be722ba2683afd74e0ddd9e11b58aaa95460408051968752918601949094528481019290925260608401526080830191909152303160a0830152517f87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9a917fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261917f3f34e05a7df519b3b9e1ab85fab4e26555d5863f50b821555768b78d8600e4af9181900360c00190a15050565b61034b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600060ff1681526020016000815260200160008152602001600015158152602001600015158152602001600081526020016000815260200160008152602001600081525090565b6040805161018081019091523081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826280547f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705927f87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9a927fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261926020830191906103f290610e3b565b80601f016020809104026020016040519081016040528092919081815260200182805461041e90610e3b565b801561046b5780601f106104405761010080835404028352916020019161046b565b820191906000526020600020905b81548152906001019060200180831161044e57829003601f168201915b5050505050815260200182600201805461048490610e3b565b80601f01602080910402602001604051908101604052809291908181526020018280546104b090610e3b565b80156104fd5780601f106104d2576101008083540402835291602001916104fd565b820191906000526020600020905b8154815290600101906020018083116104e057829003601f168201915b5050509183525050600383015460ff908116602080840191909152600480860154604080860191909152600587015460608601526001989098015475010000000000000000000000000000000000000000008104841615156080860152740100000000000000000000000000000000000000009004909216151560a0840152600080805260069095019052949092205460c0830152303160e08301529282015461010082015260029091015461012090910152919050565b604080516060808201835260008083526020808401829052838501919091528351918201845273ffffffffffffffffffffffffffffffffffffffff85168083523190820152909181016106287f87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9d8561093f565b1515905292915050565b60408051608081018252600080825260208201819052918101829052606081019190915260405180608001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020016106a47fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826190565b73ffffffffffffffffffffffffffffffffffffffff851660008181526006929092016020908152604092839020548452903190830152016106287f87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9b8561093f565b6060600080806107367f87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9c87876109bd565b915091506000825167ffffffffffffffff81111561075657610756610e8f565b6040519080825280602002602001820160405280156107bf57816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816107745790505b50835190915060005b81811015610817576107f28582815181106107e5576107e5610ebe565b60200260200101516105b5565b83828151811061080457610804610ebe565b60209081029190910101526001016107c8565b50909791965090945050505050565b6060600080806108577f87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9e87876109bd565b915091506000825167ffffffffffffffff81111561087757610877610e8f565b6040519080825280602002602001820160405280156108e757816020015b6040805160808101825260008082526020808301829052928201819052606082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816108955790505b50835190915060005b818110156108175761091a85828151811061090d5761090d610ebe565b6020026020010151610632565b83828151811061092c5761092c610ebe565b60209081029190910101526001016108f0565b6001820154600090156109b15773ffffffffffffffffffffffffffffffffffffffff8216600081815260208590526040902054600185018054909190811061098957610989610ebe565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16146109b4565b60005b90505b92915050565b60606000808486805490506109d29190610f1c565b84116109de57836109eb565b85546109eb908690610f1c565b905060008167ffffffffffffffff811115610a0857610a08610e8f565b604051908082528060200260200182016040528015610a31578160200160208202803683370190505b50905060005b82811015610ac45787610a4a8289610f33565b81548110610a5a57610a5a610ebe565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110610a9757610a97610ebe565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101610a37565b5080610ad08388610f33565b935093505050935093915050565b6000815180845260005b81811015610b0457602081850181015186830182015201610ae8565b81811115610b16576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152610b7060208201835173ffffffffffffffffffffffffffffffffffffffff169052565b60006020830151610180806040850152610b8e6101a0850183610ade565b915060408501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0858403016060860152610bc98382610ade565b9250506060850151610be0608086018260ff169052565b50608085015160a085015260a085015160c085015260c0850151610c0860e086018215159052565b5060e0850151610100610c1e8187018315159052565b8601516101208681019190915286015161014080870191909152860151610160808701919091529095015193019290925250919050565b600060208284031215610c6757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610c8b57600080fd5b9392505050565b815173ffffffffffffffffffffffffffffffffffffffff16815260208083015190820152604080830151151590820152606081016109b7565b815173ffffffffffffffffffffffffffffffffffffffff1681526020808301519082015260408083015190820152606080830151151590820152608081016109b7565b60008060408385031215610d2157600080fd5b50508035926020909101359150565b60408082528351908201819052600090606090818401906020808801855b83811015610d9d57610d8d858351805173ffffffffffffffffffffffffffffffffffffffff168252602080820151908301526040908101511515910152565b9385019390820190600101610d4e565b5050949094019490945250919392505050565b604080825283519082018190526000906020906060840190828701845b82811015610e2c57610e1984835173ffffffffffffffffffffffffffffffffffffffff815116825260208101516020830152604081015160408301526060810151151560608301525050565b6080939093019290840190600101610dcd565b50505092019290925292915050565b600181811c90821680610e4f57607f821691505b60208210811415610e89577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610f2e57610f2e610eed565b500390565b60008219821115610f4657610f46610eed565b50019056fea2646970667358221220a2d42359d3fdf24e4ef269ca3a789c92c844fa80906e95ace8eb86492eabce8b64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c806388a915241161005057806388a91524146100bf57806398d55d68146100df5780639f4c440b1461010057600080fd5b80634f2274c014610077578063565974d314610081578063677d9a681461009f575b600080fd5b61007f610121565b005b6100896102ca565b6040516100969190610b49565b60405180910390f35b6100b26100ad366004610c55565b6105b5565b6040516100969190610c92565b6100d26100cd366004610c55565b610632565b6040516100969190610ccb565b6100f26100ed366004610d0e565b610705565b604051610096929190610d30565b61011361010e366004610d0e565b610826565b604051610096929190610db0565b33301461015a576040517f12e9ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9e547f87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9c547fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8265547fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826654600080527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826760209081527f46c1c84a085e09f9e9a4265c25fbada4be722ba2683afd74e0ddd9e11b58aaa95460408051968752918601949094528481019290925260608401526080830191909152303160a0830152517f87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9a917fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261917f3f34e05a7df519b3b9e1ab85fab4e26555d5863f50b821555768b78d8600e4af9181900360c00190a15050565b61034b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600060ff1681526020016000815260200160008152602001600015158152602001600015158152602001600081526020016000815260200160008152602001600081525090565b6040805161018081019091523081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826280547f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705927f87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9a927fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261926020830191906103f290610e3b565b80601f016020809104026020016040519081016040528092919081815260200182805461041e90610e3b565b801561046b5780601f106104405761010080835404028352916020019161046b565b820191906000526020600020905b81548152906001019060200180831161044e57829003601f168201915b5050505050815260200182600201805461048490610e3b565b80601f01602080910402602001604051908101604052809291908181526020018280546104b090610e3b565b80156104fd5780601f106104d2576101008083540402835291602001916104fd565b820191906000526020600020905b8154815290600101906020018083116104e057829003601f168201915b5050509183525050600383015460ff908116602080840191909152600480860154604080860191909152600587015460608601526001989098015475010000000000000000000000000000000000000000008104841615156080860152740100000000000000000000000000000000000000009004909216151560a0840152600080805260069095019052949092205460c0830152303160e08301529282015461010082015260029091015461012090910152919050565b604080516060808201835260008083526020808401829052838501919091528351918201845273ffffffffffffffffffffffffffffffffffffffff85168083523190820152909181016106287f87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9d8561093f565b1515905292915050565b60408051608081018252600080825260208201819052918101829052606081019190915260405180608001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020016106a47fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826190565b73ffffffffffffffffffffffffffffffffffffffff851660008181526006929092016020908152604092839020548452903190830152016106287f87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9b8561093f565b6060600080806107367f87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9c87876109bd565b915091506000825167ffffffffffffffff81111561075657610756610e8f565b6040519080825280602002602001820160405280156107bf57816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816107745790505b50835190915060005b81811015610817576107f28582815181106107e5576107e5610ebe565b60200260200101516105b5565b83828151811061080457610804610ebe565b60209081029190910101526001016107c8565b50909791965090945050505050565b6060600080806108577f87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9e87876109bd565b915091506000825167ffffffffffffffff81111561087757610877610e8f565b6040519080825280602002602001820160405280156108e757816020015b6040805160808101825260008082526020808301829052928201819052606082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816108955790505b50835190915060005b818110156108175761091a85828151811061090d5761090d610ebe565b6020026020010151610632565b83828151811061092c5761092c610ebe565b60209081029190910101526001016108f0565b6001820154600090156109b15773ffffffffffffffffffffffffffffffffffffffff8216600081815260208590526040902054600185018054909190811061098957610989610ebe565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16146109b4565b60005b90505b92915050565b60606000808486805490506109d29190610f1c565b84116109de57836109eb565b85546109eb908690610f1c565b905060008167ffffffffffffffff811115610a0857610a08610e8f565b604051908082528060200260200182016040528015610a31578160200160208202803683370190505b50905060005b82811015610ac45787610a4a8289610f33565b81548110610a5a57610a5a610ebe565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110610a9757610a97610ebe565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101610a37565b5080610ad08388610f33565b935093505050935093915050565b6000815180845260005b81811015610b0457602081850181015186830182015201610ae8565b81811115610b16576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152610b7060208201835173ffffffffffffffffffffffffffffffffffffffff169052565b60006020830151610180806040850152610b8e6101a0850183610ade565b915060408501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0858403016060860152610bc98382610ade565b9250506060850151610be0608086018260ff169052565b50608085015160a085015260a085015160c085015260c0850151610c0860e086018215159052565b5060e0850151610100610c1e8187018315159052565b8601516101208681019190915286015161014080870191909152860151610160808701919091529095015193019290925250919050565b600060208284031215610c6757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610c8b57600080fd5b9392505050565b815173ffffffffffffffffffffffffffffffffffffffff16815260208083015190820152604080830151151590820152606081016109b7565b815173ffffffffffffffffffffffffffffffffffffffff1681526020808301519082015260408083015190820152606080830151151590820152608081016109b7565b60008060408385031215610d2157600080fd5b50508035926020909101359150565b60408082528351908201819052600090606090818401906020808801855b83811015610d9d57610d8d858351805173ffffffffffffffffffffffffffffffffffffffff168252602080820151908301526040908101511515910152565b9385019390820190600101610d4e565b5050949094019490945250919392505050565b604080825283519082018190526000906020906060840190828701845b82811015610e2c57610e1984835173ffffffffffffffffffffffffffffffffffffffff815116825260208101516020830152604081015160408301526060810151151560608301525050565b6080939093019290840190600101610dcd565b50505092019290925292915050565b600181811c90821680610e4f57607f821691505b60208210811415610e89577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610f2e57610f2e610eed565b500390565b60008219821115610f4657610f46610eed565b50019056fea2646970667358221220a2d42359d3fdf24e4ef269ca3a789c92c844fa80906e95ace8eb86492eabce8b64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "detailedGovernor(address)": {
        "returns": {
          "_0": "GovernorDetails See: `GovernorDetails`."
        }
      },
      "detailedMember(address)": {
        "returns": {
          "_0": "A FAST member's details, see `MemberDetails`."
        }
      },
      "details()": {
        "returns": {
          "_0": "The details for the current FAST, see `Details`."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "See `ERC20.Approval`."
      },
      "Burnt(uint256,string)": {
        "notice": "Emited whenever an burning happens in a FAST."
      },
      "DetailsChanged(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "This is an event that is fired whenever any of some of the FAST parameters change, so that the frontend can react to it and refresh the general header for that fast as well as the baseball cards in the FASTs list."
      },
      "Disapproval(address,address,uint256)": {
        "notice": "See `ERC20.Disapproval`."
      },
      "GovernorAdded(address)": {
        "notice": "Emited when a governor is added to the implementing contract."
      },
      "GovernorRemoved(address)": {
        "notice": "Emited when a governor is removed to the implementing contract."
      },
      "MemberAdded(address)": {
        "notice": "Emited when a member is added to the implementing contract."
      },
      "MemberRemoved(address)": {
        "notice": "Emited when a member is removed to the implementing contract."
      },
      "Minted(uint256,string)": {
        "notice": "Emited whenever an issuance happens in a FAST."
      },
      "Transfer(address,address,uint256)": {
        "notice": "See `ERC20.Transfer`."
      },
      "TransferCreditsAdded(address,uint256)": {
        "notice": "Emited whenever transfer credits increase inside a FAST."
      },
      "TransferCreditsDrained(address,uint256)": {
        "notice": "Emited whenever transfer credits are drained inside a FAST."
      }
    },
    "kind": "user",
    "methods": {
      "detailedGovernor(address)": {
        "notice": "Gets detailed governor details."
      },
      "detailedMember(address)": {
        "notice": "Gets detailed member details."
      },
      "details()": {
        "notice": "Gets the details of a FAST."
      },
      "emitDetailsChanged()": {
        "notice": "Called by diamond facets, signals that FAST details may have changed.  Business logic: - Modifiers:   - Requires the caller to be another facet of the diamond. Emits `DetailsChanged`, see `IFastEvents.DetailsChanged`"
      }
    },
    "notice": "A facet dedicated to view / UI only methods. This facet should never hold any method that is not either `pure` or `view`, except to emit events.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}