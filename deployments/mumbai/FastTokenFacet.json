{
  "address": "0x9C3fF08Fb23D2B5373A7948529E9066e960F0792",
  "abi": [
    {
      "inputs": [],
      "name": "InternalMethod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequiresContinuousSupply",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "RequiresDifferentSenderAndRecipient",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresFastGovernorship",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresFastMembership",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresIssuerMembership",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresMarketplaceActiveMember",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresMarketplaceMembership",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "RequiresPositiveBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsupportedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "Burnt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "memberCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "governorCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferCredits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethBalance",
          "type": "uint256"
        }
      ],
      "name": "DetailsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Disapproval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "GovernorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "GovernorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuerMember",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferCreditsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuerMember",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferCreditsDrained",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addTransferCredits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "beforeRemovingMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "disapprove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drainTransferCredits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "givenAllowanceCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "holders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perPage",
          "type": "uint256"
        }
      ],
      "name": "paginateAllowancesByOwner",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perPage",
          "type": "uint256"
        }
      ],
      "name": "paginateAllowancesBySpender",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "performApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "performDisapproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ref",
              "type": "string"
            }
          ],
          "internalType": "struct FastTokenFacet.TransferArgs",
          "name": "p",
          "type": "tuple"
        }
      ],
      "name": "performTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "receivedAllowanceCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "retrieveDeadTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferCredits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "transferFromWithRef",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "transferWithRef",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb8e9ccaf791d249530a7972660120d23835a1070158a2c35b015ddcf23e861f9",
  "receipt": {
    "to": "0x6DF2D25d8C6FD680730ee658b530A05a99BB769a",
    "from": "0x717634cfe06FFAB2CEAA7fcf1b9019813f4B25FE",
    "contractAddress": null,
    "transactionIndex": 12,
    "gasUsed": "3571136",
    "logsBloom": "0x
    "blockHash": "0xac740d6eed6520a08c2ee1710d466258f748a2e3ab62194ee8deabd879713d9c",
    "transactionHash": "0xb8e9ccaf791d249530a7972660120d23835a1070158a2c35b015ddcf23e861f9",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 28494390,
        "transactionHash": "0xb8e9ccaf791d249530a7972660120d23835a1070158a2c35b015ddcf23e861f9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000717634cfe06ffab2ceaa7fcf1b9019813f4b25fe",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001307e4d71640000000000000000000000000000000000000000000000000003722277ff7bf7e1b00000000000000000000000000000000000000000000161d4942799f572bad21000000000000000000000000000000000000000000000000370f1f9b20a93e1b00000000000000000000000000000000000000000000161d495581842e41ed21",
        "logIndex": 40,
        "blockHash": "0xac740d6eed6520a08c2ee1710d466258f748a2e3ab62194ee8deabd879713d9c"
      }
    ],
    "blockNumber": 28494390,
    "cumulativeGasUsed": "5019154",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "57fc878374d054c3aeb94e41cf27b966",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InternalMethod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequiresContinuousSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"RequiresDifferentSenderAndRecipient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresFastGovernorship\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresFastMembership\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresIssuerMembership\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresMarketplaceActiveMember\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresMarketplaceMembership\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"RequiresPositiveBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"memberCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"governorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferCredits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"}],\"name\":\"DetailsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Disapproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"GovernorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"GovernorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuerMember\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferCreditsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuerMember\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferCreditsDrained\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTransferCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"beforeRemovingMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"disapprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainTransferCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"givenAllowanceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perPage\",\"type\":\"uint256\"}],\"name\":\"paginateAllowancesByOwner\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perPage\",\"type\":\"uint256\"}],\"name\":\"paginateAllowancesBySpender\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"performApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"performDisapproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"internalType\":\"struct FastTokenFacet.TransferArgs\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"performTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"receivedAllowanceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"retrieveDeadTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"transferFromWithRef\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"transferWithRef\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"This value changes when `approve`, `disapprove` and `transferFrom` / `transferFromWithRef` are called.\",\"params\":{\"owner\":\"is the owner of the funds.\",\"spender\":\"is the address for which the allowance should be queried.\"},\"returns\":{\"_0\":\"A `uint256` representing the remaining allowance of `spender` over `owner`'s funds.\"}},\"approve(address,uint256)\":{\"params\":{\"amount\":\"is how much to **increase** the allowance.\",\"spender\":\"is the address to allow spending from the caller's wallet.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The owners address to get the balance of.\"},\"returns\":{\"_0\":\"uint256 The current balance of this owner's account.\"}},\"burn(uint256,string)\":{\"params\":{\"amount\":\"The number of FAST tokens to mint.\",\"ref\":\"A reference for this minting operation.\"}},\"decimals()\":{\"returns\":{\"_0\":\"uint256 Number of decimals the FAST has.\"}},\"disapprove(address,uint256)\":{\"params\":{\"amount\":\"is how much to **decrease** the allowance.\",\"spender\":\"is the address to disallow spending from the caller's wallet.\"}},\"mint(uint256,string)\":{\"params\":{\"amount\":\"The number of FAST tokens to mint.\",\"ref\":\"A reference for this minting operation.\"}},\"name()\":{\"returns\":{\"_0\":\"string Name of the FAST.\"}},\"performApproval(address,address,uint256)\":{\"params\":{\"amount\":\"is how much to **increase** the current allowance by.  Note: This function runs when amount is zero, and will emit.\",\"from\":\"is the wallet from which to give the allowance.\",\"spender\":\"is the receiver of the allowance.\"}},\"retrieveDeadTokens(address)\":{\"params\":{\"holder\":\"is the address for which to move the tokens from.\"}},\"symbol()\":{\"returns\":{\"_0\":\"string Symbol of the FAST.\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"uint256 Total supply of the FAST.\"}},\"transferCredits()\":{\"returns\":{\"_0\":\"Number of transfer credits remaining.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"See `ERC20.Approval`.\"},\"Burnt(uint256,string)\":{\"notice\":\"Emited whenever an burning happens in a FAST.\"},\"DetailsChanged(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"This is an event that is fired whenever any of some of the FAST parameters change, so that the frontend can react to it and refresh the general header for that fast as well as the baseball cards in the FASTs list.\"},\"Disapproval(address,address,uint256)\":{\"notice\":\"See `ERC20.Disapproval`.\"},\"GovernorAdded(address)\":{\"notice\":\"Emited when a governor is added to the implementing contract.\"},\"GovernorRemoved(address)\":{\"notice\":\"Emited when a governor is removed to the implementing contract.\"},\"MemberAdded(address)\":{\"notice\":\"Emited when a member is added to the implementing contract.\"},\"MemberRemoved(address)\":{\"notice\":\"Emited when a member is removed to the implementing contract.\"},\"Minted(uint256,string)\":{\"notice\":\"Emited whenever an issuance happens in a FAST.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"See `ERC20.Transfer`.\"},\"TransferCreditsAdded(address,uint256)\":{\"notice\":\"Emited whenever transfer credits increase inside a FAST.\"},\"TransferCreditsDrained(address,uint256)\":{\"notice\":\"Emited whenever transfer credits are drained inside a FAST.\"}},\"kind\":\"user\",\"methods\":{\"addTransferCredits(uint256)\":{\"notice\":\"Adds `amount` of transfer credits to this FAST.\"},\"allowance(address,address)\":{\"notice\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through `transferFrom`. This is zero by default.\"},\"approve(address,uint256)\":{\"notice\":\"This method directly calls `performApproval`, setting its `from` paramter to the sender of the transaction.\"},\"balanceOf(address)\":{\"notice\":\"The balance of the passed owner (ERC20 standard).\"},\"burn(uint256,string)\":{\"notice\":\"Burns an amount of FAST tokens.  A reference can be passed to identify why this happened for example. Business logic. - Modifiers:   - Requires the caller to be a member of the Issuer contract. - Requires that the token has continuous supply. - Requires that there are enough funds in the reserve to cover for `amount` being burnt. - Decreases the reserve balance by `amount`. - Calls `FastHistoryFacet.burnt(amount, ref)`. - Calls `FastFrontendFacet.emitDetailsChanged`. - Emits a `Burnt(amount, ref)`.\"},\"decimals()\":{\"notice\":\"The `decimals` of this FAST (ERC20 standard).\"},\"disapprove(address,uint256)\":{\"notice\":\"This method directly calls `performDisapproval`, setting its `from` parameter to the sender of the transaction.\"},\"drainTransferCredits()\":{\"notice\":\"Drains the transfer credits from this FAST. Business logic: - Modifiers:   - Requires the caller to be a member of the Issuer contract. - Emits a `TransferCreditsDrained(caller, previousTransferCredits)`. - Sets transfer credits to zero. - Calls `FastFrontendFacet.emitDetailsChanged`\"},\"mint(uint256,string)\":{\"notice\":\"Mints an amount of FAST tokens.  A reference can be passed to identify why this happened for example. Business logic: - Modifiers:   - Requires the caller to be a member of the Issuer contract. - Requires that either the token has continuous supply, or that no tokens have been minted yet. - Increases the reserve balance by `amount`. - Calls `FastHistoryFacet.minted`. - Calls `FastFrontendFacet.emitDetailsChanged`. - Emits a `Minted(amount, ref)` event.\"},\"name()\":{\"notice\":\"The name of this FAST (ERC20 standard).\"},\"performApproval(address,address,uint256)\":{\"notice\":\"Increases the allowance given by `from` to `spender` by `amount`. Note that this function should run and emit even if the amount passed is zero. Business logic: - Modifiers:   - Only facets of the current diamond should be able to call this.   - Requires that `onlyTokenHolder` passes for the `from` address. - Requires that the `amount` is positive number. - Increases the allowance given by `from` to `spender` by `amount`. - Update the allowance lookup tables in both directions. - Emits an `Approval(from, spender, amount)`.\"},\"performDisapproval(address,address,uint256)\":{\"notice\":\"Decreases allowance given by `from` to `spender` by `amount`. Business logic: - Modifiers:   - Only facets of the current diamond should be able to call this. - The allowance given by `from` to `spender` is decreased by `amount`. - Whether the allowance reached zero, stop tracking it by owner and by spender. - Emit a `Disapproval(from, spender, amount)` event.  Note: This function runs when amount is zero, and will emit.\"},\"performTransfer((address,address,address,uint256,string))\":{\"notice\":\"This is the internal method that gets called whenever a transfer is initiated. Both `transfer`, `transferWithRef`, and their variants internally call this function. Business logic: - Modifiers:   - Only facets of the current diamond should be able to call this.   - Requires that `from` and `to` addresses are different.   - Requires that `onlyTokenHolder` passes for the `from` address.   - Requires that the `from` address is an active Marketplace contract member.   - Requires that `onlyTokenHolder` passes for the `to` address. - Requires that the `from` address has enough funds to cover for `amount`. - Requires that the amount is a positive value. - If the transfer is an allowance - e.g. the `spender` is not the same as the `from` address,   - The allowance given by the `from` address to the `spender` covers for the `amount`.     - If we are **not** transfering **from** the reserve,       - Decreases the allowance given by `from` to `spender`.         - If the new allowance reaches zero,           - Stop tracking the allowance in the allowance lookup tables for both spending and receiving directions. - Decreases the balance of the `owner` address. - Increases the balance of the `to` address by `amount`. - If we are **not** transfering **from** the reserve,   - Requires that there are enough transfer credits to cover for `amount`.   - Decreases the transfer credits by `amount`. - If the `to` address is the reserve,   - Decreases the total supply by `amount`.   - Calls `FastFrontendFacet.emitDetailsChanged`. - Else, if the `from` address is the reserve,   - Increases the total supply by `amount`.   - Calls `FastFrontendFacet.emitDetailsChanged`. - Calls `FastHistoryFacet.transfered`. - Emits a `Transfer(from, to, amount)` event.\"},\"retrieveDeadTokens(address)\":{\"notice\":\"Allows an Issuer member to move an arbitrary account's holdings back to the reserve, as per regulatory requirements. Business logic: - Modifiers:   - Requires that the caller is a member of the Issuer contract. - If the amount held by `holder` is not zero   - The balance of `holder` should be set to zero.   - The reserve's balance should be increased by how much was on the holder's account.   - Total supply should be decreased by that amount too. - The `holder`'s address should not be tracked as a token holder in this FAST anymore. - The `holder`'s address should not be tracked as a token holder in the Marketplace anymore. - A `Transfer(holder, reserve, amount)` event should be emited. - If the amount previously held by `holder` was not zero,   - Since the reserve balance and total supply have changed, the `FastFrontendFacet.emitDetailsChanged()` function should be called.\"},\"symbol()\":{\"notice\":\"The symbol of this FAST (ERC20 standard).\"},\"totalSupply()\":{\"notice\":\"The total supply of the FAST (ERC20 standard).\"},\"transfer(address,uint256)\":{\"notice\":\"See `performTransfer`, the spender will be equal to the `owner`, and the `ref` will be defauted. \"},\"transferCredits()\":{\"notice\":\"Get the current `transferCredits` for this FAST.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"See `performTransfer`, the `ref` will be defaulted.\"},\"transferFromWithRef(address,address,uint256,string)\":{\"notice\":\"See `performTransfer`.\"},\"transferWithRef(address,uint256,string)\":{\"notice\":\"See `performTransfer`, the spender will be equal to the `owner`. \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fast/FastTokenFacet.sol\":\"FastTokenFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/fast/FastAccessFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../interfaces/IHasMembers.sol';\\nimport '../interfaces/IHasGovernors.sol';\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../marketplace/MarketplaceAccessFacet.sol';\\nimport '../issuer/IssuerAccessFacet.sol';\\nimport './FastTokenFacet.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFast.sol';\\nimport './lib/LibFastAccess.sol';\\nimport './FastTopFacet.sol';\\nimport './FastFrontendFacet.sol';\\n\\n\\n/**\\n * @notice The FAST Access facet is the source of truth when it comes to\\n * permissioning and ACLs within a given FAST.\\n */\\ncontract FastAccessFacet is AFastFacet, IHasMembers, IHasGovernors {\\n  using LibAddressSet for LibAddressSet.Data;\\n  // Structs.\\n\\n  /**\\n   * @notice This structure isn't used anywhere in storage. Instead, it\\n   * allows various methods of the contract to return all the flags\\n   * associated with a given address in one go.\\n   */\\n  struct Flags {\\n    /// @notice Whether or not the item in scope is considered a governor of this FAST.\\n    bool isGovernor;\\n    /// @notice Whether or not the item in scope is considered a member of this FAST.\\n    bool isMember;\\n  }\\n\\n  // Governorship related stuff.\\n\\n  /// @notice See `IHasGovernors`.\\n  function isGovernor(address candidate)\\n      external view override returns(bool) {\\n    return LibFastAccess.data().governorSet.contains(candidate);\\n  }\\n\\n   /// @notice See `IHasGovernors`.\\n  function governorCount()\\n      external override view returns(uint256) {\\n    return LibFastAccess.data().governorSet.values.length;\\n  }\\n\\n   /// @notice See `IHasGovernors`.\\n  function paginateGovernors(uint256 index, uint256 perPage)\\n      external override view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibFastAccess.\\n      data().governorSet.values,\\n      index,\\n      perPage\\n    );\\n  }\\n\\n   /// @notice See `IHasGovernors`.\\n  function addGovernor(address payable governor)\\n      external override\\n      onlyIssuerMember\\n      onlyMarketplaceMember(governor) {\\n    // Add governor to list.\\n    LibFastAccess.data().governorSet.add(governor, false);\\n    // Notify issuer that this member was added to this FAST.\\n    IssuerAccessFacet(LibFast.data().issuer).governorAddedToFast(governor);\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n    emit GovernorAdded(governor);\\n  }\\n\\n   /// @notice See `IHasGovernors`.\\n  function removeGovernor(address governor)\\n      external override\\n      onlyIssuerMember {\\n    // Remove governor.\\n    LibFastAccess.data().governorSet.remove(governor, false);\\n    // Notify issuer that this member was removed from this FAST.\\n    IssuerAccessFacet(LibFast.data().issuer).governorRemovedFromFast(governor);\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n    emit GovernorRemoved(governor);\\n  }\\n\\n  /// Membership related stuff.\\n\\n   /// @notice See `IHasMembers`.\\n  function isMember(address candidate)\\n      external override view returns(bool) {\\n    return LibFastAccess.data().memberSet.contains(candidate);\\n  }\\n\\n   /// @notice See `IHasMembers`.\\n  function memberCount()\\n      external override view returns(uint256) {\\n    return LibFastAccess.data().memberSet.values.length;\\n  }\\n\\n   /// @notice See `IHasMembers`.\\n  function paginateMembers(uint256 index, uint256 perPage)\\n      external override view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(\\n      LibFastAccess.data().memberSet.values,\\n      index,\\n      perPage\\n    );\\n  }\\n\\n   /// @notice See `IHasMembers`.\\n  function addMember(address payable member)\\n      external override \\n      onlyGovernor(msg.sender) onlyMarketplaceMember(member) {\\n    // Add the member.\\n    LibFastAccess.data().memberSet.add(member, false);\\n    // Notify marketplace that this member was added to this FAST.\\n    MarketplaceAccessFacet(LibFast.data().marketplace).memberAddedToFast(member);\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n    emit MemberAdded(member);\\n  }\\n\\n   /// @notice See `IHasMembers`.\\n  function removeMember(address member)\\n      external override \\n      onlyGovernor(msg.sender) {\\n    // Remove member.\\n    LibFastAccess.data().memberSet.remove(member, false);\\n    // Notify token facet that this member was removed.\\n    FastTokenFacet(address(this)).beforeRemovingMember(member);\\n    // Notify marketplace that this member was removed from this FAST.\\n    MarketplaceAccessFacet(LibFast.data().marketplace).memberRemovedFromFast(member);\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n    emit MemberRemoved(member);\\n  }\\n\\n  /// Flags.\\n\\n  /**\\n   * @notice Retrieves flags for a given address.\\n   * @param a is the address to retrieve flags for.\\n   * @return A `Flags` struct.\\n   */\\n  function flags(address a)\\n      external view returns(Flags memory) {\\n    LibFastAccess.Data storage s = LibFastAccess.data();\\n    return\\n      Flags({\\n        isGovernor: s.governorSet.contains(a),\\n        isMember: s.memberSet.contains(a)\\n      });\\n  }\\n}\\n\",\"keccak256\":\"0x045df3c847ce4d885a041293c5874be4b332cee02946e2790acf1deea925a994\",\"license\":\"MIT\"},\"contracts/fast/FastFrontendFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFastAccess.sol';\\nimport './lib/LibFastToken.sol';\\n\\n\\n/**\\n * @notice A facet dedicated to view / UI only methods. This facet should never hold any method that\\n * is not either `pure` or `view`, except to emit events.\\n */\\ncontract FastFrontendFacet is AFastFacet {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  // Data structures.\\n\\n  /**\\n   * @notice This struct groups the common attributes of a FAST.\\n   * @dev This struct shouldn't be used in internal storage.\\n   */\\n  struct Details {\\n    /// @notice The `address` of the FAST.\\n    address addr;\\n    /// @notice The `name` of the FAST (ERC20).\\n    string name;\\n    /// @notice The `symbol` of the FAST (ERC20).\\n    string symbol;\\n    /// @notice The `decimals` of the FAST (ERC20).\\n    uint8 decimals;\\n    /// @notice The `totalSupply` of the FAST (ERC20).\\n    uint256 totalSupply;\\n    /// @notice The number of transfer credits the FAST currently has.\\n    uint256 transferCredits;\\n    /// @notice Whether the FAST is semi public or not.\\n    bool isSemiPublic;\\n    /// @notice Whether the FAST has a fixed supply or continious.\\n    bool hasFixedSupply;\\n    /// @notice The reserve balance.\\n    uint256 reserveBalance;\\n    /// @notice The Ether balance.\\n    uint256 ethBalance;\\n    /// @notice The number of members the FAST has.\\n    uint256 memberCount;\\n    /// @notice The number of governors for the FAST.\\n    uint256 governorCount;\\n  }\\n\\n  /**\\n   * @notice Member level details.\\n   * @dev This struct shouldn't be used in internal storage.\\n   */\\n  struct MemberDetails {\\n    /// @notice The Member's address.\\n    address addr;\\n    /// @notice The Member's balance.\\n    uint256 balance;\\n    uint256 ethBalance;\\n    /// @notice Whether the Member is also a Governor.\\n    bool isGovernor;\\n  }\\n\\n  /**\\n   * @notice Governor level details.\\n   * @dev Note that **this struct shouldn't be used in internal storage**.\\n   */\\n  struct GovernorDetails {\\n    /// @notice The Governor's address.\\n    address addr;\\n    uint256 ethBalance;\\n    /// @notice Whether the Governor is also a Member.\\n    bool isMember;\\n  }\\n\\n  // Emitters.\\n\\n  /**\\n   * @notice Called by diamond facets, signals that FAST details may have changed.\\n   * \\n   * Business logic:\\n   * - Modifiers:\\n   *   - Requires the caller to be another facet of the diamond.\\n   * Emits `DetailsChanged`, see `IFastEvents.DetailsChanged`\\n   */\\n  function emitDetailsChanged()\\n      external onlyDiamondFacet {\\n    LibFastAccess.Data storage accessData = LibFastAccess.data();\\n    LibFastToken.Data storage tokenData = LibFastToken.data();\\n    emit DetailsChanged({\\n      memberCount: accessData.memberSet.values.length,\\n      governorCount: accessData.governorSet.values.length,\\n      totalSupply: tokenData.totalSupply,\\n      transferCredits: tokenData.transferCredits,\\n      reserveBalance: tokenData.balances[LibConstants.ZERO_ADDRESS],\\n      ethBalance: payable(address(this)).balance\\n    });\\n  }\\n\\n  // Public functions.\\n\\n  /**\\n   * @notice Gets the details of a FAST.\\n   * @return The details for the current FAST, see `Details`.\\n   */\\n  function details()\\n      public view returns(Details memory) {\\n    LibFast.Data storage topStorage = LibFast.data();\\n    LibFastAccess.Data storage accessStorage = LibFastAccess.data();\\n    LibFastToken.Data storage tokenStorage = LibFastToken.data();\\n    return Details({\\n      addr: address(this),\\n      name: tokenStorage.name,\\n      symbol: tokenStorage.symbol,\\n      decimals: tokenStorage.decimals,\\n      totalSupply: tokenStorage.totalSupply,\\n      transferCredits: tokenStorage.transferCredits,\\n      isSemiPublic: topStorage.isSemiPublic,\\n      hasFixedSupply: topStorage.hasFixedSupply,\\n      reserveBalance: tokenStorage.balances[LibConstants.ZERO_ADDRESS],\\n      ethBalance: payable(address(this)).balance,\\n      memberCount: accessStorage.memberSet.values.length,\\n      governorCount: accessStorage.governorSet.values.length\\n    });\\n  }\\n\\n  /**\\n   * @notice Gets detailed member details.\\n   * @return A FAST member's details, see `MemberDetails`.\\n   */\\n  function detailedMember(address member)\\n      public view returns(MemberDetails memory) {\\n    return MemberDetails({\\n      addr: member,\\n      balance: LibFastToken.data().balances[member],\\n      ethBalance: member.balance,\\n      isGovernor: LibFastAccess.data().governorSet.contains(member)\\n    });\\n  }\\n\\n  /**\\n   * @notice Gets detailed governor details.\\n   * @return GovernorDetails See: `GovernorDetails`.\\n   */\\n  function detailedGovernor(address governor)\\n      public view returns(GovernorDetails memory) {\\n    return GovernorDetails({\\n      addr: governor,\\n      ethBalance: governor.balance,\\n      isMember: LibFastAccess.data().memberSet.contains(governor)\\n    });\\n  }\\n\\n  function paginateDetailedMembers(uint256 index, uint256 perPage)\\n      external view returns(MemberDetails[] memory, uint256) {\\n    (address[] memory members, uint256 nextCursor) =\\n      LibPaginate.addresses(LibFastAccess.data().memberSet.values, index, perPage);\\n    MemberDetails[] memory values = new MemberDetails[](members.length);\\n    uint256 length = members.length;\\n    for (uint256 i = 0; i < length;) {\\n      values[i] = detailedMember(members[i]);\\n      unchecked { ++i; }\\n    }\\n    return (values, nextCursor);\\n  }\\n\\n  function paginateDetailedGovernors(uint256 index, uint256 perPage)\\n      external view returns(GovernorDetails[] memory, uint256) {\\n    (address[] memory governors, uint256 nextCursor) =\\n      LibPaginate.addresses(LibFastAccess.data().governorSet.values, index, perPage);\\n    GovernorDetails[] memory values = new GovernorDetails[](governors.length);\\n    uint256 length =  governors.length;\\n    for (uint256 i = 0; i < length;) {\\n      values[i] = detailedGovernor(governors[i]);\\n      unchecked { ++i; }\\n    }\\n    return (values, nextCursor);\\n  }\\n}\\n\",\"keccak256\":\"0xbf625672b665e07d7ca3b1c9771962c8945dc87caa034a6c5c7a3d3b2d39b9b8\",\"license\":\"MIT\"},\"contracts/fast/FastHistoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibPaginate.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFastHistory.sol';\\n\\n\\n/**\\n * @notice Although past events could be scrapped from the chain, we want to\\n * the frontend to be capable of listing past transfers and minting / burning events.\\n * This facet is in charge of performing archival of these things.\\n */\\ncontract FastHistoryFacet is AFastFacet {\\n  /// Minting history-keeping methods.\\n\\n  /**\\n   * @notice This method is a callback for other facets to signal whenever new tokens are minted.\\n   * \\n   * Business logic:\\n   * - Requires that the caller must be another facet.\\n   * - Adds a supply proof item of type `LibFastHistory.SupplyOp.Mint` on top of the stack.\\n   */\\n  function minted(uint256 amount, string calldata ref)\\n      external onlyDiamondFacet() {\\n    // Keep track of the mint.\\n    LibFastHistory.data().supplyProofs.push(\\n      LibFastHistory.SupplyProof({\\n        op: LibFastHistory.SupplyOp.Mint,\\n        amount: amount,\\n        blockNumber: block.number,\\n        ref: ref\\n      })\\n    );\\n  }\\n\\n  /**\\n   * @notice This method is a callback for other facets to signal whenever new tokens are burnt.\\n   * \\n   * Business logic:\\n   * - Requires that the caller must be another facet.\\n   * - Adds a supply proof item of type `LibFastHistory.SupplyOp.Burn` on top of the stack.\\n   */\\n  function burnt(uint256 amount, string calldata ref)\\n      external onlyDiamondFacet() {\\n    // Keep track of the unmint.\\n    LibFastHistory.data().supplyProofs.push(\\n      LibFastHistory.SupplyProof({\\n        op: LibFastHistory.SupplyOp.Burn,\\n        amount: amount,\\n        blockNumber: block.number,\\n        ref: ref\\n      })\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the number of supply proofs (minting and burning together) ever created.\\n   * @return A `uint256`.\\n   */\\n  function supplyProofCount()\\n      external view returns(uint256) {\\n    return LibFastHistory.data().supplyProofs.length;\\n  }\\n\\n  /**\\n   * @notice Returns a page of supply proofs (minting and burning together).\\n   * @param cursor is the zero-based index where to start fetching records.\\n   * @param perPage is the number of items to return.\\n   * @return A `(LibFastHistory.SupplyProof[], uint256)` tuple containing a page of data and the cursor to the next page.\\n   */\\n  function paginateSupplyProofs(uint256 cursor, uint256 perPage)\\n      external view returns(LibFastHistory.SupplyProof[] memory, uint256) {\\n    return LibPaginate.supplyProofs(LibFastHistory.data().supplyProofs, cursor, perPage);\\n  }\\n\\n  /// Transfer history-keeping methods.\\n\\n  /**\\n   * @notice This method is a callback for other facets to signal whenever a transfer has completed successfuly.\\n   * \\n   * Business logic:\\n   * - Requires that the caller must be another facet.\\n   * - Keeps track of the operation in various tracking structures, so that it can be queried later by `sender` and `recipient`.\\n   * - Pushes a transfer proof to the main transfer proof tracking stack.\\n   */\\n  function transfered(address spender, address from, address to, uint256 amount, string calldata ref)\\n      external onlyDiamondFacet() {\\n    LibFastHistory.Data storage s = LibFastHistory.data();\\n    // Keep track of the transfer proof ID for the sender and for the recipient.\\n    s.transferProofInvolvements[from].push(s.transferProofs.length);\\n    s.transferProofInvolvements[to].push(s.transferProofs.length);\\n    // Keep track of the transfer proof globally.\\n    s.transferProofs.push(\\n      LibFastHistory.TransferProof({\\n        spender: spender,\\n        from: from,\\n        to: to,\\n        amount: amount,\\n        blockNumber: block.number,\\n        ref: ref\\n      })\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the number of transfer proofs ever created.\\n   * @return A `uint256`.\\n   */\\n  function transferProofCount()\\n      external view returns(uint256) {\\n    return LibFastHistory.data().transferProofs.length;\\n  }\\n\\n  /**\\n   * @notice Returns a page of transfer proofs.\\n   * @param cursor is the zero-based index where to start fetching records.\\n   * @param perPage is the number of items to return.\\n   * @return A `(LibFastHistory.TransferProof[], uint256)` tuple containing a page of data and the cursor to the next page.\\n   */\\n  function paginateTransferProofs(uint256 cursor, uint256 perPage)\\n      external view returns(LibFastHistory.TransferProof[] memory, uint256) {\\n    return LibPaginate.transferProofs(LibFastHistory.data().transferProofs, cursor, perPage);\\n  }\\n\\n  /**\\n   * @notice Counts all past inbound and outbound transfers involving a given address.\\n   * @param involvee is the address for which to get the transfer proofs.\\n   */\\n  function transferProofByInvolveeCount(address involvee)\\n      external view returns(uint256) {\\n    return LibFastHistory.data().transferProofInvolvements[involvee].length;\\n  }\\n\\n  /**\\n   * @notice Returns pages of indices of past inbound and outbound transfer proofs by involvee.\\n   * @dev This function is reading from an indexing data structure. Each index points to a record\\n   * in the main transfer proof storage, and can then be found in `transferProofs` at returned indices.\\n   * @param involvee is the address for which to retrieve a page of data.\\n   * @param cursor is where to start.\\n   * @param perPage is how many records at most should be returned.\\n  */\\n  function paginateTransferProofIndicesByInvolvee(address involvee, uint256 cursor, uint256 perPage)\\n      external view returns(uint256[] memory, uint256) {\\n    return LibPaginate.uint256s(LibFastHistory.data().transferProofInvolvements[involvee], cursor, perPage);\\n  }\\n\\n  /**\\n   * @notice Returns a page of inbound and outbound transfer proofs based on an involvee.#\\n   * @param involvee is the address for which to fetch the data.\\n   * @param cursor is where to start.\\n   * @param perPage is how many items at most to return.\\n   * @return A `(LibFastHistory.TransferProof[], uint256)` tuple containing the results and the cursor to the next page.\\n   */\\n  function paginateTransferProofsByInvolvee(address involvee, uint256 cursor, uint256 perPage)\\n      external view returns(LibFastHistory.TransferProof[] memory, uint256) {\\n    LibFastHistory.Data storage s = LibFastHistory.data();\\n    uint256[] storage collection  = s.transferProofInvolvements[involvee];\\n    uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n    LibFastHistory.TransferProof[] memory values = new LibFastHistory.TransferProof[](length);\\n    for (uint256 i = 0; i < length;) {\\n      values[i] = s.transferProofs[collection[cursor + i]];\\n      unchecked { ++i; }\\n    }\\n    return (values, cursor + length);\\n  }\\n}\\n\",\"keccak256\":\"0x62822d72ec1fe8073dca0c1853a4fd2e5709c91875fd30416d229c80f5f9de28\",\"license\":\"MIT\"},\"contracts/fast/FastTokenFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../interfaces/IERC20.sol';\\nimport '../interfaces/ICustomErrors.sol';\\nimport '../interfaces/IHasMembers.sol';\\nimport '../interfaces/IHasGovernors.sol';\\nimport '../lib/LibDiamond.sol';\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFastToken.sol';\\nimport './lib/IFast.sol';\\nimport '../marketplace/MarketplaceTokenHoldersFacet.sol';\\nimport './FastTopFacet.sol';\\nimport './FastAccessFacet.sol';\\nimport './FastHistoryFacet.sol';\\nimport './FastFrontendFacet.sol';\\n\\n\\ncontract FastTokenFacet is AFastFacet, IERC20 {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  // Minting methods.\\n\\n  /**\\n   * @notice Mints an amount of FAST tokens.\\n   *  A reference can be passed to identify why this happened for example.\\n   *\\n   * Business logic:\\n   * - Modifiers:\\n   *   - Requires the caller to be a member of the Issuer contract.\\n   * - Requires that either the token has continuous supply, or that no tokens have been minted yet.\\n   * - Increases the reserve balance by `amount`.\\n   * - Calls `FastHistoryFacet.minted`.\\n   * - Calls `FastFrontendFacet.emitDetailsChanged`.\\n   * - Emits a `Minted(amount, ref)` event.\\n   * @param amount The number of FAST tokens to mint.\\n   * @param ref A reference for this minting operation.\\n   */\\n  function mint(uint256 amount, string calldata ref)\\n      external\\n      onlyIssuerMember {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n    // We want to make sure that either of these two is true:\\n    // - The token doesn't have fixed supply.\\n    // - The token has fixed supply but has no tokens yet (First and only mint).\\n    if (FastTopFacet(address(this)).hasFixedSupply() && (s.totalSupply != 0 || this.balanceOf(address(0)) != 0)) {\\n      revert ICustomErrors.RequiresContinuousSupply();\\n    }\\n\\n    // Prepare the minted amount on the zero address.\\n    s.balances[address(0)] += amount;\\n\\n    // Keep track of the minting operation.\\n    FastHistoryFacet(address(this)).minted(amount, ref);\\n\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n    emit Minted(amount, ref);\\n  }\\n\\n  /**\\n   * @notice Burns an amount of FAST tokens.\\n   *  A reference can be passed to identify why this happened for example.\\n   *\\n   * Business logic.\\n   * - Modifiers:\\n   *   - Requires the caller to be a member of the Issuer contract.\\n   * - Requires that the token has continuous supply.\\n   * - Requires that there are enough funds in the reserve to cover for `amount` being burnt.\\n   * - Decreases the reserve balance by `amount`.\\n   * - Calls `FastHistoryFacet.burnt(amount, ref)`.\\n   * - Calls `FastFrontendFacet.emitDetailsChanged`.\\n   * - Emits a `Burnt(amount, ref)`.\\n   * @param amount The number of FAST tokens to mint.\\n   * @param ref A reference for this minting operation.\\n   */\\n  function burn(uint256 amount, string calldata ref)\\n      external\\n      onlyIssuerMember {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n\\n    if (FastTopFacet(address(this)).hasFixedSupply()) {\\n      revert ICustomErrors.RequiresContinuousSupply();\\n    }\\n\\n    // Remove the minted amount from the zero address.\\n    s.balances[address(0)] -= amount;\\n\\n    // Keep track of the minting operation.\\n    FastHistoryFacet(address(this)).burnt(amount, ref);\\n\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n    emit Burnt(amount, ref);\\n  }\\n\\n  /**\\n   * @notice Allows an Issuer member to move an arbitrary account's holdings back to the reserve,\\n   * as per regulatory requirements.\\n   *\\n   * Business logic:\\n   * - Modifiers:\\n   *   - Requires that the caller is a member of the Issuer contract.\\n   * - If the amount held by `holder` is not zero\\n   *   - The balance of `holder` should be set to zero.\\n   *   - The reserve's balance should be increased by how much was on the holder's account.\\n   *   - Total supply should be decreased by that amount too.\\n   * - The `holder`'s address should not be tracked as a token holder in this FAST anymore.\\n   * - The `holder`'s address should not be tracked as a token holder in the Marketplace anymore.\\n   * - A `Transfer(holder, reserve, amount)` event should be emited.\\n   * - If the amount previously held by `holder` was not zero,\\n   *   - Since the reserve balance and total supply have changed, the `FastFrontendFacet.emitDetailsChanged()` function should be called.\\n   * @param holder is the address for which to move the tokens from.\\n   */\\n  function retrieveDeadTokens(address holder)\\n      external\\n      onlyIssuerMember {\\n    // Cache how many tokens the holder has.\\n    uint256 amount = balanceOf(holder);\\n    // Note: The amount **can** be zero in this function.\\n\\n    // Grab a pointer to the token storage.\\n    LibFastToken.Data storage s = LibFastToken.data();\\n\\n    // These should only run if the amount is zero, as they result in a no-op.\\n    if (amount > 0) {\\n      // Set the holder balance to zero.\\n      s.balances[holder] = 0;\\n      // Increment the reserve's balance.\\n      s.balances[address(0)] += amount;\\n      // The tokens aren't in circulation anymore - decrease total supply.\\n      s.totalSupply -= amount;\\n    }\\n\\n    // Since the holder's account is now empty, make sure to keep track of it both\\n    // in this FAST and in the marketplace.\\n    s.tokenHolders.remove(holder, true);\\n    MarketplaceTokenHoldersFacet(LibFast.data().marketplace).fastBalanceChanged(holder, 0);\\n\\n    // This operation can be seen as a regular transfer between holder and reserve. Emit.\\n    emit Transfer(holder, address(0), amount);\\n\\n    // If amount wasn't zero, total supply and reserve balance have changed - emit.\\n    if (amount > 0) {\\n      FastFrontendFacet(address(this)).emitDetailsChanged();\\n    }\\n  }\\n\\n  // Tranfer Credit management.\\n\\n  /**\\n   * @notice Get the current `transferCredits` for this FAST.\\n   * @return Number of transfer credits remaining.\\n   */\\n  function transferCredits()\\n      external view returns(uint256) {\\n    return LibFastToken.data().transferCredits;\\n  }\\n\\n  /// @notice Adds `amount` of transfer credits to this FAST.\\n  function addTransferCredits(uint256 amount)\\n      external\\n      onlyIssuerMember {\\n    LibFastToken.data().transferCredits += amount;\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n    emit TransferCreditsAdded(msg.sender, amount);\\n  }\\n\\n  /**\\n   * @notice Drains the transfer credits from this FAST.\\n   *\\n   * Business logic:\\n   * - Modifiers:\\n   *   - Requires the caller to be a member of the Issuer contract.\\n   * - Emits a `TransferCreditsDrained(caller, previousTransferCredits)`.\\n   * - Sets transfer credits to zero.\\n   * - Calls `FastFrontendFacet.emitDetailsChanged`\\n   */\\n  function drainTransferCredits()\\n      external\\n      onlyIssuerMember {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n    // Emit!\\n    emit TransferCreditsDrained(msg.sender, s.transferCredits);\\n    // Drain credits.\\n    s.transferCredits = 0;\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n  }\\n\\n  // ERC20 implementation and transfer related methods.\\n\\n  /**\\n   * @notice The name of this FAST (ERC20 standard).\\n   * @return string Name of the FAST.\\n   */\\n  function name()\\n      external view returns(string memory) {\\n    return LibFastToken.data().name;\\n  }\\n\\n  /**\\n   * @notice The symbol of this FAST (ERC20 standard).\\n   * @return string Symbol of the FAST.\\n   */\\n  function symbol()\\n      external view returns(string memory) {\\n    return LibFastToken.data().symbol;\\n  }\\n\\n  /**\\n   * @notice The `decimals` of this FAST (ERC20 standard).\\n   * @return uint256 Number of decimals the FAST has.\\n   */\\n  function decimals()\\n      external view returns(uint256) {\\n    return LibFastToken.data().decimals;\\n  }\\n\\n  /**\\n   * @notice The total supply of the FAST (ERC20 standard).\\n   * @return uint256 Total supply of the FAST.\\n   */\\n  function totalSupply()\\n      external override view returns(uint256) {\\n    return LibFastToken.data().totalSupply;\\n  }\\n\\n  /**\\n   * @notice The balance of the passed owner (ERC20 standard).\\n   * @param owner The owners address to get the balance of.\\n   * @return uint256 The current balance of this owner's account.\\n   */\\n  function balanceOf(address owner)\\n      public view override returns(uint256) {\\n    return LibFastToken.data().balances[owner];\\n  }\\n\\n  /**\\n   * @notice See `performTransfer`, the spender will be equal to the `owner`, and the `ref` will be defauted. */\\n  function transfer(address to, uint256 amount)\\n      external override returns(bool) {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performTransfer(\\n      TransferArgs({\\n        spender: msg.sender,\\n        from: msg.sender,\\n        to: to,\\n        amount: amount,\\n        ref: LibFastToken.DEFAULT_TRANSFER_REFERENCE\\n      })\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @notice See `performTransfer`, the spender will be equal to the `owner`. */\\n  function transferWithRef(address to, uint256 amount, string calldata ref)\\n      external returns(bool) {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performTransfer(\\n      TransferArgs({\\n        spender: msg.sender,\\n        from: msg.sender,\\n        to: to,\\n        amount: amount,\\n        ref: ref\\n      })\\n    );\\n    return true;\\n  }\\n\\n  function allowance(address owner, address spender)\\n      public view override returns(uint256) {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n    // If the allowance being queried is from the zero address and the spender\\n    // is a governor, we want to make sure that the spender has full rights over it.\\n    if (owner == address(0)) {\\n      if (!FastAccessFacet(address(this)).isGovernor(spender)) {\\n        revert ICustomErrors.RequiresFastGovernorship(spender);\\n      }\\n      return s.balances[owner];\\n    }\\n    return s.allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @notice This method directly calls `performApproval`, setting its `from` paramter to the sender of\\n   * the transaction.\\n   * @param spender is the address to allow spending from the caller's wallet.\\n   * @param amount is how much to **increase** the allowance.\\n   */\\n  function approve(address spender, uint256 amount)\\n      external override returns(bool) {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performApproval(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice This method directly calls `performDisapproval`, setting its `from` parameter to the sender of\\n   * the transaction.\\n   * @param spender is the address to disallow spending from the caller's wallet.\\n   * @param amount is how much to **decrease** the allowance.\\n   */\\n  function disapprove(address spender, uint256 amount)\\n      external\\n      onlyMember(msg.sender)\\n      returns(bool) {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performDisapproval(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  /// @notice See `performTransfer`, the `ref` will be defaulted.\\n  function transferFrom(address from, address to, uint256 amount)\\n      external override returns(bool) {\\n    transferFromWithRef(from, to, amount, LibFastToken.DEFAULT_TRANSFER_REFERENCE);\\n    return true;\\n  }\\n\\n  /// @notice See `performTransfer`.\\n  function transferFromWithRef(address from, address to, uint256 amount, string memory ref)\\n      public returns(bool) {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performTransfer(\\n      TransferArgs({\\n        spender: msg.sender,\\n        from: from,\\n        to: to,\\n        amount: amount,\\n        ref: ref\\n      })\\n    );\\n    return true;\\n  }\\n\\n  // Allowances query operations.\\n\\n  function givenAllowanceCount(address owner)\\n      external view returns(uint256) {\\n    return LibFastToken.data().allowancesByOwner[owner].values.length;\\n  }\\n\\n  function paginateAllowancesByOwner(address owner, uint256 index, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(\\n      LibFastToken.data().allowancesByOwner[owner].values,\\n      index,\\n      perPage\\n    );\\n  }\\n\\n  function receivedAllowanceCount(address spender)\\n      external view returns(uint256) {\\n    return LibFastToken.data().allowancesBySpender[spender].values.length;\\n  }\\n\\n  function paginateAllowancesBySpender(address spender, uint256 index, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(\\n      LibFastToken.data().allowancesBySpender[spender].values,\\n      index,\\n      perPage\\n    );\\n  }\\n\\n  // These functions would be internal / private if we weren't using the diamond pattern.\\n  // Instead, they're `onlyDiamondFacet` - eg can only be called by facets of the current\\n  // FAST.\\n\\n  struct TransferArgs {\\n    address spender;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    string ref;\\n  }\\n\\n  /**\\n   * @notice This is the internal method that gets called whenever a transfer is initiated. Both `transfer`,\\n   * `transferWithRef`, and their variants internally call this function.\\n   *\\n   * Business logic:\\n   * - Modifiers:\\n   *   - Only facets of the current diamond should be able to call this.\\n   *   - Requires that `from` and `to` addresses are different.\\n   *   - Requires that `onlyTokenHolder` passes for the `from` address.\\n   *   - Requires that the `from` address is an active Marketplace contract member.\\n   *   - Requires that `onlyTokenHolder` passes for the `to` address.\\n   * - Requires that the `from` address has enough funds to cover for `amount`.\\n   * - Requires that the amount is a positive value.\\n   * - If the transfer is an allowance - e.g. the `spender` is not the same as the `from` address,\\n   *   - The allowance given by the `from` address to the `spender` covers for the `amount`.\\n   *     - If we are **not** transfering **from** the reserve,\\n   *       - Decreases the allowance given by `from` to `spender`.\\n   *         - If the new allowance reaches zero,\\n   *           - Stop tracking the allowance in the allowance lookup tables for both spending and receiving directions.\\n   * - Decreases the balance of the `owner` address.\\n   * - Increases the balance of the `to` address by `amount`.\\n   * - If we are **not** transfering **from** the reserve,\\n   *   - Requires that there are enough transfer credits to cover for `amount`.\\n   *   - Decreases the transfer credits by `amount`.\\n   * - If the `to` address is the reserve,\\n   *   - Decreases the total supply by `amount`.\\n   *   - Calls `FastFrontendFacet.emitDetailsChanged`.\\n   * - Else, if the `from` address is the reserve,\\n   *   - Increases the total supply by `amount`.\\n   *   - Calls `FastFrontendFacet.emitDetailsChanged`.\\n   * - Calls `FastHistoryFacet.transfered`.\\n   * - Emits a `Transfer(from, to, amount)` event.\\n   */\\n  function performTransfer(TransferArgs calldata p)\\n      external onlyDiamondFacet\\n      differentAddresses(p.from, p.to)\\n      onlyTokenHolder(p.from)\\n      onlyMarketplaceActiveMember(p.from)\\n      onlyTokenHolder(p.to) {\\n    // TODO: Make this function return instead of raising errors.\\n    // TODO: Make this function run even when a zero amount is passed. It should just emit.\\n    LibFastToken.Data storage s = LibFastToken.data();\\n\\n    // Make sure that there's enough funds.\\n    if (p.amount == 0) {\\n      revert ICustomErrors.UnsupportedOperation();\\n    }\\n    // Funds are moved from reserve... Must be a governor.\\n    else if (p.from == address(0) && !IHasGovernors(address(this)).isGovernor(p.spender)) {\\n      revert ICustomErrors.RequiresFastGovernorship(p.spender);\\n    }\\n\\n    // If this is an allowance transfer...\\n    if (p.spender != p.from) {\\n      // If the from account isn't the zero address...\\n      if (p.from != address(0)) {\\n        // Decrease allowance.\\n        uint256 newAllowance = s.allowances[p.from][p.spender] -= p.amount;\\n        // If the allowance reached zero, we want to remove that allowance from\\n        // the various other places where we keep track of it.\\n        if (newAllowance == 0) {\\n          s.allowancesByOwner[p.from].remove(p.spender, true);\\n          s.allowancesBySpender[p.spender].remove(p.from, true);\\n        }\\n      }\\n    }\\n\\n    // Keep track of the balances - `from` spends, `to` receives.\\n    uint256 fromBalance = (s.balances[p.from] -= p.amount);\\n    uint256 toBalance = (s.balances[p.to] += p.amount);\\n\\n    // Keep track of who has what FAST.\\n    LibFast.Data storage d = LibFast.data();\\n    MarketplaceTokenHoldersFacet(d.marketplace).fastBalanceChanged(p.from, fromBalance);\\n    MarketplaceTokenHoldersFacet(d.marketplace).fastBalanceChanged(p.to, toBalance);\\n\\n    // Keep track of who holds this token.\\n    balanceChanged(p.from, fromBalance);\\n    balanceChanged(p.to, toBalance);\\n\\n    // If the funds are not moving from the zero address, decrease transfer credits.\\n    if (p.from != address(0)) {\\n      s.transferCredits -= p.amount;\\n    }\\n\\n    // If the funds are going to the ZERO address, decrease total supply.\\n    if (p.to == address(0)) {\\n      s.totalSupply -= p.amount;\\n      // If funds at address zero changed, we can emit a top-level details change event.\\n      FastFrontendFacet(address(this)).emitDetailsChanged();\\n    }\\n    // If the funds are moving from the zero address, increase total supply.\\n    else if (p.from == address(0)) {\\n      s.totalSupply += p.amount;\\n      // If funds at address zero changed, we can emit a top-level details change event.\\n      FastFrontendFacet(address(this)).emitDetailsChanged();\\n    }\\n\\n    // Keep track of the transfer in the history facet.\\n    FastHistoryFacet(address(this)).transfered(p.spender, p.from, p.to, p.amount, p.ref);\\n\\n    // Emit!\\n    emit Transfer(p.from, p.to, p.amount);\\n  }\\n\\n  /**\\n   * @notice Increases the allowance given by `from` to `spender` by `amount`.\\n   * Note that this function should run and emit even if the amount passed is zero.\\n   * Business logic:\\n   * - Modifiers:\\n   *   - Only facets of the current diamond should be able to call this.\\n   *   - Requires that `onlyTokenHolder` passes for the `from` address.\\n   * - Requires that the `amount` is positive number.\\n   * - Increases the allowance given by `from` to `spender` by `amount`.\\n   * - Update the allowance lookup tables in both directions.\\n   * - Emits an `Approval(from, spender, amount)`.\\n   * @param from is the wallet from which to give the allowance.\\n   * @param spender is the receiver of the allowance.\\n   * @param amount is how much to **increase** the current allowance by.\\n   * \\n   * Note: This function runs when amount is zero, and will emit.\\n   */\\n  function performApproval(address from, address spender, uint256 amount)\\n      external\\n      onlyDiamondFacet\\n      onlyTokenHolder(from) {\\n    if (amount > 0) {\\n      LibFastToken.Data storage s = LibFastToken.data();\\n      // Note that we are not exactly following ERC20 here - we don't want to **set** the allowance to `amount`\\n      // to mitigate a possible attack.\\n      // See https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit#heading=h.gmr6zdg47087.\\n      s.allowances[from][spender] += amount;\\n    // Keep track of given and received allowances.\\n      s.allowancesByOwner[from].add(spender, true);\\n      s.allowancesBySpender[spender].add(from, true);\\n    }\\n\\n    // Emit!\\n    emit Approval(from, spender, amount);\\n  }\\n\\n  /**\\n   * @notice Decreases allowance given by `from` to `spender` by `amount`.\\n   *\\n   * Business logic:\\n   * - Modifiers:\\n   *   - Only facets of the current diamond should be able to call this.\\n   * - The allowance given by `from` to `spender` is decreased by `amount`.\\n   * - Whether the allowance reached zero, stop tracking it by owner and by spender.\\n   * - Emit a `Disapproval(from, spender, amount)` event.\\n   * \\n   * Note: This function runs when amount is zero, and will emit.\\n   */\\n  function performDisapproval(address from, address spender, uint256 amount)\\n      external\\n      onlyDiamondFacet {\\n    if (amount != 0) {\\n      LibFastToken.Data storage s = LibFastToken.data();\\n\\n      // Remove allowance.\\n      s.allowances[from][spender] -= amount;\\n\\n      // Whenever the allowance reaches zero, stop tracking it by owner and spender.\\n      if (s.allowances[from][spender] == 0) {\\n        s.allowancesByOwner[from].remove(spender, true);\\n        s.allowancesBySpender[spender].remove(from, true);\\n      }\\n    }\\n\\n    // Emit!\\n    emit Disapproval(from, spender, amount);\\n  }\\n\\n  // WARNING: This method contains two loops. We know that this should never\\n  // happen in solidity. However:\\n  // - In the context of our private chain, gas is cheap.\\n  // - It can only be called by a governor.\\n  function beforeRemovingMember(address member)\\n      external onlyDiamondFacet() {\\n    if (balanceOf(member) != 0) {\\n      revert ICustomErrors.RequiresPositiveBalance(member);\\n    }\\n\\n    LibFastToken.Data storage s = LibFastToken.data();\\n\\n    // Remove all given allowances.\\n    {\\n      address[] storage gaData = s.allowancesByOwner[member].values;\\n      while (gaData.length > 0) {\\n        // Make sure the call is performed externally so that we can mock.\\n        address spender = gaData[0];\\n        this.performDisapproval(member, spender, s.allowances[member][spender]);\\n      }\\n    }\\n\\n    // Remove all received allowances.\\n    {\\n      address[] storage raData = s.allowancesBySpender[member].values;\\n      while (raData.length > 0) {\\n        // Make sure the call is performed externally so that we can mock.\\n        address owner = raData[0];\\n        this.performDisapproval(owner, member, s.allowances[owner][member]);\\n      }\\n    }\\n  }\\n\\n  function holders()\\n      external view\\n      returns(address[] memory) {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n    return s.tokenHolders.values;\\n  }\\n\\n  function balanceChanged(address holder, uint256 balance)\\n      private {\\n    // Return early if this is the zero address.\\n    if (holder == address(0)) {\\n      return;\\n    }\\n\\n    LibFastToken.Data storage s = LibFastToken.data();\\n\\n    // If this is a positive balance and it doesn't already exist in the set, add address.\\n    if (balance > 0 && !s.tokenHolders.contains(holder)) {\\n      s.tokenHolders.add(holder, false);\\n    }\\n    // If the balance is 0 and it exists in the set, remove it.\\n    else if (balance == 0 && s.tokenHolders.contains(holder)) {\\n      s.tokenHolders.remove(holder, false);\\n    }\\n  }\\n\\n  // Modifiers.\\n\\n  /**\\n   * @notice Ensures that the given address is a member of the current FAST or the Zero Address.\\n   *\\n   * Business logic:\\n   *  - If the candidate is not the reserve,\\n   *    - If the fast is semi-public,\\n   *      - We require that candidate is a member of the Marketplace contract.\\n   *  - Otherwise,\\n   *    - Require that the candidate is a member of the Token contract.\\n   * @param candidate The address to check.\\n   */\\n  modifier onlyTokenHolder(address candidate) {\\n    // Only perform checks if the address is non-zero.\\n    if (candidate != address(0)) {\\n    // FAST is semi-public - the only requirement to hold tokens is to be an marketplace member.\\n      if (IFast(address(this)).isSemiPublic()) {\\n        if (!IHasMembers(LibFast.data().marketplace).isMember(candidate)) {\\n          revert ICustomErrors.RequiresMarketplaceMembership(candidate);\\n        }\\n      }\\n      // FAST is private, the requirement to hold tokens is to be a member of that FAST.\\n      else {\\n        if (!IHasMembers(address(this)).isMember(candidate)) {\\n          revert ICustomErrors.RequiresFastMembership(candidate);\\n        }\\n      }\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2b7e72880b830c644b9f901e484433e1c4b164bccce806e3ca4a82a82b8e70e4\",\"license\":\"MIT\"},\"contracts/fast/FastTopFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibConstants.sol';\\nimport '../lib/LibHelpers.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFast.sol';\\nimport './lib/IFastEvents.sol';\\nimport './FastFrontendFacet.sol';\\n\\ncontract FastTopFacet is AFastFacet {\\n  // Getters and setters for global flags.\\n\\n  /**\\n   * @notice Get the Issuer address.\\n   * @return Address of Issuer.\\n   */\\n  function issuerAddress()\\n      external view returns(address) {\\n    return LibFast.data().issuer;\\n  }\\n\\n  /**\\n   * @notice Get the Marketplace address.\\n   * @return address Address of Marketplace.\\n   */\\n  function marketplaceAddress()\\n      external view returns(address) {\\n    return LibFast.data().marketplace;\\n  }\\n\\n  /**\\n   * @notice Is this FAST a semi public FAST?\\n   * @return bool Yes/no semi public.\\n   */\\n  function isSemiPublic()\\n      external view returns(bool) {\\n    return LibFast.data().isSemiPublic;\\n  }\\n\\n  /**\\n   * @notice Is this FAST a fixed supply FAST?\\n   * @return bool Yes/no fixed supply.\\n   */\\n  function hasFixedSupply()\\n      external view returns(bool) {\\n    return LibFast.data().hasFixedSupply;\\n  }\\n\\n  // Setters for global flags.\\n\\n  /**\\n   * @notice Allows to switch from a private scheme to a semi-public scheme,\\n   *  but not the other way around.\\n   * @param flag Set the semi public flag to true/false.\\n   */\\n  function setIsSemiPublic(bool flag)\\n      external\\n      onlyIssuerMember {\\n    // Someone is trying to toggle back to private?... No can do!\\n    if (this.isSemiPublic()) {\\n      revert ICustomErrors.UnsupportedOperation();\\n    }\\n    LibFast.data().isSemiPublic = flag;\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n  }\\n}\\n\",\"keccak256\":\"0x9723a82038484f28a837308d669b66d5c8a262bb5b3171cce1ba4a067e10f1dc\",\"license\":\"MIT\"},\"contracts/fast/lib/AFastFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibConstants.sol';\\nimport '../../lib/LibHelpers.sol';\\nimport '../../lib/LibAddressSet.sol';\\nimport '../../interfaces/ICustomErrors.sol';\\nimport '../../interfaces/IHasMembers.sol';\\nimport '../../interfaces/IHasGovernors.sol';\\nimport '../../interfaces/IHasActiveMembers.sol';\\nimport '../../interfaces/IERC173.sol';\\nimport '../lib/LibFast.sol';\\nimport './IFastEvents.sol';\\n\\n\\n/**\\n * @title Abstract FAST helper contract.\\n * @notice This abstract contract encapsulates modifiers allowing inheriting facets to guard against\\n * certain permissions.\\n */\\nabstract contract AFastFacet is IFastEvents {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Modifiers.\\n\\n  /// @notice Ensures that a method can only be called by another facet of the same diamond.\\n  modifier onlyDiamondFacet() {\\n    if (msg.sender != address(this)) {\\n      revert ICustomErrors.InternalMethod();\\n    }\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the owner of this diamond.\\n  modifier onlyDiamondOwner() {\\n    if (msg.sender != IERC173(address(this)).owner()) {\\n      revert ICustomErrors.RequiresDiamondOwnership(msg.sender);\\n    }\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier onlyDeployer() {\\n    if (msg.sender != LibConstants.DEPLOYER_CONTRACT) {\\n      revert ICustomErrors.InternalMethod();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a member of the Marketplace.\\n   * @param candidate The address to check.\\n   */\\n  modifier onlyMarketplaceMember(address candidate) {\\n    if (!IHasMembers(LibFast.data().marketplace).isMember(candidate)) {\\n      revert ICustomErrors.RequiresMarketplaceMembership(candidate);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures a candidate is an active member of the Marketplace.\\n   * @param candidate The address to check.\\n   */\\n  modifier onlyMarketplaceActiveMember(address candidate) {\\n    if (!IHasActiveMembers(LibFast.data().marketplace).isMemberActive(candidate)) {\\n      revert ICustomErrors.RequiresMarketplaceActiveMember(candidate);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the message sender is a member of the Issuer.\\n   */\\n  modifier onlyIssuerMember() {\\n    if (!IHasMembers(LibFast.data().issuer).isMember(msg.sender)) {\\n      revert ICustomErrors.RequiresIssuerMembership(msg.sender);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a governor of the FAST.\\n   * @param candidate The address to check.\\n   */\\n  modifier onlyGovernor(address candidate) {\\n    if (!IHasGovernors(address(this)).isGovernor(candidate)) {\\n      revert ICustomErrors.RequiresFastGovernorship(candidate);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a member of the FAST.\\n   * @param candidate The address to check.\\n   */\\n  modifier onlyMember(address candidate) {\\n    if (!IHasMembers(address(this)).isMember(candidate)) {\\n      revert ICustomErrors.RequiresFastMembership(candidate);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures address `a` and `b` are different.\\n   * @param a Address a\\n   * @param b Address b\\n   */\\n  modifier differentAddresses(address a, address b) {\\n    if (a == b) {\\n      revert ICustomErrors.RequiresDifferentSenderAndRecipient(a);\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xdb1e880bdefc806076dadc031fde99663b71c69f5ca0e1d7b60b99a9dec2a55a\",\"license\":\"MIT\"},\"contracts/fast/lib/IFast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/// @title The top-level all FAST diamonds must comply to.\\ninterface IFast {\\n  /**\\n   * @notice Queries whether the FAST is semi-public or closed.\\n   * @return A `bool` being `true` if the FAST is semi-public.\\n   */\\n  function isSemiPublic() external view returns(bool);\\n\\n  /**\\n   * @notice Queries whether the FAST has fixed or continuous supply.\\n   * @return A `bool` being `true` if the FAST has fixed supply.\\n   */\\n  function hasFixedSupply() external view returns(bool);\\n}\\n\",\"keccak256\":\"0xb4c06e0a41be3f4f50b29a5e3d35e3e7a802736fb75a5b06d6f2b4cf4f56acaf\",\"license\":\"MIT\"},\"contracts/fast/lib/IFastEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/**\\n * @title FAST events inventory.\\n * @notice An interface allowing to use events within the Diamond pattern without name colisions.\\n * @dev The idea is that as several facets can emit the same events, we don't want to have to re-declare\\n * the same event several time. This interface is a per-diamond central place for such event declaration.\\n */\\ninterface IFastEvents {\\n  // IHasMembers.\\n\\n  /**\\n   * @notice Emited when a member is added to the implementing contract.\\n   * @param member is the address of the added member.\\n   */\\n  event MemberAdded(address indexed member);\\n  /**\\n   * @notice Emited when a member is removed to the implementing contract.\\n   * @param member is the address of the removed member.\\n   */\\n  event MemberRemoved(address indexed member);\\n\\n  // IHasGovernors.\\n\\n  /**\\n   * @notice Emited when a governor is added to the implementing contract.\\n   * @param governor is the address of the added governor.\\n   */\\n  event GovernorAdded(address indexed governor);\\n  /**\\n   * @notice Emited when a governor is removed to the implementing contract.\\n   * @param governor is the address of the removed member.\\n   */\\n  event GovernorRemoved(address indexed governor);\\n\\n  // Issuance related events.\\n  /**\\n   * @notice Emited whenever an issuance happens in a FAST.\\n   * @param amount is the amount of tokens that have been minted.\\n   * @param ref is the reference associated with the minting operation.\\n   */\\n  event Minted(uint256 indexed amount, string indexed ref);\\n  /**\\n   * @notice Emited whenever an burning happens in a FAST.\\n   * @param amount is the amount of tokens that have been burnt.\\n   * @param ref is the reference associated with the burning operation.\\n   */\\n  event Burnt(uint256 indexed amount, string indexed ref);\\n\\n  // Transfer credits related events.\\n  /**\\n   * @notice Emited whenever transfer credits increase inside a FAST.\\n   * @param issuerMember is the address of the Issuer member who performed the operation.\\n   * @param amount is the number of issued transfer credits.\\n   */\\n  event TransferCreditsAdded(address indexed issuerMember, uint256 amount);\\n  /**\\n   * @notice Emited whenever transfer credits are drained inside a FAST.\\n   * @param issuerMember is the address of the Issuer member who performed the operation.\\n   * @param amount is the number of drained transfer credits.\\n   */\\n  event TransferCreditsDrained(address indexed issuerMember, uint256 amount);\\n\\n  // ERC20 stuff.\\n\\n  /// @notice See `ERC20.Transfer`.\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  /// @notice See `ERC20.Approval`.\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  /// @notice See `ERC20.Disapproval`.\\n  event Disapproval(address indexed owner, address indexed spender, uint256 value);\\n\\n  // General events.\\n\\n  /**\\n   * @notice This is an event that is fired whenever any of some of the FAST parameters\\n   * change, so that the frontend can react to it and refresh the general header\\n   * for that fast as well as the baseball cards in the FASTs list.\\n   * @param memberCount is the number of members in the FAST.\\n   * @param governorCount is the number of governors in the FAST.\\n   * @param totalSupply is the amount of tokens in circulation in the FAST.\\n   * @param transferCredits represents how many transfer credits are available inside the FAST.\\n   * @param reserveBalance is the balance of the zero-address (aka reserve) for the FAST.\\n   * @param ethBalance is the amount of Eth locked in the FAST.\\n   */\\n  event DetailsChanged(\\n    uint256 memberCount,\\n    uint256 governorCount,\\n    uint256 totalSupply,\\n    uint256 transferCredits,\\n    uint256 reserveBalance,\\n    uint256 ethBalance\\n  );\\n}\\n\",\"keccak256\":\"0x7ce33d04c780c18384f5164c8a04441aa9f3b20ac3cbe101b10f5d0d6a09df12\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/**\\n * @notice Top-level shared functionality for FAST diamonds.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFast {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0x80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705;\\n\\n  // Data structures.\\n\\n  /**\\n   * @notice The top-level data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice The internal pointer to the Issuer contract.\\n    address issuer;\\n    /// @notice The internal pointer to the Marketplace contract.\\n    address marketplace;\\n    /// @notice We have to track whether the token facet provides continuous minting or fixed supply.\\n    bool hasFixedSupply;\\n    /// @notice Whether or not this FAST requires to be a member to hold tokens.\\n    bool isSemiPublic;\\n  }\\n\\n  /**\\n   * @notice Returns the top-level storage for the calling FAST.\\n   * @return s a struct pointer for top-level FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xe5a46fc391b5dbead8199127742c18cbe6ff19153b15c3d632747b154b76326c\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n/**\\n * @notice This library centralises shared functionality between FAST diamonds facets that have to do with ACLs.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFastAccess {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage.Access'):\\n  bytes32 internal constant STORAGE_SLOT = 0x87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9a;\\n\\n  /**\\n   * @notice The access data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice We hold the list of the FAST governors in there.\\n    LibAddressSet.Data governorSet;\\n    /// @notice The FAST members are held in there.\\n    LibAddressSet.Data memberSet;\\n  }\\n\\n  /**\\n   * @notice Returns the access storage for the calling FAST.\\n   * @return s a struct pointer for access FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xb671ecfaa95bd5e9f46a01970fae2a814e640cb08d13a62fed595083683fccc3\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastHistory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/**\\n * @notice This library centralises shared functionality between FAST diamonds facets that have to do with transfer\\n * history tracking.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFastHistory {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage.History'):\\n  bytes32 internal constant STORAGE_SLOT = 0x6bc8b61a9dd5fc049ea98027492a801d74e35fdf4d80d7fecd551a16e88fdbb4;\\n\\n  // Storage structures.\\n\\n  /**\\n   * @notice The history data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice All minting proofs are kept here.\\n    SupplyProof[] supplyProofs;\\n    /// @notice All transfer proofs are kept here.\\n    TransferProof[] transferProofs;\\n    /// @notice All transfers indices involving a given address are kept here.\\n    mapping(address => uint256[]) transferProofInvolvements;\\n  }\\n\\n  // Other structures.\\n\\n  /// @notice A minting operation could either be to mint or burn tokens.\\n  enum SupplyOp { Mint, Burn }\\n\\n  /// @notice Minting operations are recorded for papertrail. This is the structure that keeps track of them.\\n  struct SupplyProof {\\n    /// @notice How...\\n    SupplyOp op;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /// @notice Every transfer in is recorded. This is the structure that keeps track of them.\\n  struct TransferProof {\\n    /// @notice Who spent...\\n    address spender;\\n    /// @notice Who performed the transfer...\\n    address from;\\n    /// @notice Who received...\\n    address to;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /**\\n   * @notice Returns the history storage for the calling FAST.\\n   * @return s a struct pointer for history FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x39b21b41198e6fa219cd8eec59124cda25395bf19174aa809c0c41d650765d73\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\n/**\\n * @notice This library centralises shared functionality between FAST diamonds facets that have to do with token related logic.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFastToken {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage.Token'):\\n  bytes32 internal constant STORAGE_SLOT = 0xb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261;\\n\\n  // Constants.\\n\\n  string internal constant DEFAULT_TRANSFER_REFERENCE = 'Unspecified - via ERC20';\\n\\n  // Data structures.\\n\\n  /**\\n   * @notice The token data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    // ERC20 related properties for this FAST Token.\\n    /// @notice The name of the FAST.\\n    string name;\\n    /// @notice The symbol for this FAST.\\n    string symbol;\\n    /// @notice The decimal points used by this FAST.\\n    uint8 decimals;\\n    /// @notice The amount of tokens in circulation.\\n    uint256 totalSupply;\\n    /**\\n   * @notice Every time a transfer is executed, the credit decreases by the amount of said transfer.\\n     * It becomes impossible to transact once it reaches zero, and must be provisioned by an Issuer member.\\n    */\\n    uint256 transferCredits;\\n    /// @notice Our members balances are held here.\\n    mapping(address => uint256) balances;\\n    // Allowances are stored here.\\n    /// @notice Allowance amounts are stored in here, via mapping of `owner.spender.amount`\\n    mapping(address => mapping(address => uint256)) allowances;\\n    /// @notice A reverse lookup table allowing to retrieve allowances given by owner.\\n    mapping(address => LibAddressSet.Data) allowancesByOwner;\\n    /// @notice A reverse lookup table allowing to retrieve allowances given by spender.\\n    mapping(address => LibAddressSet.Data) allowancesBySpender;\\n    // Token holders\\n    LibAddressSet.Data tokenHolders;\\n  }\\n\\n  /**\\n   * @notice Returns the token storage for the calling FAST.\\n   * @return s a struct pointer for token FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x2875453fbefe3ec24c3c69129e42a8edff9eadda6d44c4fe395e94f2892e8ee2\",\"license\":\"MIT\"},\"contracts/interfaces/ICustomErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\ninterface ICustomErrors {\\n  error AlreadyInitialized();\\n  error InternalMethod();\\n  error RequiresDiamondOwnership(address who);\\n  error RequiresFastContractCaller();\\n\\n  error RequiresIssuerMembership(address who);\\n  error RequiresMarketplaceMembership(address who);\\n  error RequiresMarketplaceActiveMember(address who);\\n  error RequiresMarketplaceDeactivatedMember(address who);\\n\\n  error RequiresFastGovernorship(address who);\\n  error RequiresFastMembership(address who);\\n  error RequiresNoFastMemberships(address who);\\n\\n  error DuplicateEntry();\\n  error UnsupportedOperation();\\n  error CannotSelfRemove(address who);\\n\\n  error RequiresContinuousSupply();\\n  error RequiresPositiveBalance(address holder);\\n  error RequiresDifferentSenderAndRecipient(address a);\\n}\\n\",\"keccak256\":\"0x3a53b4cd981cf0c192ae72e2951e1204119229fa6650c340517085d257d1d6c9\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n/// @title A facet providing diamond cut mechanisms.\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    /// a method with `delegatecall`.\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    /// _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x027d86defbac7ad01db7074bf8c62b16493ffc552fcd9d841fe20d282117ed3c\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title ERC173 Contract Ownership Standard\\n * @dev The ERC165 identifier for this interface is 0x7f5828d0.\\n */\\ninterface IERC173 {\\n    /// @notice This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @notice Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xdb5140cc2b82a3fa14aec9b29d77705e66a7b4ca5ea6ba6f4cd7364c636344df\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title ERC20 standard as defined in the EIP.\\ninterface IERC20 {\\n  /**\\n   * @notice Allows to query the total number of tokens in circulation.\\n   * @return An `uint256` representing how many tokens are currently in circulation.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Allows to query the balance of a given address.\\n   * @param account is the address for which the balance shall be queried.\\n   * @return An `uint256` - the balance for the given address.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @notice Moves `amount` tokens from the caller's account to `recipient`.\\n   * @param recipient is the address to which the funds should be sent to, if successful.\\n   * @param amount is the amount of tokens to transfef.\\n   * @return A `bool` which value is `true` when the operation was successful.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @notice Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner`\\n   * through `transferFrom`. This is zero by default.\\n   * @dev This value changes when `approve`, `disapprove` and `transferFrom` / `transferFromWithRef` are called.\\n   * @param owner is the owner of the funds.\\n   * @param spender is the address for which the allowance should be queried.\\n   * @return A `uint256` representing the remaining allowance of `spender` over `owner`'s funds.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @notice Increases the allowance of `spender` by `amount`.\\n   * @param spender is the address towards which the allowance should be given.\\n   * @return A `bool` set to `true` when the operation was successful.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @notice Attempts to transfer `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's allowance.\\n   * @return A `bool` set to `true` when the operation was successful.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x79731c983219a24087d3bb925b9dd5c3cb3c85ebfdcd45afce5826bc2d53710f\",\"license\":\"MIT\"},\"contracts/interfaces/IHasActiveMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/// @title An interface signifying that the inheriting contract implements the concept of active memberships.\\ninterface IHasActiveMembers {\\n  /**\\n   * @notice Queries whether a given account is active.\\n   * @param member is the address to query.\\n   * @return A `bool` set to `true` if the candidate is an active member.\\n   */\\n  function isMemberActive(address member) external view returns(bool);\\n\\n  /**\\n   * @notice Deactivates a given member address.\\n   * @param member is the address to deactivate.\\n   */\\n  function deactivateMember(address payable member) external;\\n\\n  /**\\n   * @notice Activates a given member address.\\n   * @param member is the address to activate.\\n   */\\n  function activateMember(address member) external;\\n}\\n\",\"keccak256\":\"0xe82489064310ba738b47a070409d96af5c86d755f7f9f6604e0ec2257ab27c08\",\"license\":\"MIT\"},\"contracts/interfaces/IHasGovernors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/// @title An interface signifying that the inheriting contract implements the concept of governorship ACLs.\\ninterface IHasGovernors {\\n  /**\\n   * @notice Queries whether a given address is a governor or not.\\n   * @param candidate is the address to test.\\n   * @return A `bool` equal to `true` when `candidate` is a governor.\\n   */\\n  function isGovernor(address candidate) external view returns(bool);\\n\\n  /**\\n   * @notice Queries the number of governors.\\n   * @return An `uint256`.\\n   */\\n  function governorCount() external view returns(uint256);\\n\\n  /**\\n   * @notice Queries pages of governors based on a start index and a page size.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginateGovernors(uint256 index, uint256 perPage) external view returns(address[] memory, uint256);\\n\\n  /**\\n   * @notice Adds a governor to the list of known governors.\\n   * @param governor is the address to be added.\\n   */\\n  function addGovernor(address payable governor) external;\\n\\n  /**\\n   * @notice Removes a governor from the list of known governors.\\n   * @param governor is the address to be removed.\\n   */\\n  function removeGovernor(address governor) external;\\n}\\n\",\"keccak256\":\"0xf80b84746be3c4ddab96aadf19078603eda1c9222981677b48a6d6726209eab6\",\"license\":\"MIT\"},\"contracts/interfaces/IHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/// @title An interface signifying that the inheriting contract implements the concept of membership ACLs.\\ninterface IHasMembers {\\n  /**\\n   * @notice Queries whether a given address is a member or not.\\n   * @param candidate is the address to test.\\n   * @return A `bool` equal to `true` when `candidate` is a member.\\n   */\\n  function isMember(address candidate) external view returns(bool);\\n\\n  /**\\n   * @notice Queries the number of members.\\n   * @return An `uint256`.\\n   */\\n  function memberCount() external view returns(uint256);\\n\\n  /**\\n   * @notice Queries pages of members based on a start index and a page size.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginateMembers(uint256 index, uint256 perPage) external view returns(address[] memory, uint256);\\n\\n  /**\\n   * @notice Adds a member to the list of known members.\\n   * @param candidate is the address to be added.\\n   */\\n  function addMember(address payable candidate) external;\\n\\n  /**\\n   * @notice Removes a member from the list of known members.\\n   * @param member is the address to be removed.\\n   */\\n  function removeMember(address member) external;\\n}\\n\",\"keccak256\":\"0xfc66597f16c7668a054f2bed1db32b85e2f240d9de257b5e38226daf8c891cd0\",\"license\":\"MIT\"},\"contracts/issuer/IssuerAccessFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../lib/LibHelpers.sol';\\nimport '../interfaces/ICustomErrors.sol';\\nimport '../interfaces/IHasMembers.sol';\\nimport '../fast/FastTopFacet.sol';\\nimport '../fast/FastTokenFacet.sol';\\nimport './lib/AIssuerFacet.sol';\\nimport './lib/LibIssuerAccess.sol';\\nimport './lib/IIssuerEvents.sol';\\nimport '../issuer/IssuerTopFacet.sol';\\n\\n\\ncontract IssuerAccessFacet is AIssuerFacet, IHasMembers {\\n  using LibAddressSet for LibAddressSet.Data;\\n  // Membership management.\\n\\n  /**\\n   * @notice Queries whether a given address is a member of this Issuer or not.\\n   * @param candidate The address to test.\\n   * @return A `boolean` flag.\\n   */\\n  function isMember(address candidate)\\n      external override view returns(bool) {\\n    return LibIssuerAccess.data().memberSet.contains(candidate);\\n  }\\n\\n  /**\\n   * @notice Counts the numbers of members present in this Issuer.\\n   * @return The number of members in this Issuer.\\n   */\\n  function memberCount()\\n      external override view returns(uint256) {\\n    return LibIssuerAccess.data().memberSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Paginates the members of this Issuer based on a starting cursor and a number of records per page.\\n   * @param cursor The index at which to start.\\n   * @param perPage How many records should be returned at most.\\n   * @return A `address[]` list of values at most `perPage` big.\\n   * @return A `uint256` index to the next page.\\n   */\\n  function paginateMembers(uint256 cursor, uint256 perPage)\\n      external override view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibIssuerAccess.data().memberSet.values, cursor, perPage);\\n  }\\n\\n  /**\\n   * @notice Adds a member to this Issuer member list.\\n   * @param member The address of the member to be added.\\n   * @notice Requires that the caller is a member of this Issuer.\\n   * @notice Emits a `IHasMembers.MemberAdded` event.\\n   */\\n  function addMember(address payable member)\\n      external override\\n      onlyMember(msg.sender) {\\n    // Add the member to our list.\\n    LibIssuerAccess.data().memberSet.add(member, false);\\n    // Emit!\\n    emit MemberAdded(member);\\n  }\\n\\n  /**\\n   * @notice Removes a member from this Issuer.\\n   * @param member The address of the member to be removed.\\n   * @notice Requires that the caller is a member of this Issuer.\\n   * @notice Emits a `IHasMembers.MemberRemoved` event.\\n   */\\n  function removeMember(address member)\\n      external override\\n      onlyDiamondOwner() {\\n    // Remove the member from the set.\\n    LibIssuerAccess.data().memberSet.remove(member, false);\\n    // Emit!\\n    emit MemberRemoved(member);\\n  }\\n\\n  /** @notice Callback from FAST contracts allowing the Issuer contract to keep track of governorships.\\n   * @param governor The governor added to a FAST.\\n   */\\n  function governorAddedToFast(address governor)\\n      external {\\n    // Verify that the given address is in fact a registered FAST contract.\\n    if (!IssuerTopFacet(address(this)).isFastRegistered(msg.sender)) {\\n      revert ICustomErrors.RequiresFastContractCaller();\\n    }\\n    // Keep track of the governorship.\\n    LibIssuerAccess.data().fastGovernorships[governor].add(msg.sender, false);\\n\\n    emit GovernorshipAdded(msg.sender, governor);\\n  }\\n\\n  /** @notice Callback from FAST contracts allowing the Issuer contract to keep track of governorships.\\n   * @param governor The governor removed from a FAST.\\n   */\\n  function governorRemovedFromFast(address governor)\\n      external {\\n    // Verify that the given address is in fact a registered FAST contract.\\n    if (!IssuerTopFacet(address(this)).isFastRegistered(msg.sender)) {\\n      revert ICustomErrors.RequiresFastContractCaller();\\n    }\\n    // Remove the tracked governorship.\\n    LibIssuerAccess.data().fastGovernorships[governor].remove(msg.sender, false);\\n\\n    emit GovernorshipRemoved(msg.sender, governor);\\n  }\\n\\n  /** @notice Returns a list of FASTs that the passed address is a governor of.\\n   * @param governor is the address to check governorships of.\\n   * @param cursor is the index at which to start.\\n   * @param perPage is how many records should be returned at most.\\n   * @return A `address[]` list of values at most `perPage` big.\\n   * @return A `uint256` index to the next page.\\n   */\\n  function paginateGovernorships(address governor, uint256 cursor, uint256 perPage)\\n      external view\\n      returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibIssuerAccess.data().fastGovernorships[governor].values, cursor, perPage);\\n  }\\n}\\n\",\"keccak256\":\"0xb95970802adbca6911d9126203d6fde91a5bceb6e4373836d8f95c1693fe5db0\",\"license\":\"MIT\"},\"contracts/issuer/IssuerTopFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../interfaces/ICustomErrors.sol';\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../lib/LibHelpers.sol';\\nimport '../fast/FastTopFacet.sol';\\nimport '../fast/FastTokenFacet.sol';\\nimport './lib/AIssuerFacet.sol';\\nimport './lib/LibIssuer.sol';\\n\\n\\ncontract IssuerTopFacet is AIssuerFacet {\\n  using LibAddressSet for LibAddressSet.Data;\\n  // FAST management related methods.\\n\\n  /**\\n   * @notice Queries whether a given address is a known and registered FAST contract.\\n   * @param fast The address of the contract to check.\\n   * @return A boolean.\\n   */\\n  function isFastRegistered(address fast)\\n      external view returns(bool) {\\n    return LibIssuer.data().fastSet.contains(fast);\\n  }\\n\\n  /**\\n   * @notice Allows to retrieve the address of a FAST diamond given its symbol.\\n   * @param symbol The symbol of the FAST diamond to get the address of.\\n   * @return The address of the corresponding FAST diamond, or the Zero Address if not found.\\n   */\\n  function fastBySymbol(string calldata symbol)\\n      external view returns(address) {\\n    return LibIssuer.data().fastSymbols[symbol];\\n  }\\n\\n  /**\\n   * @notice Allows the registration of a given FAST diamond with this Issuer.\\n   * @param fast The address of the FAST diamond to be registered.\\n   * @notice Requires that the caller is a member of this Issuer.\\n   * @notice Emits a `FastRegistered` event.\\n   */\\n  function registerFast(address fast)\\n      external\\n      onlyMember(msg.sender) {\\n    LibIssuer.Data storage s = LibIssuer.data();\\n    string memory symbol = FastTokenFacet(fast).symbol();\\n    if (s.fastSymbols[symbol] != address(0)) {\\n      revert ICustomErrors.DuplicateEntry();\\n    }\\n\\n    // Add the FAST to our list.\\n    s.fastSet.add(fast, false);\\n    // Add the fast symbol to our list.\\n    s.fastSymbols[symbol] = fast;\\n\\n    // Emit!\\n    emit FastRegistered(fast);\\n  }\\n\\n  /**\\n   * @notice Counts the number of FAST diamonds registered with this Issuer.\\n   * @return The number of FAST diamonds registered with this Issuer.\\n   */\\n  function fastCount()\\n      external view returns(uint256) {\\n    return LibIssuer.data().fastSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Paginates the FAST diamonds registered with this Issuer based on a starting cursor and a number of records per page.\\n   * @param cursor The index at which to start.\\n   * @param perPage How many records should be returned at most.\\n   * @return A `address[]` list of values at most `perPage` big.\\n   * @return A `uint256` index to the next page.\\n   */\\n  function paginateFasts(uint256 cursor, uint256 perPage)\\n      external view\\n      returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibIssuer.data().fastSet.values, cursor, perPage);\\n  }\\n}\\n\",\"keccak256\":\"0x7e2548266798fee3c2c9731be671b1211baa013b0fc0742b59d868508c9d257e\",\"license\":\"MIT\"},\"contracts/issuer/lib/AIssuerFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibConstants.sol';\\nimport '../../lib/LibHelpers.sol';\\nimport '../../lib/LibAddressSet.sol';\\nimport '../../interfaces/IERC173.sol';\\nimport '../../interfaces/ICustomErrors.sol';\\nimport '../lib/LibIssuerAccess.sol';\\nimport './IIssuerEvents.sol';\\n\\n\\n/**\\n* @notice This abstract contract encapsulates modifiers allowing inheriting facets to guard against\\n* certain permissions.\\n*/\\nabstract contract AIssuerFacet is IIssuerEvents {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Modifiers.\\n\\n  /// @notice Ensures that a method can only be called by another facet of the same diamond.\\n  modifier onlyDiamondFacet() {\\n    if (msg.sender != address(this)) {\\n      revert ICustomErrors.InternalMethod();\\n    }\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the owner of this diamond.\\n  modifier onlyDiamondOwner() {\\n    if (msg.sender != IERC173(address(this)).owner()) {\\n      revert ICustomErrors.RequiresDiamondOwnership(msg.sender);\\n    }\\n    _;\\n  }\\n\\n  /// @notice Ensures that the given address is a member of the current FAST.\\n  modifier onlyMember(address candidate) {\\n    if (!LibIssuerAccess.data().memberSet.contains(candidate)) {\\n      revert ICustomErrors.RequiresIssuerMembership(candidate);\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x099760fb7d3a05a01a56be457c890746f08fa0505e324a86ddb71bbabecd880d\",\"license\":\"MIT\"},\"contracts/issuer/lib/IIssuerEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n// WARNING: These events must be maintained 1:1 with LibIssuerEvents!\\n// They also should never be emitted directly, they only help us defining\\n// typescript types!\\ninterface IIssuerEvents {\\n  // Fast registration events.\\n\\n  /**\\n   * @notice Emited when a new FAST is registered.\\n   * @param fast The address of the newly registered FAST diamond.\\n   */\\n  event FastRegistered(address indexed fast);\\n\\n  // IHasMembers.\\n\\n  event MemberAdded(address indexed member);\\n  event MemberRemoved(address indexed member);\\n\\n  // Governors.\\n\\n  event GovernorshipRemoved(address indexed fast, address indexed governor);\\n  event GovernorshipAdded(address indexed fast, address indexed governor);\\n}\\n\",\"keccak256\":\"0xd4fde94e2c28af5c3f9b1be3c4550648d78af4477f97f17ec7dcf3aaae8884cb\",\"license\":\"MIT\"},\"contracts/issuer/lib/LibIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibIssuer {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Issuer.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0xd681d5f1de7bc4b7442c088939dc202585e09699e92a94c9717ace8d0f4fcaa5;\\n\\n  // Data structures.\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    // This is where we keep our list of deployed fast FASTs.\\n    LibAddressSet.Data fastSet;\\n    // We keep track of the FAST symbols that were already used.\\n    mapping(string => address) fastSymbols;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x9a8c697e32b3f8640cff2559aa286583b3f8e80f77a6048e525cd78c0e203135\",\"license\":\"MIT\"},\"contracts/issuer/lib/LibIssuerAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibIssuerAccess {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Issuer.storage.Access'):\\n  bytes32 internal constant STORAGE_SLOT = 0x3ceaa4d5edf9c96fbd56140abe6389d65a87143d4f11819874ff2fe0ae9574db;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    // This is where we hold our members data.\\n    LibAddressSet.Data memberSet;\\n    // For a given address we store list of FASTs where that address is a governor.\\n    mapping(address => LibAddressSet.Data) fastGovernorships;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x31753917f07b0daa09848aa3814e711d1c2e7a82fbc5ba1db9f0a1c391666a9c\",\"license\":\"MIT\"},\"contracts/lib/LibAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\nlibrary LibAddressSet {\\n  /// @notice Represents a list of addresses.\\n  struct Data {\\n    mapping(address => uint256) indices;\\n    address[] values;\\n  }\\n\\n  /**\\n   * @notice Adds an item into the storage set. If the address already exists in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be added.\\n   */\\n  function add(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && exists) { return; }\\n    require(!exists, 'Address already in set');\\n    d.indices[key] = d.values.length;\\n    d.values.push(key);\\n  }\\n\\n  /**\\n   * @notice Removes an item from the storage set. If the address does not exist in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be removed.\\n   */\\n  function remove(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && !exists) { return; }\\n    require(exists, 'Address does not exist in set');\\n    address keyToMove = d.values[d.values.length - 1];\\n    uint256 idxToReplace = d.indices[key];\\n    d.indices[keyToMove] = idxToReplace;\\n    d.values[idxToReplace] = keyToMove;\\n\\n    delete d.indices[key];\\n    d.values.pop();\\n  }\\n\\n  /**\\n   * @notice Tests whether or not a given item already exists in the set.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to test.\\n   * @return a boolean.\\n   */\\n  function contains(Data storage d, address key)\\n      internal view returns(bool) {\\n    return d.values.length == 0\\n      ? false\\n      : d.values[d.indices[key]] == key;\\n  }\\n}\\n\",\"keccak256\":\"0x7411b83b6853f77fd7b0fef32c5367edad2396ec83f82c45c81297e1d1376e50\",\"license\":\"MIT\"},\"contracts/lib/LibConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\nlibrary LibConstants {\\n  address internal constant ZERO_ADDRESS = address(0);\\n  address internal constant DEPLOYER_CONTRACT = 0x6DF2D25d8C6FD680730ee658b530A05a99BB769a;\\n\\n  string internal constant INSUFFICIENT_TRANSFER_CREDITS = 'Insufficient transfer credits';\\n  string internal constant REQUIRES_MARKETPLACE_MEMBERSHIP = 'Requires Marketplace membership';\\n  string internal constant REQUIRES_FAST_MEMBERSHIP = 'Requires FAST membership';\\n  string internal constant REQUIRES_DIFFERENT_SENDER_AND_RECIPIENT = 'Requires different sender and recipient';\\n}\",\"keccak256\":\"0xe27f317692bd3b51c815a3a463a6449dde9e686f4623dc40e4b2620e621a3c5c\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xb66c6dde5d24195adad7492253be1f4ebd580563d3f8847fec9ad8e6555498f4\",\"license\":\"MIT\"},\"contracts/lib/LibHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary LibHelpers {\\n}\\n\",\"keccak256\":\"0x37d04f54a3887bd432df5b25b29ed345758d66c90cb6393ad818fc55f1dd1435\",\"license\":\"MIT\"},\"contracts/lib/LibPaginate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../fast/lib/LibFastHistory.sol';\\n\\n\\nlibrary LibPaginate {\\n  function addresses(address[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(address[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      address[] memory values = new address[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function uint256s(uint256[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(uint256[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      uint256[] memory values = new uint256[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function supplyProofs(LibFastHistory.SupplyProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.SupplyProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.SupplyProof[] memory values = new LibFastHistory.SupplyProof[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function transferProofs(LibFastHistory.TransferProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.TransferProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.TransferProof[] memory values = new LibFastHistory.TransferProof[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n}\",\"keccak256\":\"0xb1c624707faa2688853bce5e4ad8e073bb67968a9de5134dfa80bb29fb73c8f4\",\"license\":\"MIT\"},\"contracts/marketplace/MarketplaceAccessFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../issuer/IssuerTopFacet.sol';\\nimport '../interfaces/ICustomErrors.sol';\\nimport '../interfaces/IHasMembers.sol';\\nimport '../interfaces/IHasActiveMembers.sol';\\nimport './lib/LibMarketplaceAccess.sol';\\nimport './lib/AMarketplaceFacet.sol';\\n\\n\\n/**\\n * @title The Marketplace Smart Contract.\\n * @notice The Marketplace Access facet is in charge of keeping track of marketplace members.\\n */\\ncontract MarketplaceAccessFacet is AMarketplaceFacet, IHasMembers, IHasActiveMembers {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  // Membership management.\\n\\n  /**\\n   * @notice Queries whether a given address is a member of this Marketplace or not.\\n   * @param candidate is the address to test.\\n   * @return A `boolean` flag.\\n   */\\n  function isMember(address candidate)\\n      external override view returns(bool) {\\n    return LibMarketplaceAccess.data().memberSet.contains(candidate);\\n  }\\n\\n  /**\\n   * @notice Counts the numbers of members present in this Marketplace.\\n   * @return The number of members in this marketplace.\\n   */\\n  function memberCount()\\n      external override view returns(uint256) {\\n    return LibMarketplaceAccess.data().memberSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Paginates the members of this Marketplace based on a starting cursor and a number of records per page.\\n   * @param cursor is the index at which to start.\\n   * @param perPage is how many records should be returned at most.\\n   * @return A `address[]` list of values at most `perPage` big.\\n   * @return A `uint256` index to the next page.\\n   */\\n  function paginateMembers(uint256 cursor, uint256 perPage)\\n      external override view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibMarketplaceAccess.data().memberSet.values, cursor, perPage);\\n  }\\n\\n  /**\\n   * @notice Adds a member to this Marketplace member list.\\n   * @param member is the address of the member to be added.\\n   * @notice Requires that the caller is a member of the linked Issuer.\\n   * @notice Emits a `IHasMembers.MemberAdded` event.\\n   */\\n  function addMember(address payable member)\\n      external override\\n      onlyIssuerMember {\\n    // Add the member to our list.\\n    LibMarketplaceAccess.data().memberSet.add(member, false);\\n    // Emit!\\n    emit MemberAdded(member);\\n  }\\n\\n  /**\\n   * @notice Removes a member from this Marketplace.\\n   * @param member is the address of the member to be removed.\\n   * @notice Requires that the caller is a member of the linked Issuer.\\n   * @notice Emits a `IHasMembers.MemberRemoved` event.\\n   */\\n  function removeMember(address member)\\n      external override\\n      onlyIssuerMember {\\n    LibMarketplaceAccess.Data storage s = LibMarketplaceAccess.data();\\n    // Ensure that member doesn't have any FAST membership.\\n    if (s.fastMemberships[member].values.length != 0) {\\n      revert ICustomErrors.RequiresNoFastMemberships(member);\\n    }\\n    // Remove member.\\n    s.memberSet.remove(member, false);\\n    // Emit!\\n    emit MemberRemoved(member);\\n  }\\n\\n  /**\\n   * @notice Allows to query FAST memberships for a given member address.\\n   * @param member Is the address to check.\\n   * @param cursor The index at which to start.\\n   * @param perPage How many records should be returned at most.\\n   */\\n  function fastMemberships(address member, uint256 cursor, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibMarketplaceAccess.data().fastMemberships[member].values, cursor, perPage);\\n  }\\n\\n  /**\\n   * @notice Callback from FAST contracts allowing the Marketplace contract to keep track of FAST memberships.\\n   * @param member The member for which a new FAST membership has been added.\\n   */\\n  function memberAddedToFast(address member) \\n      external {\\n    // Verify that the given address is in fact a registered FAST contract.\\n    if (!IssuerTopFacet(LibMarketplace.data().issuer).isFastRegistered(msg.sender)) {\\n      revert ICustomErrors.RequiresFastContractCaller();\\n    }\\n    // Keep track of the member's FAST membership.\\n    LibMarketplaceAccess.data().fastMemberships[member].add(msg.sender, false);\\n  }\\n\\n  /**\\n   * @notice Callback from FAST contracts allowing the Marketplace contract to keep track of FAST memberships.\\n   * @param member The member for which a FAST membership has been removed.\\n   */\\n  function memberRemovedFromFast(address member)\\n      external {\\n    if (!IssuerTopFacet(LibMarketplace.data().issuer).isFastRegistered(msg.sender)) {\\n      revert ICustomErrors.RequiresFastContractCaller();\\n    }\\n    // Remove the tracked membership.\\n    LibMarketplaceAccess.data().fastMemberships[member].remove(msg.sender, false);\\n  }\\n\\n  /**\\n   * @notice Given a member returns it's activation status.\\n   * @param member The member to check activation status on.\\n   */\\n  function isMemberActive(address member) external override view returns(bool) {\\n    return !LibMarketplaceAccess.data().deactivatedMemberSet.contains(member);\\n  }\\n\\n  /**\\n   * @notice Activates a member at the Marketplace level.\\n   * @param member The member to remove from the deactivation member set.\\n   */\\n  function activateMember(address member)\\n    external\\n    override\\n    onlyIssuerMember\\n    onlyMember(member) {\\n    // Guard against attempting to activate an already active member.\\n    if (this.isMemberActive(member)) {\\n      revert ICustomErrors.RequiresMarketplaceDeactivatedMember(member);\\n    }\\n\\n    // Remove the member from the deactivated members list.\\n    LibMarketplaceAccess.data().deactivatedMemberSet.remove(member, false);\\n\\n    // Emit!\\n    emit MemberActivated(member);\\n  }\\n\\n  /**\\n   * @notice Deactivates a member at the Marketplace level.\\n   * @param member The member to add to the deactivation member set.\\n   */\\n  function deactivateMember(address payable member)\\n    external\\n    override\\n    onlyIssuerMember\\n    onlyMember(member) {\\n    // Guard against attempting to deactivate an already deactivated member.\\n    if (!this.isMemberActive(member)) {\\n      revert ICustomErrors.RequiresMarketplaceActiveMember(member);\\n    }\\n\\n    // Add the member to the deactivated members list.\\n    LibMarketplaceAccess.data().deactivatedMemberSet.add(member, false);\\n\\n    // Emit!\\n    emit MemberDeactivated(member);\\n  }\\n}\\n\",\"keccak256\":\"0x00f2535771f674f76fb906e2e766cf9aa5e267c4914167881037bd37cd6e6e79\",\"license\":\"MIT\"},\"contracts/marketplace/MarketplaceTokenHoldersFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport './lib/AMarketplaceFacet.sol';\\nimport '../issuer/IssuerTopFacet.sol';\\nimport '../interfaces/IERC20.sol';\\nimport '../interfaces/ICustomErrors.sol';\\n\\n/** @dev The Marketplace FAST balances facet.\\n */\\ncontract MarketplaceTokenHoldersFacet is AMarketplaceFacet {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /** @dev The callback used when a balance changes on a FAST.\\n   */\\n  function fastBalanceChanged(address account, uint256 balance)\\n    external {\\n    // Return early if this is the zero address.\\n    if (account == address(0)) {\\n      return;\\n    }\\n\\n    // Verify that the given address is in fact a registered FAST contract.\\n    if (!IssuerTopFacet(LibMarketplace.data().issuer).isFastRegistered(msg.sender)) {\\n      revert ICustomErrors.RequiresFastContractCaller();\\n    }\\n\\n    // Get the storage pointer and balance of the token holder.\\n    LibMarketplaceTokenHolders.Data storage s = LibMarketplaceTokenHolders.data();\\n\\n    // If this is a positive balance and it doesn't already exist in the set, add address.\\n    if (balance > 0 && !s.fastHoldings[account].contains(msg.sender)) {\\n      s.fastHoldings[account].add(msg.sender, false);\\n    }\\n    // If the balance is 0 and it exists in the set, remove it.\\n    else if (balance == 0 && s.fastHoldings[account].contains(msg.sender)) {\\n      s.fastHoldings[account].remove(msg.sender, false);\\n    }\\n  }\\n\\n  /** @dev A way to get a list of FASTs for an account.\\n   *  @return list of FAST addresses.\\n   */\\n  function holdings(address account)\\n    external view\\n    returns(address[] memory) {\\n    LibMarketplaceTokenHolders.Data storage s = LibMarketplaceTokenHolders.data();\\n    return s.fastHoldings[account].values;\\n  }\\n}\\n\",\"keccak256\":\"0x188ae294ded02ff1c906c9feb73b0fe9a3467d75d0059cda38dbe3dc5efee8de\",\"license\":\"MIT\"},\"contracts/marketplace/lib/AMarketplaceFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibConstants.sol';\\nimport '../../lib/LibAddressSet.sol';\\nimport '../lib/LibMarketplace.sol';\\nimport '../lib/LibMarketplaceAccess.sol';\\nimport '../lib/LibMarketplaceTokenHolders.sol';\\nimport '../../interfaces/IERC173.sol';\\nimport '../../interfaces/ICustomErrors.sol';\\nimport '../../interfaces/IHasMembers.sol';\\nimport './IMarketplaceEvents.sol';\\n\\n\\n/**\\n* @notice This contract is a group of modifiers that can be used by any Marketplace facets to guard against\\n*       certain permissions.\\n*/\\nabstract contract AMarketplaceFacet is IMarketplaceEvents {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  // Modifiers.\\n\\n  /// @notice Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier onlyDeployer() {\\n    if (msg.sender != LibConstants.DEPLOYER_CONTRACT) {\\n      revert ICustomErrors.InternalMethod();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Requires that the message sender is a member of the linked Issuer.\\n   */\\n  modifier onlyIssuerMember() {\\n    if (!IHasMembers(LibMarketplace.data().issuer).isMember(msg.sender)) {\\n      revert ICustomErrors.RequiresIssuerMembership(msg.sender);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Requires that the given address is a member of the marketplace.\\n   * @param candidate is the address to be checked.\\n   */\\n  modifier onlyMember(address candidate) {\\n    if (!LibMarketplaceAccess.data().memberSet.contains(candidate)) {\\n      revert ICustomErrors.RequiresMarketplaceMembership(candidate);\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xd14965aa848acdac5535c52e10aefae2783b629129e68b81ed5122ec41f155ee\",\"license\":\"MIT\"},\"contracts/marketplace/lib/IMarketplaceEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\ninterface IMarketplaceEvents {\\n  // IHasMembers.\\n\\n  event MemberAdded(address indexed member);\\n  event MemberRemoved(address indexed member);\\n\\n  // IHasActiveMembers.\\n  event MemberActivated(address indexed member);\\n  event MemberDeactivated(address indexed member);\\n}\\n\",\"keccak256\":\"0xd545ac5cf59c3a0539355ced9bc52438ff03d2f98f46fa2fd4ba777586ead176\",\"license\":\"MIT\"},\"contracts/marketplace/lib/LibMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibMarketplace {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Marketplace.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0xb59ec141376cee83f618e10e881bbb4789cdeee27e0d441a8c37ead3cb8b93c1;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice The internal pointer to the Issuer contract.\\n    address issuer;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xc1e77e5ff5f05952b5928fcef4327355dedf57623ca3f7d72fea54021aaa9ed3\",\"license\":\"MIT\"},\"contracts/marketplace/lib/LibMarketplaceAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibMarketplaceAccess {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Marketplace.storage.Access'):\\n  bytes32 internal constant STORAGE_SLOT = 0xecb992c7a1185ca18ac50bc1672192fb67e7c3e74465887a8fcaab265dab37bd;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we hold our members data.\\n    LibAddressSet.Data memberSet;\\n    /// @notice This is where we keep track of our member FAST memberships.\\n    mapping(address => LibAddressSet.Data) fastMemberships;\\n    /// @notice This is where we keep track of our deactivated memberships.\\n    LibAddressSet.Data deactivatedMemberSet;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x23f7f94fb2ceebedccfae17ca552292fb9c76b835fee2127a845b42e2af68284\",\"license\":\"MIT\"},\"contracts/marketplace/lib/LibMarketplaceTokenHolders.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibMarketplaceTokenHolders {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Marketplace.TokenHolders.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0xecf50453542504034bd40d376fb1408ada3025f2fe86ca1b9b4b1440b8d4a2f4;\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    /// @dev The tracked FAST holdings of a user.\\n    mapping(address => LibAddressSet.Data) fastHoldings;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xbf26680c8a06a75be462cf155feb163863762646239ec5ad26ca91abc52ae10c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613fe0806100206000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636bd7bd25116100f95780639c999d9011610097578063dd62ed3e11610071578063dd62ed3e146104aa578063ddee550c146104bd578063e8edd0e3146104c5578063fbabdb06146104d857600080fd5b80639c999d9014610471578063a9059cbb14610484578063c485bb961461049757600080fd5b806377097fc8116100d357806377097fc8146103e95780638188f71c146103fc57806381a8f2431461041157806395d89b411461046957600080fd5b80636bd7bd251461036e57806370a08231146103815780637641e6f3146103d657600080fd5b8063300059161161016657806344890ae01161014057806344890ae01461030e5780635480699a146103215780635d7b590f146103345780636ba09c5c1461034757600080fd5b806330005916146102bc578063313ce567146102d15780633a868224146102fb57600080fd5b806318160ddd1161019757806318160ddd146102615780631fe02e531461028857806323b872dd146102a957600080fd5b806306675ba7146101be57806306fdde0314610229578063095ea7b31461023e575b600080fd5b6102166101cc36600461386c565b73ffffffffffffffffffffffffffffffffffffffff1660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8269602052604090206001015490565b6040519081526020015b60405180910390f35b6102316104eb565b60405161022091906138f2565b61025161024c366004613905565b61059f565b6040519015158152602001610220565b7fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826554610216565b61029b61029636600461392f565b61063a565b6040516102209291906139b3565b6102516102b73660046139d5565b61069c565b6102cf6102ca366004613a11565b6106ea565b005b7fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb82645460ff16610216565b6102cf61030936600461386c565b6108b0565b6102cf61031c366004613a2a565b610be2565b6102cf61032f3660046139d5565b611b8b565b6102cf61034236600461386c565b611f9f565b7fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826654610216565b6102cf61037c3660046139d5565b6122c0565b61021661038f36600461386c565b73ffffffffffffffffffffffffffffffffffffffff1660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8267602052604090205490565b6102cf6103e4366004613aae565b612496565b6102cf6103f7366004613aae565b61278e565b610404612b16565b6040516102209190613afa565b61021661041f36600461386c565b73ffffffffffffffffffffffffffffffffffffffff1660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826a602052604090206001015490565b610231612ba8565b61029b61047f36600461392f565b612bd9565b610251610492366004613905565b612c2f565b6102516104a5366004613b3c565b612cdc565b6102166104b8366004613c36565b612d93565b6102cf612f1a565b6102516104d3366004613c69565b6130ee565b6102516104e6366004613905565b6131e2565b60607fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261600101805461051c90613cc3565b80601f016020809104026020016040519081016040528092919081815260200182805461054890613cc3565b80156105955780601f1061056a57610100808354040283529160200191610595565b820191906000526020600020905b81548152906001019060200180831161057857829003601f168201915b5050505050905090565b6040517f5480699a00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526000903090635480699a906064015b600060405180830381600087803b15801561061757600080fd5b505af115801561062b573d6000803e3d6000fd5b50505050600190505b92915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb82696020526040812060609190610690906001018585613343565b91509150935093915050565b60006106df8484846040518060400160405280601781526020017f556e737065636966696564202d20766961204552433230000000000000000000815250612cdc565b506001949350505050565b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705546040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063a230c52490602401602060405180830381865afa15801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190613d17565b6107dd576040517f1dd41c4d0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b807fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826160050160008282546108119190613d68565b925050819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561086057600080fd5b505af1158015610874573d6000803e3d6000fd5b50506040518381523392507f7cc75678011427765ae1f965e47e04223c08302df0151ddbf2df44f9e8572c37915060200160405180910390a250565b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705546040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063a230c52490602401602060405180830381865afa158015610942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109669190613d17565b61099e576040517f1dd41c4d0000000000000000000000000000000000000000000000000000000081523360048201526024016107d4565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826760205260409020547fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb82618115610a6b5773ffffffffffffffffffffffffffffffffffffffff8316600090815260068201602052604080822082905581805281208054849290610a4a908490613d68565b9250508190555081816004016000828254610a659190613d80565b90915550505b610a7a600a8201846001613464565b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705600101546040517fc2a11fb300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152600060248301529091169063c2a11fb390604401600060405180830381600087803b158015610b1057600080fd5b505af1158015610b24573d6000803e3d6000fd5b50506040518481526000925073ffffffffffffffffffffffffffffffffffffffff861691507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a38115610bdd573073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610bc457600080fd5b505af1158015610bd8573d6000803e3d6000fd5b505050505b505050565b333014610c1b576040517f12e9ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c2b604082016020830161386c565b610c3b606083016040840161386c565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cb9576040517f6b3dcdc100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016107d4565b610cc9604084016020850161386c565b73ffffffffffffffffffffffffffffffffffffffff811615610f3e573073ffffffffffffffffffffffffffffffffffffffff166311e549336040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d549190613d17565b15610e62577f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705600101546040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063a230c52490602401602060405180830381865afa158015610deb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0f9190613d17565b610e5d576040517f9ac2720600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016107d4565b610f3e565b6040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152309063a230c52490602401602060405180830381865afa158015610ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef09190613d17565b610f3e576040517fb8c6719e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016107d4565b610f4e604085016020860161386c565b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705600101546040517f6731764700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015290911690636731764790602401602060405180830381865afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110049190613d17565b611052576040517fde42669700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016107d4565b611062606086016040870161386c565b73ffffffffffffffffffffffffffffffffffffffff8116156112d7573073ffffffffffffffffffffffffffffffffffffffff166311e549336040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ed9190613d17565b156111fb577f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705600101546040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063a230c52490602401602060405180830381865afa158015611184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a89190613d17565b6111f6576040517f9ac2720600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016107d4565b6112d7565b6040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152309063a230c52490602401602060405180830381865afa158015611265573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112899190613d17565b6112d7576040517fb8c6719e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016107d4565b7fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb82616060870135611333576040517f9ba6061b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006113456040890160208a0161386c565b73ffffffffffffffffffffffffffffffffffffffff1614801561140557503063e43581b861137660208a018a61386c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa1580156113df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114039190613d17565b155b1561146257611417602088018861386c565b6040517f15e519c000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016107d4565b611472604088016020890161386c565b73ffffffffffffffffffffffffffffffffffffffff16611495602089018961386c565b73ffffffffffffffffffffffffffffffffffffffff16146116045760006114c26040890160208a0161386c565b73ffffffffffffffffffffffffffffffffffffffff1614611604576000606088013560078301826114f960408c0160208d0161386c565b73ffffffffffffffffffffffffffffffffffffffff16815260208082019290925260400160009081209161152f908c018c61386c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115789190613d80565b918290555091505080611602576115da61159560208a018a61386c565b60016008850160006115ad60408e0160208f0161386c565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000209190613464565b6116026115ed60408a0160208b0161386c565b60016009850160006115ad60208e018e61386c565b505b60006060880135600683018261162060408c0160208d0161386c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116699190613d80565b9250508190559050600088606001358360060160008b6040016020810190611691919061386c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116da9190613d68565b9250508190559050600061170b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e70590565b600181015490915073ffffffffffffffffffffffffffffffffffffffff1663c2a11fb361173e60408d0160208e0161386c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101869052604401600060405180830381600087803b1580156117ab57600080fd5b505af11580156117bf573d6000803e3d6000fd5b50505050600181015473ffffffffffffffffffffffffffffffffffffffff1663c2a11fb36117f360608d0160408e0161386c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101859052604401600060405180830381600087803b15801561186057600080fd5b505af1158015611874573d6000803e3d6000fd5b50611893925061188d91505060408c0160208d0161386c565b8461363c565b6118ac6118a660608c0160408d0161386c565b8361363c565b60006118be60408c0160208d0161386c565b73ffffffffffffffffffffffffffffffffffffffff16146118f75789606001358460050160008282546118f19190613d80565b90915550505b600061190960608c0160408d0161386c565b73ffffffffffffffffffffffffffffffffffffffff1614156119a957896060013584600401600082825461193d9190613d80565b925050819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561198c57600080fd5b505af11580156119a0573d6000803e3d6000fd5b50505050611a57565b60006119bb60408c0160208d0161386c565b73ffffffffffffffffffffffffffffffffffffffff161415611a575789606001358460040160008282546119ef9190613d68565b925050819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a3e57600080fd5b505af1158015611a52573d6000803e3d6000fd5b505050505b3063eee2dcc3611a6a60208d018d61386c565b611a7a60408e0160208f0161386c565b8d6040016020810190611a8d919061386c565b8e606001358f8060800190611aa29190613d97565b6040518763ffffffff1660e01b8152600401611ac396959493929190613e45565b600060405180830381600087803b158015611add57600080fd5b505af1158015611af1573d6000803e3d6000fd5b50611b069250505060608b0160408c0161386c565b73ffffffffffffffffffffffffffffffffffffffff16611b2c60408c0160208d0161386c565b73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c60600135604051611b7791815260200190565b60405180910390a350505050505050505050565b333014611bc4576040517f12e9ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff811615611e3a573073ffffffffffffffffffffffffffffffffffffffff166311e549336040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c509190613d17565b15611d5e577f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705600101546040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063a230c52490602401602060405180830381865afa158015611ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0b9190613d17565b611d59576040517f9ac2720600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016107d4565b611e3a565b6040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152309063a230c52490602401602060405180830381865afa158015611dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dec9190613d17565b611e3a576040517fb8c6719e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016107d4565b8115611f325773ffffffffffffffffffffffffffffffffffffffff84811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826860209081526040808320938716835292905290812080547fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826192859291611ec5908490613d68565b909155505073ffffffffffffffffffffffffffffffffffffffff851660009081526008820160205260409020611efd908560016136d3565b73ffffffffffffffffffffffffffffffffffffffff841660009081526009820160205260409020611f30908660016136d3565b505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051611f9191815260200190565b60405180910390a350505050565b333014611fd8576040517f12e9ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826760205260409020541561206c576040517fd90c787400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016107d4565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8269602052604090207fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261906001015b8054156121b6576000816000815481106120f2576120f2613e99565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff87811680855260078801845260408086209290931680865291909352928190205490517f6bd7bd2500000000000000000000000000000000000000000000000000000000815260048101929092526024820183905260448201529091503090636bd7bd2590606401600060405180830381600087803b15801561219857600080fd5b505af11580156121ac573d6000803e3d6000fd5b50505050506120d6565b5073ffffffffffffffffffffffffffffffffffffffff8216600090815260098201602052604090206001015b805415610bdd576000816000815481106121fe576121fe613e99565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff9081168084526007870183526040808520928916808652929093528284205483517f6bd7bd25000000000000000000000000000000000000000000000000000000008152600481018390526024810193909352604483015291519193503092636bd7bd259260648084019382900301818387803b1580156122a257600080fd5b505af11580156122b6573d6000803e3d6000fd5b50505050506121e2565b3330146122f9576040517f12e9ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b801561242a5773ffffffffffffffffffffffffffffffffffffffff83811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826860209081526040808320938616835292905290812080547fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826192849291612384908490613d80565b909155505073ffffffffffffffffffffffffffffffffffffffff80851660009081526007830160209081526040808320938716835292905220546124285773ffffffffffffffffffffffffffffffffffffffff8416600090815260088201602052604090206123f590846001613464565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600982016020526040902061242890856001613464565b505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f94f4f5b45267f5e7454476505db5fe3cbb2ad25868e26303b8fc7c5074ba58908360405161248991815260200190565b60405180910390a3505050565b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705546040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063a230c52490602401602060405180830381865afa158015612528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254c9190613d17565b612584576040517f1dd41c4d0000000000000000000000000000000000000000000000000000000081523360048201526024016107d4565b60007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826190503073ffffffffffffffffffffffffffffffffffffffff1663ddb2d22b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126189190613d17565b1561264f576040517f12aebbbc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080526006820160205260408120805486929061266f908490613d80565b90915550506040517ff4c1210c000000000000000000000000000000000000000000000000000000008152309063f4c1210c906126b490879087908790600401613ec8565b600060405180830381600087803b1580156126ce57600080fd5b505af11580156126e2573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561272e57600080fd5b505af1158015612742573d6000803e3d6000fd5b505050508282604051612756929190613eeb565b6040519081900381209085907f57307d0a4121422158dae7be68e769aa82d8631467b971e4fdfdf3ce9b4c8b7b90600090a350505050565b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705546040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063a230c52490602401602060405180830381865afa158015612820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128449190613d17565b61287c576040517f1dd41c4d0000000000000000000000000000000000000000000000000000000081523360048201526024016107d4565b60007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826190503073ffffffffffffffffffffffffffffffffffffffff1663ddb2d22b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129109190613d17565b80156129a0575060048101541515806129a057506040517f70a082310000000000000000000000000000000000000000000000000000000081526000600482015230906370a0823190602401602060405180830381865afa158015612979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299d9190613efb565b15155b156129d7576040517f12aebbbc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808052600682016020526040812080548692906129f7908490613d68565b90915550506040517faf2e757b000000000000000000000000000000000000000000000000000000008152309063af2e757b90612a3c90879087908790600401613ec8565b600060405180830381600087803b158015612a5657600080fd5b505af1158015612a6a573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612ab657600080fd5b505af1158015612aca573d6000803e3d6000fd5b505050508282604051612ade929190613eeb565b6040519081900381209085907fadef11a3979b8ceb0573eb6ef0678134a09c23a0d94e5ea47cd18ac3a9fc019490600090a350505050565b606060007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261600b8101805460408051602080840282018101909252828152939450830182828015612b9d57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311612b72575b505050505091505090565b60607fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261600201805461051c90613cc3565b73ffffffffffffffffffffffffffffffffffffffff831660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826a6020526040812060609190610690906001018585613343565b6040805160a0810182523380825260208083019190915273ffffffffffffffffffffffffffffffffffffffff8516828401526060820184905282518084018452601781527f556e737065636966696564202d2076696120455243323000000000000000000091810191909152608082015290517f44890ae000000000000000000000000000000000000000000000000000000000815260009130916344890ae0916105fd91600401613f14565b6040805160a08101825233815273ffffffffffffffffffffffffffffffffffffffff8681166020830152851681830152606081018490526080810183905290517f44890ae000000000000000000000000000000000000000000000000000000000815260009130916344890ae091612d5691600401613f14565b600060405180830381600087803b158015612d7057600080fd5b505af1158015612d84573d6000803e3d6000fd5b50600198975050505050505050565b60007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826173ffffffffffffffffffffffffffffffffffffffff8416612edd576040517fe43581b800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152309063e43581b890602401602060405180830381865afa158015612e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5f9190613d17565b612ead576040517f15e519c000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016107d4565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600690910160205260409020549050610634565b73ffffffffffffffffffffffffffffffffffffffff9384166000908152600791909101602090815260408083209490951682529290925250205490565b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705546040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063a230c52490602401602060405180830381865afa158015612fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd09190613d17565b613008576040517f1dd41c4d0000000000000000000000000000000000000000000000000000000081523360048201526024016107d4565b7fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8266546040519081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb82619033907fb5ffee8da10703700415cbf7e501408eb3da0c5dff8eae740afca33b2a2db9689060200160405180910390a2600081600501819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156130d357600080fd5b505af11580156130e7573d6000803e3d6000fd5b5050505050565b60003073ffffffffffffffffffffffffffffffffffffffff166344890ae06040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152612d569190600401613f14565b6040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201819052600091309063a230c52490602401602060405180830381865afa15801561323b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325f9190613d17565b6132ad576040517fb8c6719e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016107d4565b6040517f6bd7bd2500000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff85166024820152604481018490523090636bd7bd2590606401600060405180830381600087803b15801561332157600080fd5b505af1158015613335573d6000803e3d6000fd5b506001979650505050505050565b60606000808486805490506133589190613d80565b84116133645783613371565b8554613371908690613d80565b905060008167ffffffffffffffff81111561338e5761338e613b0d565b6040519080825280602002602001820160405280156133b7578160200160208202803683370190505b50905060005b8281101561344a57876133d08289613d68565b815481106133e0576133e0613e99565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061341d5761341d613e99565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016133bd565b50806134568388613d68565b935093505050935093915050565b600061347084846137c7565b905081801561347d575080155b156134885750505050565b806134ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4164647265737320646f6573206e6f7420657869737420696e2073657400000060448201526064016107d4565b6001808501805460009261350291613d80565b8154811061351257613512613e99565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff87811684529188905260408084205492909116808452922081905560018701805492935090918391908390811061356e5761356e613e99565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9485161790559187168152908790526040812055600186018054806135dc576135dc613f7b565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055505050505050565b73ffffffffffffffffffffffffffffffffffffffff821661365b575050565b7fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826181158015906136955750613693600a8201846137c7565b155b156136a957610bdd600a82018460006136d3565b811580156136bf57506136bf600a8201846137c7565b15610bdd57610bdd600a8201846000613464565b60006136df84846137c7565b90508180156136eb5750805b156136f65750505050565b801561375e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4164647265737320616c726561647920696e207365740000000000000000000060448201526064016107d4565b50506001808301805473ffffffffffffffffffffffffffffffffffffffff909316600081815260209586526040812085905592840182559082529290200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b6001820154600090156138395773ffffffffffffffffffffffffffffffffffffffff8216600081815260208590526040902054600185018054909190811061381157613811613e99565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161461383c565b60005b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461386757600080fd5b919050565b60006020828403121561387e57600080fd5b61383c82613843565b6000815180845260005b818110156138ad57602081850181015186830182015201613891565b818111156138bf576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061383c6020830184613887565b6000806040838503121561391857600080fd5b61392183613843565b946020939093013593505050565b60008060006060848603121561394457600080fd5b61394d84613843565b95602085013595506040909401359392505050565b600081518084526020808501945080840160005b838110156139a857815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101613976565b509495945050505050565b6040815260006139c66040830185613962565b90508260208301529392505050565b6000806000606084860312156139ea57600080fd5b6139f384613843565b9250613a0160208501613843565b9150604084013590509250925092565b600060208284031215613a2357600080fd5b5035919050565b600060208284031215613a3c57600080fd5b813567ffffffffffffffff811115613a5357600080fd5b820160a0818503121561383c57600080fd5b60008083601f840112613a7757600080fd5b50813567ffffffffffffffff811115613a8f57600080fd5b602083019150836020828501011115613aa757600080fd5b9250929050565b600080600060408486031215613ac357600080fd5b83359250602084013567ffffffffffffffff811115613ae157600080fd5b613aed86828701613a65565b9497909650939450505050565b60208152600061383c6020830184613962565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060008060808587031215613b5257600080fd5b613b5b85613843565b9350613b6960208601613843565b925060408501359150606085013567ffffffffffffffff80821115613b8d57600080fd5b818701915087601f830112613ba157600080fd5b813581811115613bb357613bb3613b0d565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715613bf957613bf9613b0d565b816040528281528a6020848701011115613c1257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215613c4957600080fd5b613c5283613843565b9150613c6060208401613843565b90509250929050565b60008060008060608587031215613c7f57600080fd5b613c8885613843565b935060208501359250604085013567ffffffffffffffff811115613cab57600080fd5b613cb787828801613a65565b95989497509550505050565b600181811c90821680613cd757607f821691505b60208210811415613d11577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215613d2957600080fd5b8151801515811461383c57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115613d7b57613d7b613d39565b500190565b600082821015613d9257613d92613d39565b500390565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613dcc57600080fd5b83018035915067ffffffffffffffff821115613de757600080fd5b602001915036819003821315613aa757600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600073ffffffffffffffffffffffffffffffffffffffff8089168352808816602084015280871660408401525084606083015260a06080830152613e8d60a083018486613dfc565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b838152604060208201526000613ee2604083018486613dfc565b95945050505050565b8183823760009101908152919050565b600060208284031215613f0d57600080fd5b5051919050565b60208152600073ffffffffffffffffffffffffffffffffffffffff8084511660208401528060208501511660408401528060408501511660608401525060608301516080830152608083015160a080840152613f7360c0840182613887565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212204cb63a0cab713fe3f581fde4df48fba1ed8d6df0e451893d61fa2b189e31ef4f64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b95760003560e01c80636bd7bd25116100f95780639c999d9011610097578063dd62ed3e11610071578063dd62ed3e146104aa578063ddee550c146104bd578063e8edd0e3146104c5578063fbabdb06146104d857600080fd5b80639c999d9014610471578063a9059cbb14610484578063c485bb961461049757600080fd5b806377097fc8116100d357806377097fc8146103e95780638188f71c146103fc57806381a8f2431461041157806395d89b411461046957600080fd5b80636bd7bd251461036e57806370a08231146103815780637641e6f3146103d657600080fd5b8063300059161161016657806344890ae01161014057806344890ae01461030e5780635480699a146103215780635d7b590f146103345780636ba09c5c1461034757600080fd5b806330005916146102bc578063313ce567146102d15780633a868224146102fb57600080fd5b806318160ddd1161019757806318160ddd146102615780631fe02e531461028857806323b872dd146102a957600080fd5b806306675ba7146101be57806306fdde0314610229578063095ea7b31461023e575b600080fd5b6102166101cc36600461386c565b73ffffffffffffffffffffffffffffffffffffffff1660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8269602052604090206001015490565b6040519081526020015b60405180910390f35b6102316104eb565b60405161022091906138f2565b61025161024c366004613905565b61059f565b6040519015158152602001610220565b7fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826554610216565b61029b61029636600461392f565b61063a565b6040516102209291906139b3565b6102516102b73660046139d5565b61069c565b6102cf6102ca366004613a11565b6106ea565b005b7fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb82645460ff16610216565b6102cf61030936600461386c565b6108b0565b6102cf61031c366004613a2a565b610be2565b6102cf61032f3660046139d5565b611b8b565b6102cf61034236600461386c565b611f9f565b7fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826654610216565b6102cf61037c3660046139d5565b6122c0565b61021661038f36600461386c565b73ffffffffffffffffffffffffffffffffffffffff1660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8267602052604090205490565b6102cf6103e4366004613aae565b612496565b6102cf6103f7366004613aae565b61278e565b610404612b16565b6040516102209190613afa565b61021661041f36600461386c565b73ffffffffffffffffffffffffffffffffffffffff1660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826a602052604090206001015490565b610231612ba8565b61029b61047f36600461392f565b612bd9565b610251610492366004613905565b612c2f565b6102516104a5366004613b3c565b612cdc565b6102166104b8366004613c36565b612d93565b6102cf612f1a565b6102516104d3366004613c69565b6130ee565b6102516104e6366004613905565b6131e2565b60607fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261600101805461051c90613cc3565b80601f016020809104026020016040519081016040528092919081815260200182805461054890613cc3565b80156105955780601f1061056a57610100808354040283529160200191610595565b820191906000526020600020905b81548152906001019060200180831161057857829003601f168201915b5050505050905090565b6040517f5480699a00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526000903090635480699a906064015b600060405180830381600087803b15801561061757600080fd5b505af115801561062b573d6000803e3d6000fd5b50505050600190505b92915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb82696020526040812060609190610690906001018585613343565b91509150935093915050565b60006106df8484846040518060400160405280601781526020017f556e737065636966696564202d20766961204552433230000000000000000000815250612cdc565b506001949350505050565b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705546040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063a230c52490602401602060405180830381865afa15801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190613d17565b6107dd576040517f1dd41c4d0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b807fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826160050160008282546108119190613d68565b925050819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561086057600080fd5b505af1158015610874573d6000803e3d6000fd5b50506040518381523392507f7cc75678011427765ae1f965e47e04223c08302df0151ddbf2df44f9e8572c37915060200160405180910390a250565b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705546040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063a230c52490602401602060405180830381865afa158015610942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109669190613d17565b61099e576040517f1dd41c4d0000000000000000000000000000000000000000000000000000000081523360048201526024016107d4565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826760205260409020547fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb82618115610a6b5773ffffffffffffffffffffffffffffffffffffffff8316600090815260068201602052604080822082905581805281208054849290610a4a908490613d68565b9250508190555081816004016000828254610a659190613d80565b90915550505b610a7a600a8201846001613464565b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705600101546040517fc2a11fb300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152600060248301529091169063c2a11fb390604401600060405180830381600087803b158015610b1057600080fd5b505af1158015610b24573d6000803e3d6000fd5b50506040518481526000925073ffffffffffffffffffffffffffffffffffffffff861691507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a38115610bdd573073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610bc457600080fd5b505af1158015610bd8573d6000803e3d6000fd5b505050505b505050565b333014610c1b576040517f12e9ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c2b604082016020830161386c565b610c3b606083016040840161386c565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cb9576040517f6b3dcdc100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016107d4565b610cc9604084016020850161386c565b73ffffffffffffffffffffffffffffffffffffffff811615610f3e573073ffffffffffffffffffffffffffffffffffffffff166311e549336040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d549190613d17565b15610e62577f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705600101546040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063a230c52490602401602060405180830381865afa158015610deb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0f9190613d17565b610e5d576040517f9ac2720600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016107d4565b610f3e565b6040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152309063a230c52490602401602060405180830381865afa158015610ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef09190613d17565b610f3e576040517fb8c6719e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016107d4565b610f4e604085016020860161386c565b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705600101546040517f6731764700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015290911690636731764790602401602060405180830381865afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110049190613d17565b611052576040517fde42669700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016107d4565b611062606086016040870161386c565b73ffffffffffffffffffffffffffffffffffffffff8116156112d7573073ffffffffffffffffffffffffffffffffffffffff166311e549336040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ed9190613d17565b156111fb577f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705600101546040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063a230c52490602401602060405180830381865afa158015611184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a89190613d17565b6111f6576040517f9ac2720600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016107d4565b6112d7565b6040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152309063a230c52490602401602060405180830381865afa158015611265573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112899190613d17565b6112d7576040517fb8c6719e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016107d4565b7fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb82616060870135611333576040517f9ba6061b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006113456040890160208a0161386c565b73ffffffffffffffffffffffffffffffffffffffff1614801561140557503063e43581b861137660208a018a61386c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa1580156113df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114039190613d17565b155b1561146257611417602088018861386c565b6040517f15e519c000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016107d4565b611472604088016020890161386c565b73ffffffffffffffffffffffffffffffffffffffff16611495602089018961386c565b73ffffffffffffffffffffffffffffffffffffffff16146116045760006114c26040890160208a0161386c565b73ffffffffffffffffffffffffffffffffffffffff1614611604576000606088013560078301826114f960408c0160208d0161386c565b73ffffffffffffffffffffffffffffffffffffffff16815260208082019290925260400160009081209161152f908c018c61386c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115789190613d80565b918290555091505080611602576115da61159560208a018a61386c565b60016008850160006115ad60408e0160208f0161386c565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000209190613464565b6116026115ed60408a0160208b0161386c565b60016009850160006115ad60208e018e61386c565b505b60006060880135600683018261162060408c0160208d0161386c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116699190613d80565b9250508190559050600088606001358360060160008b6040016020810190611691919061386c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116da9190613d68565b9250508190559050600061170b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e70590565b600181015490915073ffffffffffffffffffffffffffffffffffffffff1663c2a11fb361173e60408d0160208e0161386c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101869052604401600060405180830381600087803b1580156117ab57600080fd5b505af11580156117bf573d6000803e3d6000fd5b50505050600181015473ffffffffffffffffffffffffffffffffffffffff1663c2a11fb36117f360608d0160408e0161386c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101859052604401600060405180830381600087803b15801561186057600080fd5b505af1158015611874573d6000803e3d6000fd5b50611893925061188d91505060408c0160208d0161386c565b8461363c565b6118ac6118a660608c0160408d0161386c565b8361363c565b60006118be60408c0160208d0161386c565b73ffffffffffffffffffffffffffffffffffffffff16146118f75789606001358460050160008282546118f19190613d80565b90915550505b600061190960608c0160408d0161386c565b73ffffffffffffffffffffffffffffffffffffffff1614156119a957896060013584600401600082825461193d9190613d80565b925050819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561198c57600080fd5b505af11580156119a0573d6000803e3d6000fd5b50505050611a57565b60006119bb60408c0160208d0161386c565b73ffffffffffffffffffffffffffffffffffffffff161415611a575789606001358460040160008282546119ef9190613d68565b925050819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a3e57600080fd5b505af1158015611a52573d6000803e3d6000fd5b505050505b3063eee2dcc3611a6a60208d018d61386c565b611a7a60408e0160208f0161386c565b8d6040016020810190611a8d919061386c565b8e606001358f8060800190611aa29190613d97565b6040518763ffffffff1660e01b8152600401611ac396959493929190613e45565b600060405180830381600087803b158015611add57600080fd5b505af1158015611af1573d6000803e3d6000fd5b50611b069250505060608b0160408c0161386c565b73ffffffffffffffffffffffffffffffffffffffff16611b2c60408c0160208d0161386c565b73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c60600135604051611b7791815260200190565b60405180910390a350505050505050505050565b333014611bc4576040517f12e9ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff811615611e3a573073ffffffffffffffffffffffffffffffffffffffff166311e549336040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c509190613d17565b15611d5e577f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705600101546040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063a230c52490602401602060405180830381865afa158015611ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0b9190613d17565b611d59576040517f9ac2720600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016107d4565b611e3a565b6040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152309063a230c52490602401602060405180830381865afa158015611dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dec9190613d17565b611e3a576040517fb8c6719e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016107d4565b8115611f325773ffffffffffffffffffffffffffffffffffffffff84811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826860209081526040808320938716835292905290812080547fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826192859291611ec5908490613d68565b909155505073ffffffffffffffffffffffffffffffffffffffff851660009081526008820160205260409020611efd908560016136d3565b73ffffffffffffffffffffffffffffffffffffffff841660009081526009820160205260409020611f30908660016136d3565b505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051611f9191815260200190565b60405180910390a350505050565b333014611fd8576040517f12e9ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826760205260409020541561206c576040517fd90c787400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016107d4565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8269602052604090207fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261906001015b8054156121b6576000816000815481106120f2576120f2613e99565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff87811680855260078801845260408086209290931680865291909352928190205490517f6bd7bd2500000000000000000000000000000000000000000000000000000000815260048101929092526024820183905260448201529091503090636bd7bd2590606401600060405180830381600087803b15801561219857600080fd5b505af11580156121ac573d6000803e3d6000fd5b50505050506120d6565b5073ffffffffffffffffffffffffffffffffffffffff8216600090815260098201602052604090206001015b805415610bdd576000816000815481106121fe576121fe613e99565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff9081168084526007870183526040808520928916808652929093528284205483517f6bd7bd25000000000000000000000000000000000000000000000000000000008152600481018390526024810193909352604483015291519193503092636bd7bd259260648084019382900301818387803b1580156122a257600080fd5b505af11580156122b6573d6000803e3d6000fd5b50505050506121e2565b3330146122f9576040517f12e9ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b801561242a5773ffffffffffffffffffffffffffffffffffffffff83811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826860209081526040808320938616835292905290812080547fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826192849291612384908490613d80565b909155505073ffffffffffffffffffffffffffffffffffffffff80851660009081526007830160209081526040808320938716835292905220546124285773ffffffffffffffffffffffffffffffffffffffff8416600090815260088201602052604090206123f590846001613464565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600982016020526040902061242890856001613464565b505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f94f4f5b45267f5e7454476505db5fe3cbb2ad25868e26303b8fc7c5074ba58908360405161248991815260200190565b60405180910390a3505050565b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705546040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063a230c52490602401602060405180830381865afa158015612528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254c9190613d17565b612584576040517f1dd41c4d0000000000000000000000000000000000000000000000000000000081523360048201526024016107d4565b60007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826190503073ffffffffffffffffffffffffffffffffffffffff1663ddb2d22b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126189190613d17565b1561264f576040517f12aebbbc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080526006820160205260408120805486929061266f908490613d80565b90915550506040517ff4c1210c000000000000000000000000000000000000000000000000000000008152309063f4c1210c906126b490879087908790600401613ec8565b600060405180830381600087803b1580156126ce57600080fd5b505af11580156126e2573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561272e57600080fd5b505af1158015612742573d6000803e3d6000fd5b505050508282604051612756929190613eeb565b6040519081900381209085907f57307d0a4121422158dae7be68e769aa82d8631467b971e4fdfdf3ce9b4c8b7b90600090a350505050565b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705546040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063a230c52490602401602060405180830381865afa158015612820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128449190613d17565b61287c576040517f1dd41c4d0000000000000000000000000000000000000000000000000000000081523360048201526024016107d4565b60007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826190503073ffffffffffffffffffffffffffffffffffffffff1663ddb2d22b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129109190613d17565b80156129a0575060048101541515806129a057506040517f70a082310000000000000000000000000000000000000000000000000000000081526000600482015230906370a0823190602401602060405180830381865afa158015612979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299d9190613efb565b15155b156129d7576040517f12aebbbc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808052600682016020526040812080548692906129f7908490613d68565b90915550506040517faf2e757b000000000000000000000000000000000000000000000000000000008152309063af2e757b90612a3c90879087908790600401613ec8565b600060405180830381600087803b158015612a5657600080fd5b505af1158015612a6a573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612ab657600080fd5b505af1158015612aca573d6000803e3d6000fd5b505050508282604051612ade929190613eeb565b6040519081900381209085907fadef11a3979b8ceb0573eb6ef0678134a09c23a0d94e5ea47cd18ac3a9fc019490600090a350505050565b606060007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261600b8101805460408051602080840282018101909252828152939450830182828015612b9d57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311612b72575b505050505091505090565b60607fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261600201805461051c90613cc3565b73ffffffffffffffffffffffffffffffffffffffff831660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826a6020526040812060609190610690906001018585613343565b6040805160a0810182523380825260208083019190915273ffffffffffffffffffffffffffffffffffffffff8516828401526060820184905282518084018452601781527f556e737065636966696564202d2076696120455243323000000000000000000091810191909152608082015290517f44890ae000000000000000000000000000000000000000000000000000000000815260009130916344890ae0916105fd91600401613f14565b6040805160a08101825233815273ffffffffffffffffffffffffffffffffffffffff8681166020830152851681830152606081018490526080810183905290517f44890ae000000000000000000000000000000000000000000000000000000000815260009130916344890ae091612d5691600401613f14565b600060405180830381600087803b158015612d7057600080fd5b505af1158015612d84573d6000803e3d6000fd5b50600198975050505050505050565b60007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826173ffffffffffffffffffffffffffffffffffffffff8416612edd576040517fe43581b800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152309063e43581b890602401602060405180830381865afa158015612e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5f9190613d17565b612ead576040517f15e519c000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016107d4565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600690910160205260409020549050610634565b73ffffffffffffffffffffffffffffffffffffffff9384166000908152600791909101602090815260408083209490951682529290925250205490565b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705546040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063a230c52490602401602060405180830381865afa158015612fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd09190613d17565b613008576040517f1dd41c4d0000000000000000000000000000000000000000000000000000000081523360048201526024016107d4565b7fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8266546040519081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb82619033907fb5ffee8da10703700415cbf7e501408eb3da0c5dff8eae740afca33b2a2db9689060200160405180910390a2600081600501819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156130d357600080fd5b505af11580156130e7573d6000803e3d6000fd5b5050505050565b60003073ffffffffffffffffffffffffffffffffffffffff166344890ae06040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152612d569190600401613f14565b6040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201819052600091309063a230c52490602401602060405180830381865afa15801561323b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325f9190613d17565b6132ad576040517fb8c6719e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016107d4565b6040517f6bd7bd2500000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff85166024820152604481018490523090636bd7bd2590606401600060405180830381600087803b15801561332157600080fd5b505af1158015613335573d6000803e3d6000fd5b506001979650505050505050565b60606000808486805490506133589190613d80565b84116133645783613371565b8554613371908690613d80565b905060008167ffffffffffffffff81111561338e5761338e613b0d565b6040519080825280602002602001820160405280156133b7578160200160208202803683370190505b50905060005b8281101561344a57876133d08289613d68565b815481106133e0576133e0613e99565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061341d5761341d613e99565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016133bd565b50806134568388613d68565b935093505050935093915050565b600061347084846137c7565b905081801561347d575080155b156134885750505050565b806134ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4164647265737320646f6573206e6f7420657869737420696e2073657400000060448201526064016107d4565b6001808501805460009261350291613d80565b8154811061351257613512613e99565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff87811684529188905260408084205492909116808452922081905560018701805492935090918391908390811061356e5761356e613e99565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9485161790559187168152908790526040812055600186018054806135dc576135dc613f7b565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055505050505050565b73ffffffffffffffffffffffffffffffffffffffff821661365b575050565b7fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826181158015906136955750613693600a8201846137c7565b155b156136a957610bdd600a82018460006136d3565b811580156136bf57506136bf600a8201846137c7565b15610bdd57610bdd600a8201846000613464565b60006136df84846137c7565b90508180156136eb5750805b156136f65750505050565b801561375e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4164647265737320616c726561647920696e207365740000000000000000000060448201526064016107d4565b50506001808301805473ffffffffffffffffffffffffffffffffffffffff909316600081815260209586526040812085905592840182559082529290200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b6001820154600090156138395773ffffffffffffffffffffffffffffffffffffffff8216600081815260208590526040902054600185018054909190811061381157613811613e99565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161461383c565b60005b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461386757600080fd5b919050565b60006020828403121561387e57600080fd5b61383c82613843565b6000815180845260005b818110156138ad57602081850181015186830182015201613891565b818111156138bf576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061383c6020830184613887565b6000806040838503121561391857600080fd5b61392183613843565b946020939093013593505050565b60008060006060848603121561394457600080fd5b61394d84613843565b95602085013595506040909401359392505050565b600081518084526020808501945080840160005b838110156139a857815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101613976565b509495945050505050565b6040815260006139c66040830185613962565b90508260208301529392505050565b6000806000606084860312156139ea57600080fd5b6139f384613843565b9250613a0160208501613843565b9150604084013590509250925092565b600060208284031215613a2357600080fd5b5035919050565b600060208284031215613a3c57600080fd5b813567ffffffffffffffff811115613a5357600080fd5b820160a0818503121561383c57600080fd5b60008083601f840112613a7757600080fd5b50813567ffffffffffffffff811115613a8f57600080fd5b602083019150836020828501011115613aa757600080fd5b9250929050565b600080600060408486031215613ac357600080fd5b83359250602084013567ffffffffffffffff811115613ae157600080fd5b613aed86828701613a65565b9497909650939450505050565b60208152600061383c6020830184613962565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060008060808587031215613b5257600080fd5b613b5b85613843565b9350613b6960208601613843565b925060408501359150606085013567ffffffffffffffff80821115613b8d57600080fd5b818701915087601f830112613ba157600080fd5b813581811115613bb357613bb3613b0d565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715613bf957613bf9613b0d565b816040528281528a6020848701011115613c1257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215613c4957600080fd5b613c5283613843565b9150613c6060208401613843565b90509250929050565b60008060008060608587031215613c7f57600080fd5b613c8885613843565b935060208501359250604085013567ffffffffffffffff811115613cab57600080fd5b613cb787828801613a65565b95989497509550505050565b600181811c90821680613cd757607f821691505b60208210811415613d11577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215613d2957600080fd5b8151801515811461383c57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115613d7b57613d7b613d39565b500190565b600082821015613d9257613d92613d39565b500390565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613dcc57600080fd5b83018035915067ffffffffffffffff821115613de757600080fd5b602001915036819003821315613aa757600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600073ffffffffffffffffffffffffffffffffffffffff8089168352808816602084015280871660408401525084606083015260a06080830152613e8d60a083018486613dfc565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b838152604060208201526000613ee2604083018486613dfc565b95945050505050565b8183823760009101908152919050565b600060208284031215613f0d57600080fd5b5051919050565b60208152600073ffffffffffffffffffffffffffffffffffffffff8084511660208401528060208501511660408401528060408501511660608401525060608301516080830152608083015160a080840152613f7360c0840182613887565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212204cb63a0cab713fe3f581fde4df48fba1ed8d6df0e451893d61fa2b189e31ef4f64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "This value changes when `approve`, `disapprove` and `transferFrom` / `transferFromWithRef` are called.",
        "params": {
          "owner": "is the owner of the funds.",
          "spender": "is the address for which the allowance should be queried."
        },
        "returns": {
          "_0": "A `uint256` representing the remaining allowance of `spender` over `owner`'s funds."
        }
      },
      "approve(address,uint256)": {
        "params": {
          "amount": "is how much to **increase** the allowance.",
          "spender": "is the address to allow spending from the caller's wallet."
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The owners address to get the balance of."
        },
        "returns": {
          "_0": "uint256 The current balance of this owner's account."
        }
      },
      "burn(uint256,string)": {
        "params": {
          "amount": "The number of FAST tokens to mint.",
          "ref": "A reference for this minting operation."
        }
      },
      "decimals()": {
        "returns": {
          "_0": "uint256 Number of decimals the FAST has."
        }
      },
      "disapprove(address,uint256)": {
        "params": {
          "amount": "is how much to **decrease** the allowance.",
          "spender": "is the address to disallow spending from the caller's wallet."
        }
      },
      "mint(uint256,string)": {
        "params": {
          "amount": "The number of FAST tokens to mint.",
          "ref": "A reference for this minting operation."
        }
      },
      "name()": {
        "returns": {
          "_0": "string Name of the FAST."
        }
      },
      "performApproval(address,address,uint256)": {
        "params": {
          "amount": "is how much to **increase** the current allowance by.  Note: This function runs when amount is zero, and will emit.",
          "from": "is the wallet from which to give the allowance.",
          "spender": "is the receiver of the allowance."
        }
      },
      "retrieveDeadTokens(address)": {
        "params": {
          "holder": "is the address for which to move the tokens from."
        }
      },
      "symbol()": {
        "returns": {
          "_0": "string Symbol of the FAST."
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "uint256 Total supply of the FAST."
        }
      },
      "transferCredits()": {
        "returns": {
          "_0": "Number of transfer credits remaining."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "See `ERC20.Approval`."
      },
      "Burnt(uint256,string)": {
        "notice": "Emited whenever an burning happens in a FAST."
      },
      "DetailsChanged(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "This is an event that is fired whenever any of some of the FAST parameters change, so that the frontend can react to it and refresh the general header for that fast as well as the baseball cards in the FASTs list."
      },
      "Disapproval(address,address,uint256)": {
        "notice": "See `ERC20.Disapproval`."
      },
      "GovernorAdded(address)": {
        "notice": "Emited when a governor is added to the implementing contract."
      },
      "GovernorRemoved(address)": {
        "notice": "Emited when a governor is removed to the implementing contract."
      },
      "MemberAdded(address)": {
        "notice": "Emited when a member is added to the implementing contract."
      },
      "MemberRemoved(address)": {
        "notice": "Emited when a member is removed to the implementing contract."
      },
      "Minted(uint256,string)": {
        "notice": "Emited whenever an issuance happens in a FAST."
      },
      "Transfer(address,address,uint256)": {
        "notice": "See `ERC20.Transfer`."
      },
      "TransferCreditsAdded(address,uint256)": {
        "notice": "Emited whenever transfer credits increase inside a FAST."
      },
      "TransferCreditsDrained(address,uint256)": {
        "notice": "Emited whenever transfer credits are drained inside a FAST."
      }
    },
    "kind": "user",
    "methods": {
      "addTransferCredits(uint256)": {
        "notice": "Adds `amount` of transfer credits to this FAST."
      },
      "allowance(address,address)": {
        "notice": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through `transferFrom`. This is zero by default."
      },
      "approve(address,uint256)": {
        "notice": "This method directly calls `performApproval`, setting its `from` paramter to the sender of the transaction."
      },
      "balanceOf(address)": {
        "notice": "The balance of the passed owner (ERC20 standard)."
      },
      "burn(uint256,string)": {
        "notice": "Burns an amount of FAST tokens.  A reference can be passed to identify why this happened for example. Business logic. - Modifiers:   - Requires the caller to be a member of the Issuer contract. - Requires that the token has continuous supply. - Requires that there are enough funds in the reserve to cover for `amount` being burnt. - Decreases the reserve balance by `amount`. - Calls `FastHistoryFacet.burnt(amount, ref)`. - Calls `FastFrontendFacet.emitDetailsChanged`. - Emits a `Burnt(amount, ref)`."
      },
      "decimals()": {
        "notice": "The `decimals` of this FAST (ERC20 standard)."
      },
      "disapprove(address,uint256)": {
        "notice": "This method directly calls `performDisapproval`, setting its `from` parameter to the sender of the transaction."
      },
      "drainTransferCredits()": {
        "notice": "Drains the transfer credits from this FAST. Business logic: - Modifiers:   - Requires the caller to be a member of the Issuer contract. - Emits a `TransferCreditsDrained(caller, previousTransferCredits)`. - Sets transfer credits to zero. - Calls `FastFrontendFacet.emitDetailsChanged`"
      },
      "mint(uint256,string)": {
        "notice": "Mints an amount of FAST tokens.  A reference can be passed to identify why this happened for example. Business logic: - Modifiers:   - Requires the caller to be a member of the Issuer contract. - Requires that either the token has continuous supply, or that no tokens have been minted yet. - Increases the reserve balance by `amount`. - Calls `FastHistoryFacet.minted`. - Calls `FastFrontendFacet.emitDetailsChanged`. - Emits a `Minted(amount, ref)` event."
      },
      "name()": {
        "notice": "The name of this FAST (ERC20 standard)."
      },
      "performApproval(address,address,uint256)": {
        "notice": "Increases the allowance given by `from` to `spender` by `amount`. Note that this function should run and emit even if the amount passed is zero. Business logic: - Modifiers:   - Only facets of the current diamond should be able to call this.   - Requires that `onlyTokenHolder` passes for the `from` address. - Requires that the `amount` is positive number. - Increases the allowance given by `from` to `spender` by `amount`. - Update the allowance lookup tables in both directions. - Emits an `Approval(from, spender, amount)`."
      },
      "performDisapproval(address,address,uint256)": {
        "notice": "Decreases allowance given by `from` to `spender` by `amount`. Business logic: - Modifiers:   - Only facets of the current diamond should be able to call this. - The allowance given by `from` to `spender` is decreased by `amount`. - Whether the allowance reached zero, stop tracking it by owner and by spender. - Emit a `Disapproval(from, spender, amount)` event.  Note: This function runs when amount is zero, and will emit."
      },
      "performTransfer((address,address,address,uint256,string))": {
        "notice": "This is the internal method that gets called whenever a transfer is initiated. Both `transfer`, `transferWithRef`, and their variants internally call this function. Business logic: - Modifiers:   - Only facets of the current diamond should be able to call this.   - Requires that `from` and `to` addresses are different.   - Requires that `onlyTokenHolder` passes for the `from` address.   - Requires that the `from` address is an active Marketplace contract member.   - Requires that `onlyTokenHolder` passes for the `to` address. - Requires that the `from` address has enough funds to cover for `amount`. - Requires that the amount is a positive value. - If the transfer is an allowance - e.g. the `spender` is not the same as the `from` address,   - The allowance given by the `from` address to the `spender` covers for the `amount`.     - If we are **not** transfering **from** the reserve,       - Decreases the allowance given by `from` to `spender`.         - If the new allowance reaches zero,           - Stop tracking the allowance in the allowance lookup tables for both spending and receiving directions. - Decreases the balance of the `owner` address. - Increases the balance of the `to` address by `amount`. - If we are **not** transfering **from** the reserve,   - Requires that there are enough transfer credits to cover for `amount`.   - Decreases the transfer credits by `amount`. - If the `to` address is the reserve,   - Decreases the total supply by `amount`.   - Calls `FastFrontendFacet.emitDetailsChanged`. - Else, if the `from` address is the reserve,   - Increases the total supply by `amount`.   - Calls `FastFrontendFacet.emitDetailsChanged`. - Calls `FastHistoryFacet.transfered`. - Emits a `Transfer(from, to, amount)` event."
      },
      "retrieveDeadTokens(address)": {
        "notice": "Allows an Issuer member to move an arbitrary account's holdings back to the reserve, as per regulatory requirements. Business logic: - Modifiers:   - Requires that the caller is a member of the Issuer contract. - If the amount held by `holder` is not zero   - The balance of `holder` should be set to zero.   - The reserve's balance should be increased by how much was on the holder's account.   - Total supply should be decreased by that amount too. - The `holder`'s address should not be tracked as a token holder in this FAST anymore. - The `holder`'s address should not be tracked as a token holder in the Marketplace anymore. - A `Transfer(holder, reserve, amount)` event should be emited. - If the amount previously held by `holder` was not zero,   - Since the reserve balance and total supply have changed, the `FastFrontendFacet.emitDetailsChanged()` function should be called."
      },
      "symbol()": {
        "notice": "The symbol of this FAST (ERC20 standard)."
      },
      "totalSupply()": {
        "notice": "The total supply of the FAST (ERC20 standard)."
      },
      "transfer(address,uint256)": {
        "notice": "See `performTransfer`, the spender will be equal to the `owner`, and the `ref` will be defauted. "
      },
      "transferCredits()": {
        "notice": "Get the current `transferCredits` for this FAST."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "See `performTransfer`, the `ref` will be defaulted."
      },
      "transferFromWithRef(address,address,uint256,string)": {
        "notice": "See `performTransfer`."
      },
      "transferWithRef(address,uint256,string)": {
        "notice": "See `performTransfer`, the spender will be equal to the `owner`. "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}