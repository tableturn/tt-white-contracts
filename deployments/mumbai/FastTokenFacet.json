{
  "address": "0x326D53962ec227f928B51d14b82A32d9dDdF4118",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "Burnt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "memberCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "governorCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferCredits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethBalance",
          "type": "uint256"
        }
      ],
      "name": "DetailsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "Disapproval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EthDrained",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EthReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "GovernorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "GovernorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuerMember",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferCreditsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuerMember",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferCreditsDrained",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addTransferCredits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "beforeRemovingMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "detectTransferRestriction",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "disapprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drainTransferCredits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "givenAllowanceCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "restrictionCode",
          "type": "uint8"
        }
      ],
      "name": "messageForTransferRestriction",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perPage",
          "type": "uint256"
        }
      ],
      "name": "paginateAllowancesByOwner",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perPage",
          "type": "uint256"
        }
      ],
      "name": "paginateAllowancesBySpender",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "performApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "performDisapproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ref",
              "type": "string"
            }
          ],
          "internalType": "struct FastTokenFacet.TransferArgs",
          "name": "p",
          "type": "tuple"
        }
      ],
      "name": "performTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "receivedAllowanceCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferCredits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "transferFromWithRef",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "transferWithRef",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf5c06b43082216868208ec1f12e8e70ca6258a336eeabdc62329a66ef3e0e336",
  "receipt": {
    "to": "0x6DF2D25d8C6FD680730ee658b530A05a99BB769a",
    "from": "0x717634cfe06FFAB2CEAA7fcf1b9019813f4B25FE",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "4589341",
    "logsBloom": "0x
    "blockHash": "0x4baf1f91155f47cf1e73622028809e1621b3eadea5ab10e83f4d3e391ca2da6f",
    "transactionHash": "0xf5c06b43082216868208ec1f12e8e70ca6258a336eeabdc62329a66ef3e0e336",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 27634172,
        "transactionHash": "0xf5c06b43082216868208ec1f12e8e70ca6258a336eeabdc62329a66ef3e0e336",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000717634cfe06ffab2ceaa7fcf1b9019813f4b25fe",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000020918716e11d51800000000000000000000000000000000000000000000000049a9cef8cd4d6d7b0000000000000000000000000000000000000000000007eef61fa552e884063f00000000000000000000000000000000000000000000000047a0b6875f3b98630000000000000000000000000000000000000000000007eef828bdc45695db57",
        "logIndex": 3,
        "blockHash": "0x4baf1f91155f47cf1e73622028809e1621b3eadea5ab10e83f4d3e391ca2da6f"
      }
    ],
    "blockNumber": 27634172,
    "cumulativeGasUsed": "7911455",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "edc3c8d2f379da73f114f322f7d3a3a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"memberCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"governorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferCredits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"}],\"name\":\"DetailsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"Disapproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthDrained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"GovernorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"GovernorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuerMember\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferCreditsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuerMember\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferCreditsDrained\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTransferCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"beforeRemovingMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"disapprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainTransferCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"givenAllowanceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"restrictionCode\",\"type\":\"uint8\"}],\"name\":\"messageForTransferRestriction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perPage\",\"type\":\"uint256\"}],\"name\":\"paginateAllowancesByOwner\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perPage\",\"type\":\"uint256\"}],\"name\":\"paginateAllowancesBySpender\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"performApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"performDisapproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"internalType\":\"struct FastTokenFacet.TransferArgs\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"performTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"receivedAllowanceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"transferFromWithRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"transferWithRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fast/FastTokenFacet.sol\":\"FastTokenFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/fast/FastAccessFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../interfaces/IHasMembers.sol';\\nimport '../interfaces/IHasGovernors.sol';\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../marketplace/MarketplaceAccessFacet.sol';\\nimport './FastTokenFacet.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFast.sol';\\nimport './lib/LibFastAccess.sol';\\nimport './FastTopFacet.sol';\\nimport './FastFrontendFacet.sol';\\n\\n\\n/**\\n* @dev The FAST Access Smart Contract is the source of truth when it comes to\\n* permissioning and ACLs within a given FAST network.\\n*/\\ncontract FastAccessFacet is AFastFacet, IHasMembers, IHasGovernors {\\n  using LibAddressSet for LibAddressSet.Data;\\n  // Structs.\\n\\n  /**\\n   * @dev This structure isn't used anywhere in storage. Instead, it\\n   * allows various methods of the contract to return all the flags\\n   * associated with a given address in one go.\\n   */\\n  struct Flags {\\n    bool isGovernor;\\n    bool isMember;\\n  }\\n\\n  // Governorship related stuff.\\n\\n  /**\\n   * @dev Queries whether a given address is a governor or not.\\n   */\\n  function isGovernor(address candidate)\\n      external view override returns(bool) {\\n    return LibFastAccess.data().governorSet.contains(candidate);\\n  }\\n\\n  /**\\n   * @dev Queries the number of governors in the governor list.\\n   */\\n  function governorCount()\\n      external override view returns(uint256) {\\n    return LibFastAccess.data().governorSet.values.length;\\n  }\\n\\n  /**\\n   * @dev Returns a page of governors.\\n   */\\n  function paginateGovernors(uint256 index, uint256 perPage)\\n      external override view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibFastAccess.\\n      data().governorSet.values,\\n      index,\\n      perPage\\n    );\\n  }\\n\\n  /**\\n   * @dev Adds a governor to the governor list.\\n   */\\n  function addGovernor(address payable governor)\\n      external override\\n      onlyIssuerMember\\n      onlyMarketplaceMember(governor) {\\n    // Add governor to list.\\n    LibFastAccess.data().governorSet.add(governor, false);\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n    emit GovernorAdded(governor);\\n  }\\n\\n  /**\\n   * @dev Removes a governor from the governor list.\\n   */\\n  function removeGovernor(address governor)\\n      external override\\n      onlyIssuerMember {\\n    // Remove governor.\\n    LibFastAccess.data().governorSet.remove(governor, false);\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n    emit GovernorRemoved(governor);\\n  }\\n\\n  /// Membership related stuff.\\n\\n  /**\\n   * @dev Queries whether a given address is a member or not.\\n   */\\n  function isMember(address candidate)\\n      external override view returns(bool) {\\n    return LibFastAccess.data().memberSet.contains(candidate);\\n  }\\n\\n  /**\\n   * @dev Queries the number of members in the membership list.\\n   */\\n  function memberCount()\\n      external override view returns(uint256) {\\n    return LibFastAccess.data().memberSet.values.length;\\n  }\\n\\n  /**\\n   * @dev Returns a page of members.\\n   */\\n  function paginateMembers(uint256 index, uint256 perPage)\\n      external override view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(\\n      LibFastAccess.data().memberSet.values,\\n      index,\\n      perPage\\n    );\\n  }\\n\\n  /**\\n   * @dev Adds a member to the membership list.\\n   */\\n  function addMember(address payable member)\\n      external override \\n      onlyGovernor(msg.sender) onlyMarketplaceMember(member) {\\n    // Add the member.\\n    LibFastAccess.data().memberSet.add(member, false);\\n    // Notify marketplace that this member was added to this FAST.\\n    MarketplaceAccessFacet(LibFast.data().marketplace).memberAddedToFast(member);\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n    emit MemberAdded(member);\\n  }\\n\\n  /**\\n   * @dev Removes a member from the membership list.\\n   */\\n  function removeMember(address member)\\n      external override \\n      onlyGovernor(msg.sender) {\\n    // Remove member.\\n    LibFastAccess.data().memberSet.remove(member, false);\\n    // Notify token facet that this member was removed.\\n    FastTokenFacet(address(this)).beforeRemovingMember(member);\\n    // Notify marketplace that this member was removed from this FAST.\\n    MarketplaceAccessFacet(LibFast.data().marketplace).memberRemovedFromFast(member);\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n    emit MemberRemoved(member);\\n  }\\n\\n  /// Flags.\\n\\n  /**\\n   * @dev Retrieves flags for a given address.\\n   */\\n  function flags(address a)\\n      external view returns(Flags memory) {\\n    LibFastAccess.Data storage s = LibFastAccess.data();\\n    return\\n      Flags({\\n        isGovernor: s.governorSet.contains(a),\\n        isMember: s.memberSet.contains(a)\\n      });\\n  }\\n}\\n\",\"keccak256\":\"0xcdc23d87988d4ada16484e0e885d1e8b80fc8a465418d3ed12d4db1f4df9329f\",\"license\":\"MIT\"},\"contracts/fast/FastFrontendFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFastAccess.sol';\\nimport './lib/LibFastToken.sol';\\n\\n\\ncontract FastFrontendFacet is AFastFacet {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  // Data structures.\\n\\n  struct Details {\\n    address addr;\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n    uint256 totalSupply;\\n    uint256 transferCredits;\\n    bool isSemiPublic;\\n    bool hasFixedSupply;\\n    uint256 reserveBalance;\\n    uint256 ethBalance;\\n    uint256 memberCount;\\n    uint256 governorCount;\\n  }\\n\\n  struct MemberDetails {\\n    address addr;\\n    uint256 balance;\\n    uint256 ethBalance;\\n    bool isGovernor;\\n  }\\n\\n  struct GovernorDetails {\\n    address addr;\\n    uint256 ethBalance;\\n    bool isMember;\\n  }\\n  // Emitters.\\n\\n  function emitDetailsChanged()\\n      external onlyDiamondFacet {\\n    LibFastAccess.Data storage accessData = LibFastAccess.data();\\n    LibFastToken.Data storage tokenData = LibFastToken.data();\\n    emit DetailsChanged({\\n      memberCount: accessData.memberSet.values.length,\\n      governorCount: accessData.governorSet.values.length,\\n      totalSupply: tokenData.totalSupply,\\n      transferCredits: tokenData.transferCredits,\\n      reserveBalance: tokenData.balances[LibConstants.ZERO_ADDRESS],\\n      ethBalance: payable(address(this)).balance\\n    });\\n  }\\n\\n  // Public functions.\\n\\n  function details()\\n      public view returns(Details memory) {\\n    LibFast.Data storage topStorage = LibFast.data();\\n    LibFastAccess.Data storage accessStorage = LibFastAccess.data();\\n    LibFastToken.Data storage tokenStorage = LibFastToken.data();\\n    return Details({\\n      addr: address(this),\\n      name: tokenStorage.name,\\n      symbol: tokenStorage.symbol,\\n      decimals: tokenStorage.decimals,\\n      totalSupply: tokenStorage.totalSupply,\\n      transferCredits: tokenStorage.transferCredits,\\n      isSemiPublic: topStorage.isSemiPublic,\\n      hasFixedSupply: topStorage.hasFixedSupply,\\n      reserveBalance: tokenStorage.balances[LibConstants.ZERO_ADDRESS],\\n      ethBalance: payable(address(this)).balance,\\n      memberCount: accessStorage.memberSet.values.length,\\n      governorCount: accessStorage.governorSet.values.length\\n    });\\n  }\\n\\n  function detailedMember(address member)\\n      public view returns(MemberDetails memory) {\\n    LibFastToken.Data storage tokenStorage = LibFastToken.data();\\n    LibFastAccess.Data storage accessStorage = LibFastAccess.data();\\n    return MemberDetails({\\n      addr: member,\\n      balance: tokenStorage.balances[member],\\n      ethBalance: member.balance,\\n      isGovernor: accessStorage.governorSet.contains(member)\\n    });\\n  }\\n\\n  function detailedGovernor(address governor)\\n      public view returns(GovernorDetails memory) {\\n    LibFastAccess.Data storage accessStorage = LibFastAccess.data();\\n    return GovernorDetails({\\n      addr: governor,\\n      ethBalance: governor.balance,\\n      isMember: accessStorage.memberSet.contains(governor)\\n    });\\n  }\\n\\n  function paginateDetailedMembers(uint256 index, uint256 perPage)\\n      external view returns(MemberDetails[] memory, uint256) {\\n    LibFastAccess.Data storage accessStorage = LibFastAccess.data();\\n    (address[] memory members, uint256 nextCursor) =\\n      LibPaginate.addresses(accessStorage.memberSet.values, index, perPage);\\n    MemberDetails[] memory values = new MemberDetails[](members.length);\\n    for (uint256 i = 0; i < members.length; ++i) {\\n      values[i] = detailedMember(members[i]);\\n    }\\n    return (values, nextCursor);\\n  }\\n\\n  function paginateDetailedGovernors(uint256 index, uint256 perPage)\\n      external view returns(GovernorDetails[] memory, uint256) {\\n    LibFastAccess.Data storage accessStorage = LibFastAccess.data();\\n    (address[] memory governors, uint256 nextCursor) =\\n      LibPaginate.addresses(accessStorage.governorSet.values, index, perPage);\\n    GovernorDetails[] memory values = new GovernorDetails[](governors.length);\\n    for (uint256 i = 0; i < governors.length; ++i) {\\n      values[i] = detailedGovernor(governors[i]);\\n    }\\n    return (values, nextCursor);\\n  }\\n}\\n\",\"keccak256\":\"0x0d6a32e26b2a5c707de582658b1a9e6659cf3e3863f6a2ff1e497a8ff7427d87\",\"license\":\"MIT\"},\"contracts/fast/FastHistoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../lib/LibPaginate.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFastHistory.sol';\\n\\n\\ncontract FastHistoryFacet is AFastFacet {\\n  /// Minting history-keeping methods.\\n\\n  function minted(uint256 amount, string calldata ref)\\n      external onlyDiamondFacet() {\\n    // Keep track of the mint.\\n    LibFastHistory.data().supplyProofs.push(\\n      LibFastHistory.SupplyProof({\\n        op: LibFastHistory.SupplyOp.Mint,\\n        amount: amount,\\n        blockNumber: block.number,\\n        ref: ref\\n      })\\n    );\\n  }\\n\\n  function burnt(uint256 amount, string calldata ref)\\n      external onlyDiamondFacet() {\\n    // Keep track of the unmint.\\n    LibFastHistory.data().supplyProofs.push(\\n      LibFastHistory.SupplyProof({\\n        op: LibFastHistory.SupplyOp.Burn,\\n        amount: amount,\\n        blockNumber: block.number,\\n        ref: ref\\n      })\\n    );\\n  }\\n\\n  function supplyProofCount()\\n      external view returns(uint256) {\\n    return LibFastHistory.data().supplyProofs.length;\\n  }\\n\\n  function paginateSupplyProofs(uint256 cursor, uint256 perPage)\\n      external view returns(LibFastHistory.SupplyProof[] memory, uint256) {\\n    return LibPaginate.supplyProofs(LibFastHistory.data().supplyProofs, cursor, perPage);\\n  }\\n\\n  /// Transfer history-keeping methods.\\n\\n  function transfered(address spender, address from, address to, uint256 amount, string calldata ref)\\n      external onlyDiamondFacet() {\\n    LibFastHistory.Data storage s = LibFastHistory.data();\\n    // Keep track of the transfer proof ID for the sender and for the recipient.\\n    s.transferProofInvolvements[from].push(s.transferProofs.length);\\n    s.transferProofInvolvements[to].push(s.transferProofs.length);\\n    // Keep track of the transfer proof globally.\\n    s.transferProofs.push(\\n      LibFastHistory.TransferProof({\\n        spender: spender,\\n        from: from,\\n        to: to,\\n        amount: amount,\\n        blockNumber: block.number,\\n        ref: ref\\n      })\\n    );\\n  }\\n\\n  function transferProofCount()\\n      external view returns(uint256) {\\n    return LibFastHistory.data().transferProofs.length;\\n  }\\n\\n  function paginateTransferProofs(uint256 cursor, uint256 perPage)\\n      external view returns(LibFastHistory.TransferProof[] memory, uint256) {\\n    return LibPaginate.transferProofs(LibFastHistory.data().transferProofs, cursor, perPage);\\n  }\\n\\n  function transferProofByInvolveeCount(address involvee)\\n      external view returns(uint256) {\\n    return LibFastHistory.data().transferProofInvolvements[involvee].length;\\n  }\\n\\n  function paginateTransferProofIndicesByInvolvee(address involvee, uint256 cursor, uint256 perPage)\\n      external view returns(uint256[] memory, uint256) {\\n    return LibPaginate.uint256s(LibFastHistory.data().transferProofInvolvements[involvee], cursor, perPage);\\n  }\\n\\n  function paginateTransferProofsByInvolvee(address involvee, uint256 cursor, uint256 perPage)\\n      external view returns(LibFastHistory.TransferProof[] memory, uint256) {\\n    LibFastHistory.Data storage s = LibFastHistory.data();\\n    uint256[] storage collection  = s.transferProofInvolvements[involvee];\\n    uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n    LibFastHistory.TransferProof[] memory values = new LibFastHistory.TransferProof[](length);\\n    for (uint256 i = 0; i < length; i++) {\\n      values[i] = s.transferProofs[collection[cursor + i]];\\n    }\\n    return (values, cursor + length);\\n  }\\n}\\n\",\"keccak256\":\"0xaafd047e60319fd6ac2f61d133b97e61ae656237d858d95d6fc680c3114e9ab5\",\"license\":\"MIT\"},\"contracts/fast/FastTokenFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../interfaces/IERC20.sol';\\nimport '../interfaces/IERC1404.sol';\\nimport '../interfaces/IHasMembers.sol';\\nimport '../interfaces/IHasGovernors.sol';\\nimport '../lib/LibDiamond.sol';\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFastToken.sol';\\nimport './lib/IFast.sol';\\nimport './FastTopFacet.sol';\\nimport './FastAccessFacet.sol';\\nimport './FastHistoryFacet.sol';\\nimport './FastFrontendFacet.sol';\\n\\n\\ncontract FastTokenFacet is AFastFacet, IERC20, IERC1404 {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  // Minting methods.\\n\\n  function mint(uint256 amount, string calldata ref)\\n      external\\n      onlyIssuerMember {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n    // We want to make sure that either of these two is true:\\n    // - The token doesn't have fixed supply.\\n    // - The token has fixed supply but has no tokens yet (First and only mint).\\n    require(\\n      !FastTopFacet(address(this)).hasFixedSupply() || (s.totalSupply == 0 && this.balanceOf(address(0)) == 0),\\n      LibConstants.REQUIRES_CONTINUOUS_SUPPLY\\n    );\\n\\n    // Prepare the minted amount on the zero address.\\n    s.balances[address(0)] += amount;\\n\\n    // Keep track of the minting operation.\\n    FastHistoryFacet(address(this)).minted(amount, ref);\\n\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n    emit Minted(amount, ref);\\n  }\\n\\n  function burn(uint256 amount, string calldata ref)\\n      external\\n      onlyIssuerMember {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n\\n    require(!FastTopFacet(address(this)).hasFixedSupply(), LibConstants.REQUIRES_CONTINUOUS_SUPPLY);\\n    require(balanceOf(address(0)) >= amount, LibConstants.INSUFFICIENT_FUNDS);\\n\\n    // Remove the minted amount from the zero address.\\n    s.balances[address(0)] -= amount;\\n\\n    // Keep track of the minting operation.\\n    FastHistoryFacet(address(this)).burnt(amount, ref);\\n\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n    emit Burnt(amount, ref);\\n  }\\n\\n  // Tranfer Credit management.\\n\\n  function transferCredits()\\n      external view returns(uint256) {\\n    return LibFastToken.data().transferCredits;\\n  }\\n\\n  function addTransferCredits(uint256 amount)\\n      external\\n      onlyIssuerMember {\\n    LibFastToken.data().transferCredits += amount;\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n    emit TransferCreditsAdded(msg.sender, amount);\\n  }\\n\\n  function drainTransferCredits()\\n      external\\n      onlyIssuerMember {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n    // Emit!\\n    emit TransferCreditsDrained(msg.sender, s.transferCredits);\\n    // Drain credits.\\n    s.transferCredits = 0;\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n  }\\n\\n  // ERC20 implementation and transfer related methods.\\n\\n  function name()\\n      external view returns(string memory) {\\n    return LibFastToken.data().name;\\n  }\\n\\n  function symbol()\\n      external view returns(string memory) {\\n    return LibFastToken.data().symbol;\\n  }\\n\\n  function decimals()\\n      external view returns(uint256) {\\n    return LibFastToken.data().decimals;\\n  }\\n\\n  function totalSupply()\\n      external override view returns(uint256) {\\n    return LibFastToken.data().totalSupply;\\n  }\\n\\n  function balanceOf(address owner)\\n      public view override returns(uint256) {\\n    return LibFastToken.data().balances[owner];\\n  }\\n\\n  function transfer(address to, uint256 amount)\\n      external override returns(bool) {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performTransfer(\\n      TransferArgs({\\n        spender: msg.sender,\\n        from: msg.sender,\\n        to: to,\\n        amount: amount,\\n        ref: LibFastToken.DEFAULT_TRANSFER_REFERENCE\\n      })\\n    );\\n    return true;\\n  }\\n\\n  function transferWithRef(address to, uint256 amount, string calldata ref)\\n      external {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performTransfer(\\n      TransferArgs({\\n        spender: msg.sender,\\n        from: msg.sender,\\n        to: to,\\n        amount: amount,\\n        ref: ref\\n      })\\n    );\\n  }\\n\\n  function allowance(address owner, address spender)\\n      public view override returns(uint256) {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n    // If the allowance being queried is from the zero address and the spender\\n    // is a governor, we want to make sure that the spender has full rights over it.\\n    if (owner == address(0)) {\\n      require(FastAccessFacet(address(this)).isGovernor(spender), LibConstants.REQUIRES_FAST_GOVERNORSHIP);\\n      return s.balances[owner];\\n    }\\n    return s.allowances[owner][spender];\\n  }\\n\\n  function approve(address spender, uint256 amount)\\n      external override returns(bool) {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performApproval(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  function disapprove(address spender)\\n      external\\n      onlyMember(msg.sender) {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performDisapproval(msg.sender, spender);\\n  }\\n\\n  function transferFrom(address from, address to, uint256 amount)\\n      external override returns(bool) {\\n    transferFromWithRef(from, to, amount, LibFastToken.DEFAULT_TRANSFER_REFERENCE);\\n    return true;\\n  }\\n\\n  function transferFromWithRef(address from, address to, uint256 amount, string memory ref)\\n      public {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performTransfer(\\n      TransferArgs({\\n        spender: msg.sender,\\n        from: from,\\n        to: to,\\n        amount: amount,\\n        ref: ref\\n      })\\n    );\\n  }\\n\\n  // Allowances query operations.\\n\\n  function givenAllowanceCount(address owner)\\n      external view returns(uint256) {\\n    return LibFastToken.data().allowancesByOwner[owner].values.length;\\n  }\\n\\n  function paginateAllowancesByOwner(address owner, uint256 index, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(\\n      LibFastToken.data().allowancesByOwner[owner].values,\\n      index,\\n      perPage\\n    );\\n  }\\n\\n  function receivedAllowanceCount(address spender)\\n      external view returns(uint256) {\\n    return LibFastToken.data().allowancesBySpender[spender].values.length;\\n  }\\n\\n  function paginateAllowancesBySpender(address spender, uint256 index, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(\\n      LibFastToken.data().allowancesBySpender[spender].values,\\n      index,\\n      perPage\\n    );\\n  }\\n\\n  // ERC1404 implementation.\\n\\n  function detectTransferRestriction(address from, address to, uint256 amount)\\n      external view override returns(uint8) {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n    if (s.transferCredits < amount) {\\n      return LibFastToken.INSUFFICIENT_TRANSFER_CREDITS_CODE;\\n    } else if (!FastAccessFacet(address(this)).isMember(from) ||\\n               !FastAccessFacet(address(this)).isMember(to)) {\\n      return FastTopFacet(address(this)).isSemiPublic()\\n        ? LibFastToken.REQUIRES_MARKETPLACE_MEMBERSHIP_CODE\\n        : LibFastToken.REQUIRES_FAST_MEMBERSHIP_CODE;\\n    } else if (from == to) {\\n      return LibFastToken.REQUIRES_DIFFERENT_SENDER_AND_RECIPIENT_CODE;\\n    }\\n    return 0;\\n  }\\n\\n  function messageForTransferRestriction(uint8 restrictionCode)\\n      external override pure returns(string memory) {\\n    if (restrictionCode == LibFastToken.INSUFFICIENT_TRANSFER_CREDITS_CODE) {\\n      return LibConstants.INSUFFICIENT_TRANSFER_CREDITS;\\n    } else if (restrictionCode == LibFastToken.REQUIRES_MARKETPLACE_MEMBERSHIP_CODE) {\\n      return LibConstants.REQUIRES_MARKETPLACE_MEMBERSHIP;\\n    } else if (restrictionCode == LibFastToken.REQUIRES_FAST_MEMBERSHIP_CODE) {\\n      return LibConstants.REQUIRES_FAST_MEMBERSHIP;\\n    } else if (restrictionCode == LibFastToken.REQUIRES_DIFFERENT_SENDER_AND_RECIPIENT_CODE) {\\n      return LibConstants.REQUIRES_DIFFERENT_SENDER_AND_RECIPIENT;\\n    }\\n    revert(LibConstants.UNKNOWN_RESTRICTION_CODE);\\n  }\\n\\n  // These functions would be internal / private if we weren't using the diamond pattern.\\n  // Instead, they're `onlyDiamondFacet` - eg can only be called by facets of the current\\n  // FAST.\\n\\n  struct TransferArgs {\\n    address spender;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    string ref;\\n  }\\n\\n  function performTransfer(TransferArgs calldata p)\\n      external onlyDiamondFacet\\n      differentAddresses(p.from, p.to)\\n      onlyTokenHolder(p.from)\\n      onlyMarketplaceActiveMember(p.from)\\n      onlyTokenHolder(p.to) {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n\\n    // Make sure that there's enough funds.\\n    require(\\n      s.balances[p.from] >= p.amount,\\n      LibConstants.INSUFFICIENT_FUNDS\\n    );\\n    require(\\n      p.amount > 0,\\n      LibConstants.UNSUPPORTED_OPERATION\\n    );\\n\\n    // If this is an allowance transfer...\\n    if (p.spender != p.from) {\\n      // Make sure that the spender has enough allowance.\\n      require(\\n        FastTokenFacet(address(this)).allowance(p.from, p.spender) >= p.amount,\\n        LibConstants.INSUFFICIENT_ALLOWANCE\\n      );\\n\\n      // If the from account isn't the zero address...\\n      if (p.from != address(0)) {\\n        // Decrease allowance.\\n        uint256 newAllowance = s.allowances[p.from][p.spender] -= p.amount;\\n        // If the allowance reached zero, we want to remove that allowance from\\n        // the various other places where we keep track of it.\\n        if (newAllowance == 0) {\\n          s.allowancesByOwner[p.from].remove(p.spender, true);\\n          s.allowancesBySpender[p.spender].remove(p.from, true);\\n        }\\n      }\\n    }\\n\\n    // Keep track of the balances - `from` spends, `to` receives.\\n    s.balances[p.from] -= p.amount;\\n    s.balances[p.to] += p.amount;\\n\\n    // If the funds are not moving from the zero address, decrease transfer credits.\\n    if (p.from != address(0)) {\\n      // Make sure enough credits exist.\\n      require(\\n        s.transferCredits >= p.amount,\\n        LibConstants.INSUFFICIENT_TRANSFER_CREDITS\\n      );\\n      s.transferCredits -= p.amount;\\n    }\\n\\n    // If the funds are going to the ZERO address, decrease total supply.\\n    if (p.to == address(0)) {\\n      s.totalSupply -= p.amount;\\n      // If funds at address zero changed, we can emit a top-level details change event.\\n      FastFrontendFacet(address(this)).emitDetailsChanged();\\n    }\\n    // If the funds are moving from the zero address, increase total supply.\\n    else if (p.from == address(0)) {\\n      s.totalSupply += p.amount;\\n      // If funds at address zero changed, we can emit a top-level details change event.\\n      FastFrontendFacet(address(this)).emitDetailsChanged();\\n    }\\n\\n    // Keep track of the transfer in the history facet.\\n    FastHistoryFacet(address(this)).transfered(p.spender, p.from, p.to, p.amount, p.ref);\\n\\n    // Emit!\\n    emit Transfer(p.from, p.to, p.amount);\\n  }\\n\\n  function performApproval(address from, address spender, uint256 amount)\\n      external\\n      onlyDiamondFacet\\n      onlyTokenHolder(from) {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n\\n    // Store allowance...\\n    s.allowances[from][spender] += amount;\\n    // Keep track of given and received allowances.\\n    s.allowancesByOwner[from].add(spender, true);\\n    s.allowancesBySpender[spender].add(from, true);\\n\\n    // Emit!\\n    emit Approval(from, spender, amount);\\n  }\\n\\n  function performDisapproval(address from, address spender)\\n      external\\n      onlyDiamondFacet {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n\\n    // Remove allowance.\\n    s.allowances[from][spender] = 0;\\n    s.allowancesByOwner[from].remove(spender, false);\\n    s.allowancesBySpender[spender].remove(from, false);\\n\\n    // Emit!\\n    emit Disapproval(from, spender);\\n  }\\n\\n  // WARNING: This function contains two loops. We know that this should never\\n  // happen in solidity. However:\\n  // - In the context of our private chain, gas is cheap.\\n  // - It can only be called by a governor.\\n  function beforeRemovingMember(address member)\\n      external onlyDiamondFacet() {\\n    require(balanceOf(member) == 0, 'Balance is positive');\\n\\n    LibFastToken.Data storage s = LibFastToken.data();\\n\\n    // Remove all given allowances.\\n    address[] storage gaData = s.allowancesByOwner[member].values;\\n    while (gaData.length > 0) {\\n      // Make sure the call is performed externally so that we can mock.\\n      this.performDisapproval(member, gaData[0]);\\n    }\\n\\n    // Remove all received allowances.\\n    address[] storage raData = s.allowancesBySpender[member].values;\\n    while (raData.length > 0) {\\n      // Make sure the call is performed externally so that we can mock.\\n      this.performDisapproval(raData[0], member);\\n    }\\n  }\\n\\n  // Modifiers.\\n\\n  /** @dev Ensures that the given address is a member of the current FAST or the Zero Address.\\n   *  @param candidate The address to check.\\n   */\\n  modifier onlyTokenHolder(address candidate) {\\n    // Only perform checks if the address is non-zero.\\n    if (candidate != address(0)) {\\n    // FAST is semi-public - the only requirement to hold tokens is to be an marketplace member.\\n      if (IFast(address(this)).isSemiPublic()) {\\n        require(\\n          IHasMembers(LibFast.data().marketplace).isMember(candidate),\\n          LibConstants.REQUIRES_MARKETPLACE_MEMBERSHIP\\n        );\\n      }\\n      // FAST is private, the requirement to hold tokens is to be a member of that FAST.\\n      else {\\n        require(\\n          IHasMembers(address(this)).isMember(candidate),\\n          LibConstants.REQUIRES_FAST_MEMBERSHIP\\n        );\\n      }\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x65e9528d8ee04f9c6a26836f1e245e757702d3ce74e3ed8b2a6931568189718f\",\"license\":\"MIT\"},\"contracts/fast/FastTopFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../lib/LibConstants.sol';\\nimport '../lib/LibHelpers.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFast.sol';\\nimport './lib/IFastEvents.sol';\\nimport './FastFrontendFacet.sol';\\n\\ncontract FastTopFacet is AFastFacet {\\n  // Getters and setters for global flags.\\n\\n  function issuerAddress()\\n      external view returns(address) {\\n    return LibFast.data().issuer;\\n  }\\n\\n  function marketplaceAddress()\\n      external view returns(address) {\\n    return LibFast.data().marketplace;\\n  }\\n\\n  function isSemiPublic()\\n      external view returns(bool) {\\n    return LibFast.data().isSemiPublic;\\n  }\\n\\n  function hasFixedSupply()\\n      external view returns(bool) {\\n    return LibFast.data().hasFixedSupply;\\n  }\\n\\n  // Setters for global flags.\\n\\n  /// @dev Allows to switch from a private scheme to a semi-public scheme, but not the other way around.\\n  function setIsSemiPublic(bool flag)\\n      external\\n      onlyIssuerMember {\\n    LibFast.Data storage s = LibFast.data();\\n    // Someone is trying to toggle back to private?... No can do!isSemiPublic\\n    require(!this.isSemiPublic() || this.isSemiPublic() == flag, LibConstants.UNSUPPORTED_OPERATION);\\n    s.isSemiPublic = flag;\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n  }\\n}\\n\",\"keccak256\":\"0xfc72423bf816688bb3620dcb9c919fdd4a127e46c78d7408311da558a7112717\",\"license\":\"MIT\"},\"contracts/fast/lib/AFastFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../../lib/LibConstants.sol';\\nimport '../../lib/LibHelpers.sol';\\nimport '../../lib/LibAddressSet.sol';\\nimport '../../interfaces/IHasMembers.sol';\\nimport '../../interfaces/IHasGovernors.sol';\\nimport '../../interfaces/IHasActiveMembers.sol';\\nimport '../../interfaces/IERC173.sol';\\nimport '../lib/LibFast.sol';\\nimport './IFastEvents.sol';\\n\\n\\n/**\\n* @dev This contract is a group of modifiers that can be used by any facets to guard against\\n*       certain permissions.\\n*/\\nabstract contract AFastFacet is IFastEvents {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Modifiers.\\n\\n  /// @dev Ensures that a method can only be called by another facet of the same diamond.\\n  modifier onlyDiamondFacet() {\\n    require(\\n      msg.sender == address(this),\\n      LibConstants.INTERNAL_METHOD\\n    );\\n    _;\\n  }\\n\\n  /// @dev Ensures that a method can only be called by the owner of this diamond.\\n  modifier onlyDiamondOwner() {\\n    require(\\n      msg.sender == IERC173(address(this)).owner(),\\n      LibConstants.REQUIRES_DIAMOND_OWNERSHIP\\n    );\\n    _;\\n  }\\n\\n  /// @dev Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier onlyDeployer() {\\n    require(\\n      msg.sender == LibConstants.DEPLOYER_CONTRACT,\\n      LibConstants.INTERNAL_METHOD\\n    );\\n    _;\\n  }\\n\\n  /** @dev Ensures that the given address is a member of the Marketplace.\\n   *  @param candidate The address to check.\\n   */\\n  modifier onlyMarketplaceMember(address candidate) {\\n    require(\\n      IHasMembers(LibFast.data().marketplace).isMember(candidate),\\n      LibConstants.REQUIRES_MARKETPLACE_MEMBERSHIP\\n    );\\n    _;\\n  }\\n\\n  /** @dev Ensures a candidate is active in the Marketplace.\\n   *  @param candidate The address to check activation status on.\\n   */\\n  modifier onlyMarketplaceActiveMember(address candidate) {\\n    require(\\n      IHasActiveMembers(LibFast.data().marketplace).isMemberActive(candidate),\\n      LibConstants.REQUIRES_MARKETPLACE_ACTIVE_MEMBER\\n    );\\n    _;\\n  }\\n\\n  /** @dev Ensures that the message sender is a member of the ISSUER.\\n   */\\n  modifier onlyIssuerMember() {\\n    require(\\n      IHasMembers(LibFast.data().issuer).isMember(msg.sender),\\n      LibConstants.REQUIRES_ISSUER_MEMBERSHIP\\n    );\\n    _;\\n  }\\n\\n  /** @dev Ensures that the given address is a governor of the FAST.\\n   *  @param candidate The address to check.\\n   */\\n  modifier onlyGovernor(address candidate) {\\n    require(\\n      IHasGovernors(address(this)).isGovernor(candidate),\\n      LibConstants.REQUIRES_FAST_GOVERNORSHIP\\n    );\\n    _;\\n  }\\n\\n  /** @dev Ensures that the given address is a member of the FAST.\\n   *  @param candidate The address to check.\\n   */\\n  modifier onlyMember(address candidate) {\\n    require(\\n      IHasMembers(address(this)).isMember(candidate),\\n      LibConstants.REQUIRES_FAST_MEMBERSHIP\\n    );\\n    _;\\n  }\\n\\n  /** @dev Ensures address a is different from address b.\\n   *  @param a Address a\\n   *  @param b Address b\\n   */\\n  modifier differentAddresses(address a, address b) {\\n    require(a != b, LibConstants.REQUIRES_DIFFERENT_SENDER_AND_RECIPIENT);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x9daacc49f2758b6d88280646b092897371bba4b5e6136e8bb4427a2b6110cf3d\",\"license\":\"MIT\"},\"contracts/fast/lib/IFast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\ninterface IFast {\\n  function isSemiPublic() external view returns(bool);\\n  function hasFixedSupply() external view returns(bool);\\n}\\n\",\"keccak256\":\"0xea7b5645ce61b4f3c399bb1696603c57833e1f0b2fcce935f6420f55d602ba64\",\"license\":\"MIT\"},\"contracts/fast/lib/IFastEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\ninterface IFastEvents {\\n  // ETH provisioning events.\\n\\n  /** @dev Emited when someone provisions this Issuer with Eth.\\n   *  @param from The sender of the Eth.\\n   *  @param amount The quantity of Eth, expressed in Wei.\\n   */\\n  event EthReceived(address indexed from, uint256 amount);\\n  /** @dev Emited when Eth is drained from this Issuer.\\n   *  @param to The caller and recipient of the drained Eth.\\n   *  @param amount The quantity of Eth that was drained, expressed in Wei.\\n   */\\n  event EthDrained(address indexed to, uint256 amount);\\n\\n  // IHasMembers.\\n\\n  event MemberAdded(address indexed member);\\n  event MemberRemoved(address indexed member);\\n\\n  // IHasGovernors.\\n\\n  event GovernorAdded(address indexed governor);\\n  event GovernorRemoved(address indexed governor);\\n\\n  // Token related events.\\n\\n  // Issuance related events.\\n  event Minted(uint256 indexed amount, string indexed ref);\\n  event Burnt(uint256 indexed amount, string indexed ref);\\n\\n  // Transfer credits related events.\\n  event TransferCreditsAdded(address indexed issuerMember, uint256 amount);\\n  event TransferCreditsDrained(address indexed issuerMember, uint256 amount);\\n\\n  // ERC20 stuff.\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Disapproval(address indexed owner, address indexed spender);\\n\\n  // General events.\\n\\n  // This is an event that is fired whenever any of some of the FAST parameters\\n  // change, so that the frontend can react to it and refresh the general header\\n  // for that fast as well as the baseball cards in the FASTs list.\\n  event DetailsChanged(\\n    uint256 memberCount,\\n    uint256 governorCount,\\n    uint256 totalSupply,\\n    uint256 transferCredits,\\n    uint256 reserveBalance,\\n    uint256 ethBalance\\n  );\\n}\\n\",\"keccak256\":\"0x88c78543b04186504b265ef0c9af3d2f97ea12bbe41245422c24a8fd803b3382\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\nlibrary LibFast {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Fast.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0x80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705;\\n\\n  // Data structures.\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    /// @dev The internal pointer to the Issuer contract.\\n    address issuer;\\n    /// @dev The internal pointer to the Marketplace contract.\\n    address marketplace;\\n    /// @dev We have to track whether the token facet provides continuous minting or fixed supply.\\n    bool hasFixedSupply;\\n    /// @dev Whether or not this FAST requires to be a member to hold tokens.\\n    bool isSemiPublic;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x256d4e621e78e372066e339ef7ce4933e054cb0c409e3aa1ea1fdebc71677a9d\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\nlibrary LibFastAccess {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Fast.storage.Access'):\\n  bytes32 internal constant STORAGE_SLOT = 0x87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9a;\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    /// @dev We hold the list of the FAST governors in there.\\n    LibAddressSet.Data governorSet;\\n    // @dev The FAST members are held in there.\\n    LibAddressSet.Data memberSet;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x9744c77467b854899d5b5f9beaf4665f461adc8110432d174601a97f00e594ad\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastHistory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\nlibrary LibFastHistory {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Fast.storage.History'):\\n  bytes32 internal constant STORAGE_SLOT = 0x6bc8b61a9dd5fc049ea98027492a801d74e35fdf4d80d7fecd551a16e88fdbb4;\\n\\n  // Storage structures.\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    /// @dev All minting proofs are kept here.\\n    SupplyProof[] supplyProofs;\\n    /// @dev All transfer proofs are kept here.\\n    TransferProof[] transferProofs;\\n    /// @dev All transfers indices involving a given address are kept here.\\n    mapping(address => uint256[]) transferProofInvolvements;\\n  }\\n\\n  // Other structures.\\n\\n  /// @dev A minting operation could either be to mint or unmint tokens.\\n  enum SupplyOp { Mint, Burn }\\n\\n  /// @dev Minting operations are recorded for papertrail. This is the structure that keeps track of them.\\n  struct SupplyProof {\\n    SupplyOp op;\\n    uint256 amount;\\n    uint256 blockNumber;\\n    string ref;\\n  }\\n\\n  /// @dev Every transfer in is recorded. This is the structure that keeps track of them.\\n  struct TransferProof {\\n    address spender;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 blockNumber;\\n    string ref;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xd6af0fc0867dd0259fa6e0797f2b46cffac8a36f0380bf266e3ccf778aeb724c\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibFastToken {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Fast.storage.Token'):\\n  bytes32 internal constant STORAGE_SLOT = 0xb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261;\\n\\n  // Constants.\\n\\n  // ERC1404 Restriction codes.\\n  uint8 internal constant INSUFFICIENT_TRANSFER_CREDITS_CODE = 1;\\n  uint8 internal constant REQUIRES_FAST_MEMBERSHIP_CODE = 2;\\n  uint8 internal constant REQUIRES_MARKETPLACE_MEMBERSHIP_CODE = 3;\\n  uint8 internal constant REQUIRES_DIFFERENT_SENDER_AND_RECIPIENT_CODE = 4;\\n\\n  string internal constant DEFAULT_TRANSFER_REFERENCE = 'Unspecified - via ERC20';\\n\\n  // Data structures.\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    // ERC20 related properties for this FAST Token.\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n    uint256 totalSupply;\\n    // Every time a transfer is executed, the credit decreases by the amount\\n    // of said transfer.\\n    // It becomes impossible to transact once it reaches zero, and must\\n    // be provisioned by an Issuer member.\\n    uint256 transferCredits;\\n    // Our members balances are held here.\\n    mapping(address => uint256) balances;\\n    // Allowances are stored here.\\n    mapping(address => mapping(address => uint256)) allowances;\\n    mapping(address => LibAddressSet.Data) allowancesByOwner;\\n    mapping(address => LibAddressSet.Data) allowancesBySpender;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x34fbf2b9e5e3c6302dda7969f44f804ed21a9f08d55766d4b4b4b92de5afa5c8\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x7aca95eacea757ff86be09ed6f309fde42e402530ac7beae002e3c2586439a01\",\"license\":\"MIT\"},\"contracts/interfaces/IERC1404.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\n/**\\n * @dev Interface of the ERC1404 standard as defined in the EIP.\\n */\\ninterface IERC1404 {\\n  /**\\n   * @dev Returns a transfer restriction error code if the transfer shoudln't be permitted,\\n   *      or otherwise returns zero if everything looks fine.\\n   * @param owner is the account from which the tokens should be transfered.\\n   * @param recipient is the target of the transfer.\\n   * @param amount is the amount to be transfered.\\n   * @return a uint8 error code if a problem was detected, otherwise zero.\\n   */\\n  function detectTransferRestriction(address owner, address recipient, uint256 amount)\\n    external\\n    view\\n    returns (uint8);\\n\\n  /**\\n   * @dev Maps a transfer restriction error code into a human-readable string.\\n   * @param code is the code that should be transformed into a string.\\n   * @return A string that describes the given error code.\\n   */\\n  function messageForTransferRestriction(uint8 code) external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ecaada095d66283dda203f77cdd17d18f82bdf58d6fbe7830fc87aed2a80c38\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x6ab22e74708905d9c31867461fffbd2e24bc6ad094aa1aab39211d99e296ab32\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x207580afc51139c2cac95644bf77d5fbb152b7abb03397e8d3c7992d0e8ad883\",\"license\":\"MIT\"},\"contracts/interfaces/IHasActiveMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\ninterface IHasActiveMembers {\\n  function isMemberActive(address member) external view returns(bool);\\n  function deactivateMember(address payable member) external;\\n  function activateMember(address member) external;\\n}\\n\",\"keccak256\":\"0x59859780a1d3a37c35d1dd2516434b170d49d044ef20918aa565703ab8f4a09a\",\"license\":\"MIT\"},\"contracts/interfaces/IHasGovernors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\ninterface IHasGovernors {\\n  function isGovernor(address governor) external view returns(bool);\\n  function governorCount() external view returns(uint256);\\n  function paginateGovernors(uint256 index, uint256 perPage) external view returns(address[] memory, uint256);\\n  function addGovernor(address payable governor) external;\\n  function removeGovernor(address governor) external;\\n}\\n\",\"keccak256\":\"0x87c9cb1f7f829c1197834d12eb05763217b0b56be530f1ab6fe0ded4500b5dd0\",\"license\":\"MIT\"},\"contracts/interfaces/IHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\ninterface IHasMembers {\\n  function isMember(address member) external view returns(bool);\\n  function memberCount() external view returns(uint256);\\n  function paginateMembers(uint256 index, uint256 perPage) external view returns(address[] memory, uint256);\\n  function addMember(address payable member) external;\\n  function removeMember(address member) external;\\n}\\n\",\"keccak256\":\"0x41cfdd80b0ab31a1e0a00f65cae19690aab7917b2c61faa7f7f478771e9a28ae\",\"license\":\"MIT\"},\"contracts/issuer/IssuerTopFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../lib/LibHelpers.sol';\\nimport '../fast/FastTopFacet.sol';\\nimport '../fast/FastTokenFacet.sol';\\nimport './lib/AIssuerFacet.sol';\\nimport './lib/LibIssuer.sol';\\n\\n\\ncontract IssuerTopFacet is AIssuerFacet {\\n  using LibAddressSet for LibAddressSet.Data;\\n  // FAST management related methods.\\n\\n  /** @dev Queries whether a given address is a known and registered FAST contract.\\n   * @param fast The address of the contract to check.\\n   * @return A boolean.\\n   */\\n  function isFastRegistered(address fast)\\n      external view returns(bool) {\\n    return LibIssuer.data().fastSet.contains(fast);\\n  }\\n\\n  /** @dev Allows to retrieve the address of a FAST diamond given its symbol.\\n   *  @param symbol The symbol of the FAST diamond to get the address of.\\n   *  @return The address of the corresponding FAST diamond, or the Zero Address if not found.\\n   */\\n  function fastBySymbol(string calldata symbol)\\n      external view returns(address) {\\n    return LibIssuer.data().fastSymbols[symbol];\\n  }\\n\\n  /** @dev Allows the registration of a given FAST diamond with this Issuer.\\n   *  @param fast The address of the FAST diamond to be registered.\\n   *  @notice Requires that the caller is a member of this Issuer.\\n   *  @notice Emits a `FastRegistered` event.\\n   */\\n  function registerFast(address fast)\\n      external\\n      onlyMember(msg.sender) {\\n    LibIssuer.Data storage s = LibIssuer.data();\\n    string memory symbol = FastTokenFacet(fast).symbol();\\n    require(s.fastSymbols[symbol] == address(0), LibConstants.DUPLICATE_ENTRY);\\n\\n    // Add the FAST to our list.\\n    s.fastSet.add(fast, false);\\n    // Add the fast symbol to our list.\\n    s.fastSymbols[symbol] = fast;\\n\\n    // Emit!\\n    emit FastRegistered(fast);\\n  }\\n\\n  /** @dev Counts the number of FAST diamonds registered with this Issuer.\\n   *  @return The number of FAST diamonds registered with this Issuer.\\n   */\\n  function fastCount()\\n      external view returns(uint256) {\\n    return LibIssuer.data().fastSet.values.length;\\n  }\\n\\n  /** @dev Paginates the FAST diamonds registered with this Issuer based on a starting cursor and a number of records per page.\\n   *  @param cursor The index at which to start.\\n   *  @param perPage How many records should be returned at most.\\n   *  @return A `address[]` list of values at most `perPage` big.\\n   *  @return A `uint256` index to the next page.\\n   */\\n  function paginateFasts(uint256 cursor, uint256 perPage)\\n      external view\\n      returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibIssuer.data().fastSet.values, cursor, perPage);\\n  }\\n}\\n\",\"keccak256\":\"0xd31841d0e2c7db9dba07147da39014bde1a64c078ff91e809625f6d048802d56\",\"license\":\"MIT\"},\"contracts/issuer/lib/AIssuerFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../../lib/LibConstants.sol';\\nimport '../../lib/LibHelpers.sol';\\nimport '../../lib/LibAddressSet.sol';\\nimport '../../interfaces/IERC173.sol';\\nimport '../lib/LibIssuerAccess.sol';\\nimport './IIssuerEvents.sol';\\n\\n\\n/**\\n* @dev This contract is a group of modifiers that can be used by any facets to guard against\\n*       certain permissions.\\n*/\\nabstract contract AIssuerFacet is IIssuerEvents {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Modifiers.\\n\\n  /// @dev Ensures that a method can only be called by another facet of the same diamond.\\n  modifier onlyDiamondFacet() {\\n    require(\\n      msg.sender == address(this),\\n      LibConstants.INTERNAL_METHOD\\n    );\\n    _;\\n  }\\n\\n  /// @dev Ensures that a method can only be called by the owner of this diamond.\\n  modifier onlyDiamondOwner() {\\n    require(\\n      msg.sender == IERC173(address(this)).owner(),\\n      LibConstants.REQUIRES_DIAMOND_OWNERSHIP\\n    );\\n    _;\\n  }\\n\\n  /// @dev Ensures that the given address is a member of the current FAST.\\n  modifier onlyMember(address candidate) {\\n    require(\\n      LibIssuerAccess.data().memberSet.contains(candidate),\\n      LibConstants.REQUIRES_ISSUER_MEMBERSHIP\\n    );\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xfc528a49a213e09230a9807adfa61cff88ea68cd08d497d27a094c3deb983f5e\",\"license\":\"MIT\"},\"contracts/issuer/lib/IIssuerEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\n// WARNING: These events must be maintained 1:1 with LibIssuerEvents!\\n// They also should never be emitted directly, they only help us defining\\n// typescript types!\\ninterface IIssuerEvents {\\n  // ETH provisioning events.\\n\\n  /** @dev Emited when someone provisions this Issuer with Eth.\\n   *  @param from The sender of the Eth.\\n   *  @param amount The quantity of Eth, expressed in Wei.\\n   */\\n  event EthReceived(address indexed from, uint256 amount);\\n  /** @dev Emited when Eth is drained from this Issuer.\\n   *  @param to The caller and recipient of the drained Eth.\\n   *  @param amount The quantity of Eth that was drained, expressed in Wei.\\n   */\\n  event EthDrained(address indexed to, uint256 amount);\\n\\n  // Fast registration events.\\n\\n  /** @dev Emited when a new FAST is registered.\\n   *  @param fast The address of the newly registered FAST diamond.\\n   */\\n  event FastRegistered(address indexed fast);\\n\\n  // IHasMembers.\\n\\n  event MemberAdded(address indexed member);\\n  event MemberRemoved(address indexed member);\\n}\\n\",\"keccak256\":\"0xc276da3d29e167c500731a012609352b06224efc8e5a0016fcbe2ab8cc141d22\",\"license\":\"MIT\"},\"contracts/issuer/lib/LibIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibIssuer {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Issuer.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0xd681d5f1de7bc4b7442c088939dc202585e09699e92a94c9717ace8d0f4fcaa5;\\n\\n  // Data structures.\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    // This is where we keep our list of deployed fast FASTs.\\n    LibAddressSet.Data fastSet;\\n    // We keep track of the FAST symbols that were already used.\\n    mapping(string => address) fastSymbols;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xc90a1bfdebb43e451d28ec2505405642a6526fea88cee1c3d04005d1eb11ae47\",\"license\":\"MIT\"},\"contracts/issuer/lib/LibIssuerAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibIssuerAccess {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Issuer.storage.Access'):\\n  bytes32 internal constant STORAGE_SLOT = 0x3ceaa4d5edf9c96fbd56140abe6389d65a87143d4f11819874ff2fe0ae9574db;\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    // This is where we hold our members data.\\n    LibAddressSet.Data memberSet;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x9605ebf07d01e36b595a50874cca80af5da88819625b2ec33aca959e9998b2fc\",\"license\":\"MIT\"},\"contracts/lib/LibAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\nlibrary LibAddressSet {\\n  /// @dev Represents a list of addresses.\\n  struct Data {\\n    mapping(address => uint256) indices;\\n    address[] values;\\n  }\\n\\n  /**\\n   * @dev Adds an item into the storage set. If the address already exists in the\\n   *      set, the function reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be added.\\n   */\\n  function add(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && exists) { return; }\\n    require(!exists, 'Address already in set');\\n    d.indices[key] = d.values.length;\\n    d.values.push(key);\\n  }\\n\\n  /**\\n   * @dev Removes an item from the storage set. If the address does not exist in the\\n   *      set, the function reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be removed.\\n   */\\n  function remove(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && !exists) { return; }\\n    require(exists, 'Address does not exist in set');\\n    uint256 lastIndex = d.values.length - 1;\\n    address keyToMove = d.values[lastIndex];\\n    uint256 idxToReplace = d.indices[key];\\n    d.indices[keyToMove] = idxToReplace;\\n    d.values[idxToReplace] = keyToMove;\\n    delete d.indices[key];\\n    d.values.pop();\\n  }\\n\\n  /**\\n   * @dev Tests whether or not a given item already exists in the set.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to test.\\n   * @return a boolean.\\n   */\\n  function contains(Data storage d, address key)\\n      internal view returns(bool) {\\n    return d.values.length == 0\\n      ? false\\n      : d.values[d.indices[key]] == key;\\n  }\\n}\\n\",\"keccak256\":\"0x7daf050d0864e085c227521b1157b4ea652fe75ea7e10f685027b42d6e1caf87\",\"license\":\"MIT\"},\"contracts/lib/LibConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\nlibrary LibConstants {\\n  address internal constant ZERO_ADDRESS = address(0);\\n  address internal constant DEPLOYER_CONTRACT = 0x6DF2D25d8C6FD680730ee658b530A05a99BB769a;\\n\\n  string internal constant ALREADY_INITIALIZED = 'Already initialized';\\n  string internal constant INTERNAL_METHOD = 'Internal method';\\n  string internal constant REQUIRES_DIAMOND_OWNERSHIP = 'Requires diamond ownership';\\n  string internal constant REQUIRES_FAST_CONTRACT_CALLER = 'Caller must be a FAST contract';\\n\\n  string internal constant REQUIRES_ISSUER_MEMBERSHIP = 'Requires Issuer membership';\\n  string internal constant REQUIRES_MARKETPLACE_MEMBERSHIP = 'Requires Marketplace membership';\\n  string internal constant REQUIRES_MARKETPLACE_ACTIVE_MEMBER = 'Requires active Marketplace member';\\n  string internal constant REQUIRES_MARKETPLACE_DEACTIVATED_MEMBER = 'Requires a deactivated Marketplace member';\\n\\n  string internal constant REQUIRES_FAST_GOVERNORSHIP = 'Requires FAST governorship';\\n  string internal constant REQUIRES_FAST_MEMBERSHIP = 'Requires FAST membership';\\n  string internal constant REQUIRES_NO_FAST_MEMBERSHIPS = 'Member still part of at least one FAST';\\n\\n  string internal constant DUPLICATE_ENTRY = 'Duplicate entry';\\n  string internal constant UNSUPPORTED_OPERATION = 'Unsupported operation';\\n  string internal constant REQUIRES_NON_ZERO_ADDRESS = 'Requires non-zero address';\\n  string internal constant REQUIRES_NON_CONTRACT_ADDR = 'Address cannot be a contract';\\n\\n  string internal constant REQUIRES_CONTINUOUS_SUPPLY = 'Requires continuous supply';\\n  string internal constant INSUFFICIENT_FUNDS = 'Insufficient token balance';\\n  string internal constant INSUFFICIENT_ALLOWANCE = 'Insufficient allowance';\\n  string internal constant INSUFFICIENT_TRANSFER_CREDITS = 'Insufficient transfer credits';\\n  string internal constant REQUIRES_DIFFERENT_SENDER_AND_RECIPIENT = 'Requires different sender and recipient';\\n  string internal constant UNKNOWN_RESTRICTION_CODE = 'Unknown restriction code';\\n}\\n\",\"keccak256\":\"0x6d1434c3486841d115794d0e31d13ef5bbb7babe42bfae164c51ea0fd59753fd\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x1c1bcc2f4ce958b3569ec95530879a584e4cf837d585a5059b3b612ad4a71a47\",\"license\":\"MIT\"},\"contracts/lib/LibHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary LibHelpers {\\n}\\n\",\"keccak256\":\"0x44e3992ae1f6a30bb38f404596fda43b2ff7a6b6d62620d14cd3656bea4b9ded\",\"license\":\"MIT\"},\"contracts/lib/LibPaginate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../fast/lib/LibFastHistory.sol';\\n\\n\\nlibrary LibPaginate {\\n  function addresses(address[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(address[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      address[] memory values = new address[](length);\\n      for (uint256 i = 0; i < length; i++) {\\n        values[i] = collection[cursor + i];\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function uint256s(uint256[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(uint256[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      uint256[] memory values = new uint256[](length);\\n      for (uint256 i = 0; i < length; i++) {\\n        values[i] = collection[cursor + i];\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function supplyProofs(LibFastHistory.SupplyProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.SupplyProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.SupplyProof[] memory values = new LibFastHistory.SupplyProof[](length);\\n      for (uint256 i = 0; i < length; i++) {\\n        values[i] = collection[cursor + i];\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function transferProofs(LibFastHistory.TransferProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.TransferProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.TransferProof[] memory values = new LibFastHistory.TransferProof[](length);\\n      for (uint256 i = 0; i < length; i++) {\\n        values[i] = collection[cursor + i];\\n      }\\n      return (values, cursor + length);\\n  }\\n}\",\"keccak256\":\"0xedbf24531aa1b21a17a7962b2053fe1bd81ddf9e8869f508f14f7fb9087631d9\",\"license\":\"MIT\"},\"contracts/marketplace/MarketplaceAccessFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../issuer/IssuerTopFacet.sol';\\nimport '../interfaces/IHasMembers.sol';\\nimport '../interfaces/IHasActiveMembers.sol';\\nimport './lib/LibMarketplaceAccess.sol';\\nimport './lib/AMarketplaceFacet.sol';\\n\\n\\n/** @title The Marketplace Smart Contract.\\n *  @dev The Marketplace Access facet is in charge of keeping track of marketplace members.\\n */\\ncontract MarketplaceAccessFacet is AMarketplaceFacet, IHasMembers, IHasActiveMembers {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  // Membership management.\\n\\n  /** @dev Queries whether a given address is a member of this Marketplace or not.\\n   *  @param candidate is the address to test.\\n   *  @return A `boolean` flag.\\n   */\\n  function isMember(address candidate)\\n      external override view returns(bool) {\\n    return LibMarketplaceAccess.data().memberSet.contains(candidate);\\n  }\\n\\n  /** @dev Counts the numbers of members present in this Marketplace.\\n   *  @return The number of members in this marketplace.\\n   */\\n  function memberCount()\\n      external override view returns(uint256) {\\n    return LibMarketplaceAccess.data().memberSet.values.length;\\n  }\\n\\n  /** @dev Paginates the members of this Marketplace based on a starting cursor and a number of records per page.\\n   *  @param cursor is the index at which to start.\\n   *  @param perPage is how many records should be returned at most.\\n   *  @return A `address[]` list of values at most `perPage` big.\\n   *  @return A `uint256` index to the next page.\\n   */\\n  function paginateMembers(uint256 cursor, uint256 perPage)\\n      external override view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibMarketplaceAccess.data().memberSet.values, cursor, perPage);\\n  }\\n\\n  /** @dev Adds a member to this Marketplace member list.\\n   *  @param member is the address of the member to be added.\\n   *  @notice Requires that the caller is a member of the linked Issuer.\\n   *  @notice Emits a `IHasMembers.MemberAdded` event.\\n   */\\n  function addMember(address payable member)\\n      external override\\n      onlyIssuerMember {\\n    // Add the member to our list.\\n    LibMarketplaceAccess.data().memberSet.add(member, false);\\n    // Emit!\\n    emit MemberAdded(member);\\n  }\\n\\n  /** @dev Removes a member from this Marketplace.\\n   *  @param member is the address of the member to be removed.\\n   *  @notice Requires that the caller is a member of the linked Issuer.\\n   *  @notice Emits a `IHasMembers.MemberRemoved` event.\\n   */\\n  function removeMember(address member)\\n      external override\\n      onlyIssuerMember {\\n    LibMarketplaceAccess.Data storage s = LibMarketplaceAccess.data();\\n    // Ensure that member doesn't have any FAST membership.\\n    require(s.fastMemberships[member].values.length == 0, LibConstants.REQUIRES_NO_FAST_MEMBERSHIPS);\\n    // Remove member.\\n    s.memberSet.remove(member, false);\\n    // Emit!\\n    emit MemberRemoved(member);\\n  }\\n\\n  /** @dev Allows to query FAST memberships for a given member address.\\n   *  @param member Is the address to check.\\n   *  @param cursor The index at which to start.\\n   *  @param perPage How many records should be returned at most.\\n   */\\n  function fastMemberships(address member, uint256 cursor, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibMarketplaceAccess.data().fastMemberships[member].values, cursor, perPage);\\n  }\\n\\n  /** @dev Callback from FAST contracts allowing the Marketplace contract to keep track of FAST memberships.\\n   *  @param member The member for which a new FAST membership has been added.\\n   */\\n  function memberAddedToFast(address member) \\n      external {\\n    // Verify that the given address is in fact a registered FAST contract.\\n    require(\\n      IssuerTopFacet(LibMarketplace.data().issuer).isFastRegistered(msg.sender),\\n      LibConstants.REQUIRES_FAST_CONTRACT_CALLER\\n    );\\n    // Keep track of the member's FAST membership.\\n    LibAddressSet.Data storage memberFasts = LibMarketplaceAccess.data().fastMemberships[member];\\n    memberFasts.add(msg.sender, false);\\n  }\\n\\n  /** @dev Callback from FAST contracts allowing the Marketplace contract to keep track of FAST memberships.\\n   *  @param member The member for which a FAST membership has been removed.\\n   */\\n  function memberRemovedFromFast(address member)\\n      external {\\n    require(\\n      IssuerTopFacet(LibMarketplace.data().issuer).isFastRegistered(msg.sender),\\n      LibConstants.REQUIRES_FAST_CONTRACT_CALLER\\n    );\\n    // Remove the tracked membership.\\n    LibAddressSet.Data storage memberFasts = LibMarketplaceAccess.data().fastMemberships[member];\\n    memberFasts.remove(msg.sender, false);\\n  }\\n\\n  /** @dev Given a member returns it's activation status.\\n   *  @param member The member to check activation status on.\\n   */\\n  function isMemberActive(address member) external override view returns(bool) {\\n    return !LibMarketplaceAccess.data().deactivatedMemberSet.contains(member);\\n  }\\n\\n  /** @dev Activates a member at the Marketplace level.\\n   *  @param member The member to remove from the deactivation member set.\\n   */\\n  function activateMember(address member)\\n    external\\n    override\\n    onlyIssuerMember\\n    onlyMember(member) {\\n    // Guard against attempting to activate an already active member.\\n    require(\\n      !this.isMemberActive(member),\\n      LibConstants.REQUIRES_MARKETPLACE_DEACTIVATED_MEMBER\\n    );\\n\\n    // Remove the member from the deactivated members list.\\n    LibMarketplaceAccess.data().deactivatedMemberSet.remove(member, false);\\n\\n    // Emit!\\n    emit MemberActivated(member);\\n  }\\n\\n  /** @dev Deactivates a member at the Marketplace level.\\n   *  @param member The member to add to the deactivation member set.\\n   */\\n  function deactivateMember(address payable member)\\n    external\\n    override\\n    onlyIssuerMember\\n    onlyMember(member) {\\n    // Guard against attempting to deactivate an already deactivated member.\\n    require(\\n      this.isMemberActive(member),\\n      LibConstants.REQUIRES_MARKETPLACE_ACTIVE_MEMBER\\n    );\\n\\n    // Add the member to the deactivated members list.\\n    LibMarketplaceAccess.data().deactivatedMemberSet.add(member, false);\\n\\n    // Emit!\\n    emit MemberDeactivated(member);\\n  }\\n}\\n\",\"keccak256\":\"0x8b63e804df697b589fd882d910f6955cf76fb94141338aee9e6ad331a50ce198\",\"license\":\"MIT\"},\"contracts/marketplace/lib/AMarketplaceFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../../lib/LibConstants.sol';\\nimport '../../lib/LibAddressSet.sol';\\nimport '../lib/LibMarketplace.sol';\\nimport '../lib/LibMarketplaceAccess.sol';\\nimport '../../interfaces/IERC173.sol';\\nimport '../../interfaces/IHasMembers.sol';\\nimport './IMarketplaceEvents.sol';\\n\\n\\n/**\\n* @dev This contract is a group of modifiers that can be used by any Marketplace facets to guard against\\n*       certain permissions.\\n*/\\nabstract contract AMarketplaceFacet is IMarketplaceEvents {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  // Modifiers.\\n\\n  /// @dev Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier onlyDeployer() {\\n    require(\\n      msg.sender == LibConstants.DEPLOYER_CONTRACT,\\n      LibConstants.INTERNAL_METHOD\\n    );\\n    _;\\n  }\\n\\n  /** @dev Requires that the message sender is a member of the linked Issuer.\\n   */\\n  modifier onlyIssuerMember() {\\n    require(\\n      IHasMembers(LibMarketplace.data().issuer).isMember(msg.sender),\\n      LibConstants.REQUIRES_ISSUER_MEMBERSHIP\\n    );\\n    _;\\n  }\\n\\n  /** @dev Requires that the given address is a member of the marketplace.\\n   *  @param candidate is the address to be checked.\\n   */\\n  modifier onlyMember(address candidate) {\\n    require(\\n      LibMarketplaceAccess.data().memberSet.contains(candidate),\\n      LibConstants.REQUIRES_MARKETPLACE_MEMBERSHIP\\n    );\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xdd2bae37112b59a55bd1bc7bb802196747e634a71132495386ec7690c8c17d2c\",\"license\":\"MIT\"},\"contracts/marketplace/lib/IMarketplaceEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\ninterface IMarketplaceEvents {\\n  // IHasMembers.\\n\\n  event MemberAdded(address indexed member);\\n  event MemberRemoved(address indexed member);\\n\\n  // IHasActiveMembers.\\n  event MemberActivated(address indexed member);\\n  event MemberDeactivated(address indexed member);\\n}\\n\",\"keccak256\":\"0x8e0e8db82da0af59cc0046495b82856b76455d1b11c9f20e94a8a104d8e9c3a4\",\"license\":\"MIT\"},\"contracts/marketplace/lib/LibMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibMarketplace {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Marketplace.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0xb59ec141376cee83f618e10e881bbb4789cdeee27e0d441a8c37ead3cb8b93c1;\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    /// @dev The internal pointer to the Issuer contract.\\n    address issuer;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x8fb3794ddf90f9b1aa7d9a96f11527098b1d33ab331a148b748e1c02519a100b\",\"license\":\"MIT\"},\"contracts/marketplace/lib/LibMarketplaceAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibMarketplaceAccess {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Marketplace.storage.Access'):\\n  bytes32 internal constant STORAGE_SLOT = 0xecb992c7a1185ca18ac50bc1672192fb67e7c3e74465887a8fcaab265dab37bd;\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    /// @dev This is where we hold our members data.\\n    LibAddressSet.Data memberSet;\\n    /// @dev This is where we keep track of our member FAST memberships.\\n    mapping(address => LibAddressSet.Data) fastMemberships;\\n    /// @dev This is where we keep track of our deactivated memberships.\\n    LibAddressSet.Data deactivatedMemberSet;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x5b7353cd87e253da8682d175a6e8b2ac58798cbd3b21861dfb5d26d59a26b023\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615233806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636ba09c5c116100f95780639c999d9011610097578063d4ce141511610071578063d4ce1415146104f2578063dd62ed3e14610522578063ddee550c14610552578063e8edd0e31461055c576101a9565b80639c999d9014610475578063a9059cbb146104a6578063c485bb96146104d6576101a9565b806377097fc8116100d357806377097fc8146103db5780637f4ab1dd146103f757806381a8f2431461042757806395d89b4114610457576101a9565b80636ba09c5c1461037157806370a082311461038f5780637641e6f3146103bf576101a9565b80631fe02e5311610166578063313ce56711610140578063313ce567146102ff57806344890ae01461031d5780635480699a146103395780635d7b590f14610355576101a9565b80631fe02e531461028257806323b872dd146102b357806330005916146102e3576101a9565b806302ff1049146101ae57806306675ba7146101ca57806306fdde03146101fa578063095ea7b31461021857806315770d991461024857806318160ddd14610264575b600080fd5b6101c860048036038101906101c39190614560565b610578565b005b6101e460048036038101906101df9190614537565b6107ba565b6040516101f19190614cec565b60405180910390f35b610202610812565b60405161020f9190614c48565b60405180910390f35b610232600480360381019061022d9190614666565b6108ad565b60405161023f9190614c2d565b60405180910390f35b610262600480360381019061025d9190614537565b610928565b005b61026c610a9b565b6040516102799190614cec565b60405180910390f35b61029c6004803603810190610297919061470e565b610aae565b6040516102aa929190614bfd565b60405180910390f35b6102cd60048036038101906102c8919061459c565b610b13565b6040516102da9190614c2d565b60405180910390f35b6102fd60048036038101906102f891906147c7565b610b61565b005b610307610d60565b6040516103149190614cec565b60405180910390f35b61033760048036038101906103329190614786565b610d83565b005b610353600480360381019061034e919061459c565b611f90565b005b61036f600480360381019061036a9190614537565b6124dc565b005b610379612838565b6040516103869190614cec565b60405180910390f35b6103a960048036038101906103a49190614537565b61284b565b6040516103b69190614cec565b60405180910390f35b6103d960048036038101906103d49190614819565b61289d565b005b6103f560048036038101906103f09190614819565b612cc3565b005b610411600480360381019061040c9190614871565b613108565b60405161041e9190614c48565b60405180910390f35b610441600480360381019061043c9190614537565b613294565b60405161044e9190614cec565b60405180910390f35b61045f6132ec565b60405161046c9190614c48565b60405180910390f35b61048f600480360381019061048a919061470e565b613387565b60405161049d929190614bfd565b60405180910390f35b6104c060048036038101906104bb9190614666565b6133ec565b6040516104cd9190614c2d565b60405180910390f35b6104f060048036038101906104eb91906145eb565b613500565b005b61050c6004803603810190610507919061459c565b6135d9565b6040516105199190614d39565b60405180910390f35b61053c60048036038101906105379190614560565b6137fb565b6040516105499190614cec565b60405180910390f35b61055a613a11565b005b610576600480360381019061057191906146a2565b613c08565b005b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600f81526020017f496e7465726e616c206d6574686f6400000000000000000000000000000000008152509061061e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106159190614c48565b60405180910390fd5b506000610629613d25565b905060008160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107058260008360080160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613d4d9092919063ffffffff16565b61075b8360008360090160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613d4d9092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f26b05c87141e7af7338d66d51fdd307c37ba1ddc85c6fb74ce01042ebcc17a7c60405160405180910390a3505050565b60006107c4613d25565b60080160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805490509050919050565b606061081c613d25565b600101805461082a90614f93565b80601f016020809104026020016040519081016040528092919081815260200182805461085690614f93565b80156108a35780601f10610878576101008083540402835291602001916108a3565b820191906000526020600020905b81548152906001019060200180831161088657829003601f168201915b5050505050905090565b60003073ffffffffffffffffffffffffffffffffffffffff16635480699a3385856040518463ffffffff1660e01b81526004016108ec93929190614bc6565b600060405180830381600087803b15801561090657600080fd5b505af115801561091a573d6000803e3d6000fd5b505050506001905092915050565b333073ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b81526004016109629190614b26565b60206040518083038186803b15801561097a57600080fd5b505afa15801561098e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b2919061475d565b6040518060400160405280601881526020017f52657175697265732046415354206d656d62657273686970000000000000000081525090610a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a209190614c48565b60405180910390fd5b503073ffffffffffffffffffffffffffffffffffffffff166302ff104933846040518363ffffffff1660e01b8152600401610a65929190614b41565b600060405180830381600087803b158015610a7f57600080fd5b505af1158015610a93573d6000803e3d6000fd5b505050505050565b6000610aa5613d25565b60040154905090565b60606000610b07610abd613d25565b60080160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018585614003565b91509150935093915050565b6000610b568484846040518060400160405280601781526020017f556e737065636966696564202d20766961204552433230000000000000000000815250613500565b600190509392505050565b610b696141c6565b60000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524336040518263ffffffff1660e01b8152600401610bc59190614b26565b60206040518083038186803b158015610bdd57600080fd5b505afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c15919061475d565b6040518060400160405280601a81526020017f526571756972657320497373756572206d656d6265727368697000000000000081525090610c8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c839190614c48565b60405180910390fd5b5080610c96613d25565b6005016000828254610ca89190614e72565b925050819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610cf757600080fd5b505af1158015610d0b573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f7cc75678011427765ae1f965e47e04223c08302df0151ddbf2df44f9e8572c3782604051610d559190614cec565b60405180910390a250565b6000610d6a613d25565b60030160009054906101000a900460ff1660ff16905090565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600f81526020017f496e7465726e616c206d6574686f64000000000000000000000000000000000081525090610e29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e209190614c48565b60405180910390fd5b50806020016020810190610e3d9190614537565b816040016020810190610e509190614537565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156040518060600160405280602781526020016151b56027913990610eda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed19190614c48565b60405180910390fd5b50826020016020810190610eee9190614537565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146111d9573073ffffffffffffffffffffffffffffffffffffffff166311e549336040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6857600080fd5b505afa158015610f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa0919061475d565b156110d657610fad6141c6565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b81526004016110099190614b26565b60206040518083038186803b15801561102157600080fd5b505afa158015611035573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611059919061475d565b6040518060400160405280601f81526020017f5265717569726573204d61726b6574706c616365206d656d6265727368697000815250906110d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c79190614c48565b60405180910390fd5b506111d8565b3073ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b815260040161110f9190614b26565b60206040518083038186803b15801561112757600080fd5b505afa15801561113b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115f919061475d565b6040518060400160405280601881526020017f52657175697265732046415354206d656d626572736869700000000000000000815250906111d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cd9190614c48565b60405180910390fd5b505b5b8360200160208101906111ec9190614537565b6111f46141c6565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166367317647826040518263ffffffff1660e01b81526004016112509190614b26565b60206040518083038186803b15801561126857600080fd5b505afa15801561127c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a0919061475d565b6040518060600160405280602281526020016151dc60229139906112fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f19190614c48565b60405180910390fd5b5084604001602081019061130e9190614537565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146115f9573073ffffffffffffffffffffffffffffffffffffffff166311e549336040518163ffffffff1660e01b815260040160206040518083038186803b15801561138857600080fd5b505afa15801561139c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c0919061475d565b156114f6576113cd6141c6565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b81526004016114299190614b26565b60206040518083038186803b15801561144157600080fd5b505afa158015611455573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611479919061475d565b6040518060400160405280601f81526020017f5265717569726573204d61726b6574706c616365206d656d6265727368697000815250906114f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e79190614c48565b60405180910390fd5b506115f8565b3073ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b815260040161152f9190614b26565b60206040518083038186803b15801561154757600080fd5b505afa15801561155b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157f919061475d565b6040518060400160405280601881526020017f52657175697265732046415354206d656d626572736869700000000000000000815250906115f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ed9190614c48565b60405180910390fd5b505b5b6000611603613d25565b905086606001358160060160008960200160208101906116239190614537565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156040518060400160405280601a81526020017f496e73756666696369656e7420746f6b656e2062616c616e6365000000000000815250906116d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ce9190614c48565b60405180910390fd5b5060008760600135116040518060400160405280601581526020017f556e737570706f72746564206f7065726174696f6e000000000000000000000081525090611757576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174e9190614c48565b60405180910390fd5b5086602001602081019061176b9190614537565b73ffffffffffffffffffffffffffffffffffffffff168760000160208101906117949190614537565b73ffffffffffffffffffffffffffffffffffffffff1614611ae45786606001353073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e8960200160208101906117e39190614537565b8a60000160208101906117f69190614537565b6040518363ffffffff1660e01b8152600401611813929190614b41565b60206040518083038186803b15801561182b57600080fd5b505afa15801561183f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186391906147f0565b10156040518060400160405280601681526020017f496e73756666696369656e7420616c6c6f77616e636500000000000000000000815250906118dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d39190614c48565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168760200160208101906119089190614537565b73ffffffffffffffffffffffffffffffffffffffff1614611ae357600087606001358260070160008a60200160208101906119439190614537565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a60000160208101906119929190614537565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119db9190614ec8565b92505081905590506000811415611ae157611a66886000016020810190611a029190614537565b60018460080160008c6020016020810190611a1d9190614537565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613d4d9092919063ffffffff16565b611ae0886020016020810190611a7c9190614537565b60018460090160008c6000016020810190611a979190614537565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613d4d9092919063ffffffff16565b5b505b5b8660600135816006016000896020016020810190611b029190614537565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b4b9190614ec8565b925050819055508660600135816006016000896040016020810190611b709190614537565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611bb99190614e72565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff16876020016020810190611beb9190614537565b73ffffffffffffffffffffffffffffffffffffffff1614611caa578660600135816005015410156040518060400160405280601d81526020017f496e73756666696369656e74207472616e73666572206372656469747300000081525090611c89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c809190614c48565b60405180910390fd5b508660600135816005016000828254611ca29190614ec8565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff16876040016020810190611cd59190614537565b73ffffffffffffffffffffffffffffffffffffffff161415611d75578660600135816004016000828254611d099190614ec8565b925050819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611d5857600080fd5b505af1158015611d6c573d6000803e3d6000fd5b50505050611e3d565b600073ffffffffffffffffffffffffffffffffffffffff16876020016020810190611da09190614537565b73ffffffffffffffffffffffffffffffffffffffff161415611e3c578660600135816004016000828254611dd49190614e72565b925050819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611e2357600080fd5b505af1158015611e37573d6000803e3d6000fd5b505050505b5b3073ffffffffffffffffffffffffffffffffffffffff1663eee2dcc3886000016020810190611e6c9190614537565b896020016020810190611e7f9190614537565b8a6040016020810190611e929190614537565b8b606001358c8060800190611ea79190614d54565b6040518763ffffffff1660e01b8152600401611ec896959493929190614b6a565b600060405180830381600087803b158015611ee257600080fd5b505af1158015611ef6573d6000803e3d6000fd5b50505050866040016020810190611f0d9190614537565b73ffffffffffffffffffffffffffffffffffffffff16876020016020810190611f369190614537565b73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8960600135604051611f7f9190614cec565b60405180910390a350505050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600f81526020017f496e7465726e616c206d6574686f64000000000000000000000000000000000081525090612036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202d9190614c48565b60405180910390fd5b5082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612323573073ffffffffffffffffffffffffffffffffffffffff166311e549336040518163ffffffff1660e01b815260040160206040518083038186803b1580156120b257600080fd5b505afa1580156120c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ea919061475d565b15612220576120f76141c6565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b81526004016121539190614b26565b60206040518083038186803b15801561216b57600080fd5b505afa15801561217f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a3919061475d565b6040518060400160405280601f81526020017f5265717569726573204d61726b6574706c616365206d656d62657273686970008152509061221a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122119190614c48565b60405180910390fd5b50612322565b3073ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b81526004016122599190614b26565b60206040518083038186803b15801561227157600080fd5b505afa158015612285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a9919061475d565b6040518060400160405280601881526020017f52657175697265732046415354206d656d62657273686970000000000000000081525090612320576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123179190614c48565b60405180910390fd5b505b5b600061232d613d25565b9050828160070160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123bd9190614e72565b9250508190555061241a8460018360080160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206141ee9092919063ffffffff16565b6124708560018360090160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206141ee9092919063ffffffff16565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040516124cd9190614cec565b60405180910390a35050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600f81526020017f496e7465726e616c206d6574686f64000000000000000000000000000000000081525090612582576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125799190614c48565b60405180910390fd5b50600061258e8261284b565b146125ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c590614c6a565b60405180910390fd5b60006125d8613d25565b905060008160080160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010190505b600081805490501115612706573073ffffffffffffffffffffffffffffffffffffffff166302ff10498483600081548110612687577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004016126cf929190614b41565b600060405180830381600087803b1580156126e957600080fd5b505af11580156126fd573d6000803e3d6000fd5b50505050612623565b60008260090160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010190505b600081805490501115612832573073ffffffffffffffffffffffffffffffffffffffff166302ff1049826000815481106127b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff1660e01b81526004016127fb929190614b41565b600060405180830381600087803b15801561281557600080fd5b505af1158015612829573d6000803e3d6000fd5b5050505061274f565b50505050565b6000612842613d25565b60050154905090565b6000612855613d25565b60060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6128a56141c6565b60000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524336040518263ffffffff1660e01b81526004016129019190614b26565b60206040518083038186803b15801561291957600080fd5b505afa15801561292d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612951919061475d565b6040518060400160405280601a81526020017f526571756972657320497373756572206d656d62657273686970000000000000815250906129c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129bf9190614c48565b60405180910390fd5b5060006129d3613d25565b90503073ffffffffffffffffffffffffffffffffffffffff1663ddb2d22b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a1b57600080fd5b505afa158015612a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a53919061475d565b156040518060400160405280601a81526020017f526571756972657320636f6e74696e756f757320737570706c7900000000000081525090612acb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ac29190614c48565b60405180910390fd5b5083612ad7600061284b565b10156040518060400160405280601a81526020017f496e73756666696369656e7420746f6b656e2062616c616e636500000000000081525090612b50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b479190614c48565b60405180910390fd5b50838160060160008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ba29190614ec8565b925050819055503073ffffffffffffffffffffffffffffffffffffffff1663f4c1210c8585856040518463ffffffff1660e01b8152600401612be693929190614d07565b600060405180830381600087803b158015612c0057600080fd5b505af1158015612c14573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612c6057600080fd5b505af1158015612c74573d6000803e3d6000fd5b505050508282604051612c88929190614b0d565b6040518091039020847f57307d0a4121422158dae7be68e769aa82d8631467b971e4fdfdf3ce9b4c8b7b60405160405180910390a350505050565b612ccb6141c6565b60000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524336040518263ffffffff1660e01b8152600401612d279190614b26565b60206040518083038186803b158015612d3f57600080fd5b505afa158015612d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d77919061475d565b6040518060400160405280601a81526020017f526571756972657320497373756572206d656d6265727368697000000000000081525090612dee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612de59190614c48565b60405180910390fd5b506000612df9613d25565b90503073ffffffffffffffffffffffffffffffffffffffff1663ddb2d22b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e4157600080fd5b505afa158015612e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e79919061475d565b1580612f1e575060008160040154148015612f1d575060003073ffffffffffffffffffffffffffffffffffffffff166370a0823160006040518263ffffffff1660e01b8152600401612ecb9190614b26565b60206040518083038186803b158015612ee357600080fd5b505afa158015612ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1b91906147f0565b145b5b6040518060400160405280601a81526020017f526571756972657320636f6e74696e756f757320737570706c7900000000000081525090612f95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8c9190614c48565b60405180910390fd5b50838160060160008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612fe79190614e72565b925050819055503073ffffffffffffffffffffffffffffffffffffffff1663af2e757b8585856040518463ffffffff1660e01b815260040161302b93929190614d07565b600060405180830381600087803b15801561304557600080fd5b505af1158015613059573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156130a557600080fd5b505af11580156130b9573d6000803e3d6000fd5b5050505082826040516130cd929190614b0d565b6040518091039020847fadef11a3979b8ceb0573eb6ef0678134a09c23a0d94e5ea47cd18ac3a9fc019460405160405180910390a350505050565b6060600160ff168260ff161415613156576040518060400160405280601d81526020017f496e73756666696369656e74207472616e736665722063726564697473000000815250905061328f565b600360ff168260ff1614156131a2576040518060400160405280601f81526020017f5265717569726573204d61726b6574706c616365206d656d6265727368697000815250905061328f565b600260ff168260ff1614156131ee576040518060400160405280601881526020017f52657175697265732046415354206d656d626572736869700000000000000000815250905061328f565b600460ff168260ff16141561321d576040518060600160405280602781526020016151b560279139905061328f565b6040518060400160405280601881526020017f556e6b6e6f776e207265737472696374696f6e20636f646500000000000000008152506040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132869190614c48565b60405180910390fd5b919050565b600061329e613d25565b60090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805490509050919050565b60606132f6613d25565b600201805461330490614f93565b80601f016020809104026020016040519081016040528092919081815260200182805461333090614f93565b801561337d5780601f106133525761010080835404028352916020019161337d565b820191906000526020600020905b81548152906001019060200180831161336057829003601f168201915b5050505050905090565b606060006133e0613396613d25565b60090160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018585614003565b91509150935093915050565b60003073ffffffffffffffffffffffffffffffffffffffff166344890ae06040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020016040518060400160405280601781526020017f556e737065636966696564202d207669612045524332300000000000000000008152508152506040518263ffffffff1660e01b81526004016134c49190614cca565b600060405180830381600087803b1580156134de57600080fd5b505af11580156134f2573d6000803e3d6000fd5b505050506001905092915050565b3073ffffffffffffffffffffffffffffffffffffffff166344890ae06040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152506040518263ffffffff1660e01b81526004016135a19190614cca565b600060405180830381600087803b1580156135bb57600080fd5b505af11580156135cf573d6000803e3d6000fd5b5050505050505050565b6000806135e4613d25565b905082816005015410156135fc5760019150506137f4565b3073ffffffffffffffffffffffffffffffffffffffff1663a230c524866040518263ffffffff1660e01b81526004016136359190614b26565b60206040518083038186803b15801561364d57600080fd5b505afa158015613661573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613685919061475d565b158061371757503073ffffffffffffffffffffffffffffffffffffffff1663a230c524856040518263ffffffff1660e01b81526004016136c59190614b26565b60206040518083038186803b1580156136dd57600080fd5b505afa1580156136f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613715919061475d565b155b156137b0573073ffffffffffffffffffffffffffffffffffffffff166311e549336040518163ffffffff1660e01b815260040160206040518083038186803b15801561376257600080fd5b505afa158015613776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061379a919061475d565b6137a55760026137a8565b60035b9150506137f4565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156137ee5760049150506137f4565b60009150505b9392505050565b600080613806613d25565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415613988573073ffffffffffffffffffffffffffffffffffffffff1663e43581b8846040518263ffffffff1660e01b81526004016138769190614b26565b60206040518083038186803b15801561388e57600080fd5b505afa1580156138a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c6919061475d565b6040518060400160405280601a81526020017f5265717569726573204641535420676f7665726e6f72736869700000000000008152509061393d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139349190614c48565b60405180910390fd5b508060060160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050613a0b565b8060070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150505b92915050565b613a196141c6565b60000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524336040518263ffffffff1660e01b8152600401613a759190614b26565b60206040518083038186803b158015613a8d57600080fd5b505afa158015613aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ac5919061475d565b6040518060400160405280601a81526020017f526571756972657320497373756572206d656d6265727368697000000000000081525090613b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b339190614c48565b60405180910390fd5b506000613b47613d25565b90503373ffffffffffffffffffffffffffffffffffffffff167fb5ffee8da10703700415cbf7e501408eb3da0c5dff8eae740afca33b2a2db9688260050154604051613b939190614cec565b60405180910390a2600081600501819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613bed57600080fd5b505af1158015613c01573d6000803e3d6000fd5b5050505050565b3073ffffffffffffffffffffffffffffffffffffffff166344890ae06040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152506040518263ffffffff1660e01b8152600401613ced9190614cca565b600060405180830381600087803b158015613d0757600080fd5b505af1158015613d1b573d6000803e3d6000fd5b5050505050505050565b60007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261905090565b6000613d59848461430b565b9050818015613d66575080155b15613d715750613ffe565b80613db1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613da890614caa565b60405180910390fd5b600060018560010180549050613dc79190614ec8565b90506000856001018281548110613e07577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008660000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808760000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081876001018281548110613efd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508660000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905586600101805480613fc4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050505b505050565b60606000808486805490506140189190614ec8565b84116140245783614035565b8486805490506140349190614ec8565b5b905060008167ffffffffffffffff811115614079577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156140a75781602001602082028036833780820191505090505b50905060005b828110156141aa578781886140c29190614e72565b815481106140f9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061415d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806141a290614ff6565b9150506140ad565b508082876141b89190614e72565b935093505050935093915050565b60007f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705905090565b60006141fa848461430b565b90508180156142065750805b156142115750614306565b8015614252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161424990614c8a565b60405180910390fd5b83600101805490508460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083600101839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b505050565b6000808360010180549050146143f6578173ffffffffffffffffffffffffffffffffffffffff16836001018460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481106143af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146143f9565b60005b905092915050565b600061441461440f84614dd0565b614dab565b90508281526020810184848401111561442c57600080fd5b614437848285614f51565b509392505050565b60008135905061444e81615158565b92915050565b6000815190506144638161516f565b92915050565b60008083601f84011261447b57600080fd5b8235905067ffffffffffffffff81111561449457600080fd5b6020830191508360018202830111156144ac57600080fd5b9250929050565b600082601f8301126144c457600080fd5b81356144d4848260208601614401565b91505092915050565b600060a082840312156144ef57600080fd5b81905092915050565b60008135905061450781615186565b92915050565b60008151905061451c81615186565b92915050565b6000813590506145318161519d565b92915050565b60006020828403121561454957600080fd5b60006145578482850161443f565b91505092915050565b6000806040838503121561457357600080fd5b60006145818582860161443f565b92505060206145928582860161443f565b9150509250929050565b6000806000606084860312156145b157600080fd5b60006145bf8682870161443f565b93505060206145d08682870161443f565b92505060406145e1868287016144f8565b9150509250925092565b6000806000806080858703121561460157600080fd5b600061460f8782880161443f565b94505060206146208782880161443f565b9350506040614631878288016144f8565b925050606085013567ffffffffffffffff81111561464e57600080fd5b61465a878288016144b3565b91505092959194509250565b6000806040838503121561467957600080fd5b60006146878582860161443f565b9250506020614698858286016144f8565b9150509250929050565b600080600080606085870312156146b857600080fd5b60006146c68782880161443f565b94505060206146d7878288016144f8565b935050604085013567ffffffffffffffff8111156146f457600080fd5b61470087828801614469565b925092505092959194509250565b60008060006060848603121561472357600080fd5b60006147318682870161443f565b9350506020614742868287016144f8565b9250506040614753868287016144f8565b9150509250925092565b60006020828403121561476f57600080fd5b600061477d84828501614454565b91505092915050565b60006020828403121561479857600080fd5b600082013567ffffffffffffffff8111156147b257600080fd5b6147be848285016144dd565b91505092915050565b6000602082840312156147d957600080fd5b60006147e7848285016144f8565b91505092915050565b60006020828403121561480257600080fd5b60006148108482850161450d565b91505092915050565b60008060006040848603121561482e57600080fd5b600061483c868287016144f8565b935050602084013567ffffffffffffffff81111561485957600080fd5b61486586828701614469565b92509250509250925092565b60006020828403121561488357600080fd5b600061489184828501614522565b91505092915050565b60006148a683836148b2565b60208301905092915050565b6148bb81614efc565b82525050565b6148ca81614efc565b82525050565b60006148db82614e11565b6148e58185614e34565b93506148f083614e01565b8060005b83811015614921578151614908888261489a565b975061491383614e27565b9250506001810190506148f4565b5085935050505092915050565b61493781614f0e565b82525050565b60006149498385614e56565b9350614956838584614f51565b61495f836150cc565b840190509392505050565b60006149768385614e67565b9350614983838584614f51565b82840190509392505050565b600061499a82614e1c565b6149a48185614e45565b93506149b4818560208601614f60565b6149bd816150cc565b840191505092915050565b60006149d382614e1c565b6149dd8185614e56565b93506149ed818560208601614f60565b6149f6816150cc565b840191505092915050565b6000614a0e601383614e56565b9150614a19826150dd565b602082019050919050565b6000614a31601683614e56565b9150614a3c82615106565b602082019050919050565b6000614a54601d83614e56565b9150614a5f8261512f565b602082019050919050565b600060a083016000830151614a8260008601826148b2565b506020830151614a9560208601826148b2565b506040830151614aa860408601826148b2565b506060830151614abb6060860182614ae0565b5060808301518482036080860152614ad3828261498f565b9150508091505092915050565b614ae981614f3a565b82525050565b614af881614f3a565b82525050565b614b0781614f44565b82525050565b6000614b1a82848661496a565b91508190509392505050565b6000602082019050614b3b60008301846148c1565b92915050565b6000604082019050614b5660008301856148c1565b614b6360208301846148c1565b9392505050565b600060a082019050614b7f60008301896148c1565b614b8c60208301886148c1565b614b9960408301876148c1565b614ba66060830186614aef565b8181036080830152614bb981848661493d565b9050979650505050505050565b6000606082019050614bdb60008301866148c1565b614be860208301856148c1565b614bf56040830184614aef565b949350505050565b60006040820190508181036000830152614c1781856148d0565b9050614c266020830184614aef565b9392505050565b6000602082019050614c42600083018461492e565b92915050565b60006020820190508181036000830152614c6281846149c8565b905092915050565b60006020820190508181036000830152614c8381614a01565b9050919050565b60006020820190508181036000830152614ca381614a24565b9050919050565b60006020820190508181036000830152614cc381614a47565b9050919050565b60006020820190508181036000830152614ce48184614a6a565b905092915050565b6000602082019050614d016000830184614aef565b92915050565b6000604082019050614d1c6000830186614aef565b8181036020830152614d2f81848661493d565b9050949350505050565b6000602082019050614d4e6000830184614afe565b92915050565b60008083356001602003843603038112614d6d57600080fd5b80840192508235915067ffffffffffffffff821115614d8b57600080fd5b602083019250600182023603831315614da357600080fd5b509250929050565b6000614db5614dc6565b9050614dc18282614fc5565b919050565b6000604051905090565b600067ffffffffffffffff821115614deb57614dea61509d565b5b614df4826150cc565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614e7d82614f3a565b9150614e8883614f3a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614ebd57614ebc61503f565b5b828201905092915050565b6000614ed382614f3a565b9150614ede83614f3a565b925082821015614ef157614ef061503f565b5b828203905092915050565b6000614f0782614f1a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015614f7e578082015181840152602081019050614f63565b83811115614f8d576000848401525b50505050565b60006002820490506001821680614fab57607f821691505b60208210811415614fbf57614fbe61506e565b5b50919050565b614fce826150cc565b810181811067ffffffffffffffff82111715614fed57614fec61509d565b5b80604052505050565b600061500182614f3a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156150345761503361503f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f42616c616e636520697320706f73697469766500000000000000000000000000600082015250565b7f4164647265737320616c726561647920696e2073657400000000000000000000600082015250565b7f4164647265737320646f6573206e6f7420657869737420696e20736574000000600082015250565b61516181614efc565b811461516c57600080fd5b50565b61517881614f0e565b811461518357600080fd5b50565b61518f81614f3a565b811461519a57600080fd5b50565b6151a681614f44565b81146151b157600080fd5b5056fe526571756972657320646966666572656e742073656e64657220616e6420726563697069656e74526571756972657320616374697665204d61726b6574706c616365206d656d626572a2646970667358221220371e8bfaf36040dc1bbe0fd788ae4e188286f39cce1ce093e673cdc556400aac64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80636ba09c5c116100f95780639c999d9011610097578063d4ce141511610071578063d4ce1415146104f2578063dd62ed3e14610522578063ddee550c14610552578063e8edd0e31461055c576101a9565b80639c999d9014610475578063a9059cbb146104a6578063c485bb96146104d6576101a9565b806377097fc8116100d357806377097fc8146103db5780637f4ab1dd146103f757806381a8f2431461042757806395d89b4114610457576101a9565b80636ba09c5c1461037157806370a082311461038f5780637641e6f3146103bf576101a9565b80631fe02e5311610166578063313ce56711610140578063313ce567146102ff57806344890ae01461031d5780635480699a146103395780635d7b590f14610355576101a9565b80631fe02e531461028257806323b872dd146102b357806330005916146102e3576101a9565b806302ff1049146101ae57806306675ba7146101ca57806306fdde03146101fa578063095ea7b31461021857806315770d991461024857806318160ddd14610264575b600080fd5b6101c860048036038101906101c39190614560565b610578565b005b6101e460048036038101906101df9190614537565b6107ba565b6040516101f19190614cec565b60405180910390f35b610202610812565b60405161020f9190614c48565b60405180910390f35b610232600480360381019061022d9190614666565b6108ad565b60405161023f9190614c2d565b60405180910390f35b610262600480360381019061025d9190614537565b610928565b005b61026c610a9b565b6040516102799190614cec565b60405180910390f35b61029c6004803603810190610297919061470e565b610aae565b6040516102aa929190614bfd565b60405180910390f35b6102cd60048036038101906102c8919061459c565b610b13565b6040516102da9190614c2d565b60405180910390f35b6102fd60048036038101906102f891906147c7565b610b61565b005b610307610d60565b6040516103149190614cec565b60405180910390f35b61033760048036038101906103329190614786565b610d83565b005b610353600480360381019061034e919061459c565b611f90565b005b61036f600480360381019061036a9190614537565b6124dc565b005b610379612838565b6040516103869190614cec565b60405180910390f35b6103a960048036038101906103a49190614537565b61284b565b6040516103b69190614cec565b60405180910390f35b6103d960048036038101906103d49190614819565b61289d565b005b6103f560048036038101906103f09190614819565b612cc3565b005b610411600480360381019061040c9190614871565b613108565b60405161041e9190614c48565b60405180910390f35b610441600480360381019061043c9190614537565b613294565b60405161044e9190614cec565b60405180910390f35b61045f6132ec565b60405161046c9190614c48565b60405180910390f35b61048f600480360381019061048a919061470e565b613387565b60405161049d929190614bfd565b60405180910390f35b6104c060048036038101906104bb9190614666565b6133ec565b6040516104cd9190614c2d565b60405180910390f35b6104f060048036038101906104eb91906145eb565b613500565b005b61050c6004803603810190610507919061459c565b6135d9565b6040516105199190614d39565b60405180910390f35b61053c60048036038101906105379190614560565b6137fb565b6040516105499190614cec565b60405180910390f35b61055a613a11565b005b610576600480360381019061057191906146a2565b613c08565b005b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600f81526020017f496e7465726e616c206d6574686f6400000000000000000000000000000000008152509061061e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106159190614c48565b60405180910390fd5b506000610629613d25565b905060008160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107058260008360080160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613d4d9092919063ffffffff16565b61075b8360008360090160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613d4d9092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f26b05c87141e7af7338d66d51fdd307c37ba1ddc85c6fb74ce01042ebcc17a7c60405160405180910390a3505050565b60006107c4613d25565b60080160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805490509050919050565b606061081c613d25565b600101805461082a90614f93565b80601f016020809104026020016040519081016040528092919081815260200182805461085690614f93565b80156108a35780601f10610878576101008083540402835291602001916108a3565b820191906000526020600020905b81548152906001019060200180831161088657829003601f168201915b5050505050905090565b60003073ffffffffffffffffffffffffffffffffffffffff16635480699a3385856040518463ffffffff1660e01b81526004016108ec93929190614bc6565b600060405180830381600087803b15801561090657600080fd5b505af115801561091a573d6000803e3d6000fd5b505050506001905092915050565b333073ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b81526004016109629190614b26565b60206040518083038186803b15801561097a57600080fd5b505afa15801561098e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b2919061475d565b6040518060400160405280601881526020017f52657175697265732046415354206d656d62657273686970000000000000000081525090610a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a209190614c48565b60405180910390fd5b503073ffffffffffffffffffffffffffffffffffffffff166302ff104933846040518363ffffffff1660e01b8152600401610a65929190614b41565b600060405180830381600087803b158015610a7f57600080fd5b505af1158015610a93573d6000803e3d6000fd5b505050505050565b6000610aa5613d25565b60040154905090565b60606000610b07610abd613d25565b60080160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018585614003565b91509150935093915050565b6000610b568484846040518060400160405280601781526020017f556e737065636966696564202d20766961204552433230000000000000000000815250613500565b600190509392505050565b610b696141c6565b60000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524336040518263ffffffff1660e01b8152600401610bc59190614b26565b60206040518083038186803b158015610bdd57600080fd5b505afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c15919061475d565b6040518060400160405280601a81526020017f526571756972657320497373756572206d656d6265727368697000000000000081525090610c8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c839190614c48565b60405180910390fd5b5080610c96613d25565b6005016000828254610ca89190614e72565b925050819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610cf757600080fd5b505af1158015610d0b573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f7cc75678011427765ae1f965e47e04223c08302df0151ddbf2df44f9e8572c3782604051610d559190614cec565b60405180910390a250565b6000610d6a613d25565b60030160009054906101000a900460ff1660ff16905090565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600f81526020017f496e7465726e616c206d6574686f64000000000000000000000000000000000081525090610e29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e209190614c48565b60405180910390fd5b50806020016020810190610e3d9190614537565b816040016020810190610e509190614537565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156040518060600160405280602781526020016151b56027913990610eda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed19190614c48565b60405180910390fd5b50826020016020810190610eee9190614537565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146111d9573073ffffffffffffffffffffffffffffffffffffffff166311e549336040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6857600080fd5b505afa158015610f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa0919061475d565b156110d657610fad6141c6565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b81526004016110099190614b26565b60206040518083038186803b15801561102157600080fd5b505afa158015611035573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611059919061475d565b6040518060400160405280601f81526020017f5265717569726573204d61726b6574706c616365206d656d6265727368697000815250906110d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c79190614c48565b60405180910390fd5b506111d8565b3073ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b815260040161110f9190614b26565b60206040518083038186803b15801561112757600080fd5b505afa15801561113b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115f919061475d565b6040518060400160405280601881526020017f52657175697265732046415354206d656d626572736869700000000000000000815250906111d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cd9190614c48565b60405180910390fd5b505b5b8360200160208101906111ec9190614537565b6111f46141c6565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166367317647826040518263ffffffff1660e01b81526004016112509190614b26565b60206040518083038186803b15801561126857600080fd5b505afa15801561127c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a0919061475d565b6040518060600160405280602281526020016151dc60229139906112fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f19190614c48565b60405180910390fd5b5084604001602081019061130e9190614537565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146115f9573073ffffffffffffffffffffffffffffffffffffffff166311e549336040518163ffffffff1660e01b815260040160206040518083038186803b15801561138857600080fd5b505afa15801561139c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c0919061475d565b156114f6576113cd6141c6565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b81526004016114299190614b26565b60206040518083038186803b15801561144157600080fd5b505afa158015611455573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611479919061475d565b6040518060400160405280601f81526020017f5265717569726573204d61726b6574706c616365206d656d6265727368697000815250906114f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e79190614c48565b60405180910390fd5b506115f8565b3073ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b815260040161152f9190614b26565b60206040518083038186803b15801561154757600080fd5b505afa15801561155b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157f919061475d565b6040518060400160405280601881526020017f52657175697265732046415354206d656d626572736869700000000000000000815250906115f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ed9190614c48565b60405180910390fd5b505b5b6000611603613d25565b905086606001358160060160008960200160208101906116239190614537565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156040518060400160405280601a81526020017f496e73756666696369656e7420746f6b656e2062616c616e6365000000000000815250906116d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ce9190614c48565b60405180910390fd5b5060008760600135116040518060400160405280601581526020017f556e737570706f72746564206f7065726174696f6e000000000000000000000081525090611757576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174e9190614c48565b60405180910390fd5b5086602001602081019061176b9190614537565b73ffffffffffffffffffffffffffffffffffffffff168760000160208101906117949190614537565b73ffffffffffffffffffffffffffffffffffffffff1614611ae45786606001353073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e8960200160208101906117e39190614537565b8a60000160208101906117f69190614537565b6040518363ffffffff1660e01b8152600401611813929190614b41565b60206040518083038186803b15801561182b57600080fd5b505afa15801561183f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186391906147f0565b10156040518060400160405280601681526020017f496e73756666696369656e7420616c6c6f77616e636500000000000000000000815250906118dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d39190614c48565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168760200160208101906119089190614537565b73ffffffffffffffffffffffffffffffffffffffff1614611ae357600087606001358260070160008a60200160208101906119439190614537565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a60000160208101906119929190614537565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119db9190614ec8565b92505081905590506000811415611ae157611a66886000016020810190611a029190614537565b60018460080160008c6020016020810190611a1d9190614537565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613d4d9092919063ffffffff16565b611ae0886020016020810190611a7c9190614537565b60018460090160008c6000016020810190611a979190614537565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613d4d9092919063ffffffff16565b5b505b5b8660600135816006016000896020016020810190611b029190614537565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b4b9190614ec8565b925050819055508660600135816006016000896040016020810190611b709190614537565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611bb99190614e72565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff16876020016020810190611beb9190614537565b73ffffffffffffffffffffffffffffffffffffffff1614611caa578660600135816005015410156040518060400160405280601d81526020017f496e73756666696369656e74207472616e73666572206372656469747300000081525090611c89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c809190614c48565b60405180910390fd5b508660600135816005016000828254611ca29190614ec8565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff16876040016020810190611cd59190614537565b73ffffffffffffffffffffffffffffffffffffffff161415611d75578660600135816004016000828254611d099190614ec8565b925050819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611d5857600080fd5b505af1158015611d6c573d6000803e3d6000fd5b50505050611e3d565b600073ffffffffffffffffffffffffffffffffffffffff16876020016020810190611da09190614537565b73ffffffffffffffffffffffffffffffffffffffff161415611e3c578660600135816004016000828254611dd49190614e72565b925050819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611e2357600080fd5b505af1158015611e37573d6000803e3d6000fd5b505050505b5b3073ffffffffffffffffffffffffffffffffffffffff1663eee2dcc3886000016020810190611e6c9190614537565b896020016020810190611e7f9190614537565b8a6040016020810190611e929190614537565b8b606001358c8060800190611ea79190614d54565b6040518763ffffffff1660e01b8152600401611ec896959493929190614b6a565b600060405180830381600087803b158015611ee257600080fd5b505af1158015611ef6573d6000803e3d6000fd5b50505050866040016020810190611f0d9190614537565b73ffffffffffffffffffffffffffffffffffffffff16876020016020810190611f369190614537565b73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8960600135604051611f7f9190614cec565b60405180910390a350505050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600f81526020017f496e7465726e616c206d6574686f64000000000000000000000000000000000081525090612036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202d9190614c48565b60405180910390fd5b5082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612323573073ffffffffffffffffffffffffffffffffffffffff166311e549336040518163ffffffff1660e01b815260040160206040518083038186803b1580156120b257600080fd5b505afa1580156120c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ea919061475d565b15612220576120f76141c6565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b81526004016121539190614b26565b60206040518083038186803b15801561216b57600080fd5b505afa15801561217f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a3919061475d565b6040518060400160405280601f81526020017f5265717569726573204d61726b6574706c616365206d656d62657273686970008152509061221a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122119190614c48565b60405180910390fd5b50612322565b3073ffffffffffffffffffffffffffffffffffffffff1663a230c524826040518263ffffffff1660e01b81526004016122599190614b26565b60206040518083038186803b15801561227157600080fd5b505afa158015612285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a9919061475d565b6040518060400160405280601881526020017f52657175697265732046415354206d656d62657273686970000000000000000081525090612320576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123179190614c48565b60405180910390fd5b505b5b600061232d613d25565b9050828160070160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123bd9190614e72565b9250508190555061241a8460018360080160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206141ee9092919063ffffffff16565b6124708560018360090160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206141ee9092919063ffffffff16565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040516124cd9190614cec565b60405180910390a35050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600f81526020017f496e7465726e616c206d6574686f64000000000000000000000000000000000081525090612582576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125799190614c48565b60405180910390fd5b50600061258e8261284b565b146125ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c590614c6a565b60405180910390fd5b60006125d8613d25565b905060008160080160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010190505b600081805490501115612706573073ffffffffffffffffffffffffffffffffffffffff166302ff10498483600081548110612687577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004016126cf929190614b41565b600060405180830381600087803b1580156126e957600080fd5b505af11580156126fd573d6000803e3d6000fd5b50505050612623565b60008260090160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010190505b600081805490501115612832573073ffffffffffffffffffffffffffffffffffffffff166302ff1049826000815481106127b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff1660e01b81526004016127fb929190614b41565b600060405180830381600087803b15801561281557600080fd5b505af1158015612829573d6000803e3d6000fd5b5050505061274f565b50505050565b6000612842613d25565b60050154905090565b6000612855613d25565b60060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6128a56141c6565b60000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524336040518263ffffffff1660e01b81526004016129019190614b26565b60206040518083038186803b15801561291957600080fd5b505afa15801561292d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612951919061475d565b6040518060400160405280601a81526020017f526571756972657320497373756572206d656d62657273686970000000000000815250906129c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129bf9190614c48565b60405180910390fd5b5060006129d3613d25565b90503073ffffffffffffffffffffffffffffffffffffffff1663ddb2d22b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a1b57600080fd5b505afa158015612a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a53919061475d565b156040518060400160405280601a81526020017f526571756972657320636f6e74696e756f757320737570706c7900000000000081525090612acb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ac29190614c48565b60405180910390fd5b5083612ad7600061284b565b10156040518060400160405280601a81526020017f496e73756666696369656e7420746f6b656e2062616c616e636500000000000081525090612b50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b479190614c48565b60405180910390fd5b50838160060160008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ba29190614ec8565b925050819055503073ffffffffffffffffffffffffffffffffffffffff1663f4c1210c8585856040518463ffffffff1660e01b8152600401612be693929190614d07565b600060405180830381600087803b158015612c0057600080fd5b505af1158015612c14573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612c6057600080fd5b505af1158015612c74573d6000803e3d6000fd5b505050508282604051612c88929190614b0d565b6040518091039020847f57307d0a4121422158dae7be68e769aa82d8631467b971e4fdfdf3ce9b4c8b7b60405160405180910390a350505050565b612ccb6141c6565b60000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524336040518263ffffffff1660e01b8152600401612d279190614b26565b60206040518083038186803b158015612d3f57600080fd5b505afa158015612d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d77919061475d565b6040518060400160405280601a81526020017f526571756972657320497373756572206d656d6265727368697000000000000081525090612dee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612de59190614c48565b60405180910390fd5b506000612df9613d25565b90503073ffffffffffffffffffffffffffffffffffffffff1663ddb2d22b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e4157600080fd5b505afa158015612e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e79919061475d565b1580612f1e575060008160040154148015612f1d575060003073ffffffffffffffffffffffffffffffffffffffff166370a0823160006040518263ffffffff1660e01b8152600401612ecb9190614b26565b60206040518083038186803b158015612ee357600080fd5b505afa158015612ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1b91906147f0565b145b5b6040518060400160405280601a81526020017f526571756972657320636f6e74696e756f757320737570706c7900000000000081525090612f95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8c9190614c48565b60405180910390fd5b50838160060160008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612fe79190614e72565b925050819055503073ffffffffffffffffffffffffffffffffffffffff1663af2e757b8585856040518463ffffffff1660e01b815260040161302b93929190614d07565b600060405180830381600087803b15801561304557600080fd5b505af1158015613059573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156130a557600080fd5b505af11580156130b9573d6000803e3d6000fd5b5050505082826040516130cd929190614b0d565b6040518091039020847fadef11a3979b8ceb0573eb6ef0678134a09c23a0d94e5ea47cd18ac3a9fc019460405160405180910390a350505050565b6060600160ff168260ff161415613156576040518060400160405280601d81526020017f496e73756666696369656e74207472616e736665722063726564697473000000815250905061328f565b600360ff168260ff1614156131a2576040518060400160405280601f81526020017f5265717569726573204d61726b6574706c616365206d656d6265727368697000815250905061328f565b600260ff168260ff1614156131ee576040518060400160405280601881526020017f52657175697265732046415354206d656d626572736869700000000000000000815250905061328f565b600460ff168260ff16141561321d576040518060600160405280602781526020016151b560279139905061328f565b6040518060400160405280601881526020017f556e6b6e6f776e207265737472696374696f6e20636f646500000000000000008152506040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132869190614c48565b60405180910390fd5b919050565b600061329e613d25565b60090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805490509050919050565b60606132f6613d25565b600201805461330490614f93565b80601f016020809104026020016040519081016040528092919081815260200182805461333090614f93565b801561337d5780601f106133525761010080835404028352916020019161337d565b820191906000526020600020905b81548152906001019060200180831161336057829003601f168201915b5050505050905090565b606060006133e0613396613d25565b60090160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018585614003565b91509150935093915050565b60003073ffffffffffffffffffffffffffffffffffffffff166344890ae06040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020016040518060400160405280601781526020017f556e737065636966696564202d207669612045524332300000000000000000008152508152506040518263ffffffff1660e01b81526004016134c49190614cca565b600060405180830381600087803b1580156134de57600080fd5b505af11580156134f2573d6000803e3d6000fd5b505050506001905092915050565b3073ffffffffffffffffffffffffffffffffffffffff166344890ae06040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152506040518263ffffffff1660e01b81526004016135a19190614cca565b600060405180830381600087803b1580156135bb57600080fd5b505af11580156135cf573d6000803e3d6000fd5b5050505050505050565b6000806135e4613d25565b905082816005015410156135fc5760019150506137f4565b3073ffffffffffffffffffffffffffffffffffffffff1663a230c524866040518263ffffffff1660e01b81526004016136359190614b26565b60206040518083038186803b15801561364d57600080fd5b505afa158015613661573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613685919061475d565b158061371757503073ffffffffffffffffffffffffffffffffffffffff1663a230c524856040518263ffffffff1660e01b81526004016136c59190614b26565b60206040518083038186803b1580156136dd57600080fd5b505afa1580156136f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613715919061475d565b155b156137b0573073ffffffffffffffffffffffffffffffffffffffff166311e549336040518163ffffffff1660e01b815260040160206040518083038186803b15801561376257600080fd5b505afa158015613776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061379a919061475d565b6137a55760026137a8565b60035b9150506137f4565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156137ee5760049150506137f4565b60009150505b9392505050565b600080613806613d25565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415613988573073ffffffffffffffffffffffffffffffffffffffff1663e43581b8846040518263ffffffff1660e01b81526004016138769190614b26565b60206040518083038186803b15801561388e57600080fd5b505afa1580156138a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c6919061475d565b6040518060400160405280601a81526020017f5265717569726573204641535420676f7665726e6f72736869700000000000008152509061393d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139349190614c48565b60405180910390fd5b508060060160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050613a0b565b8060070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150505b92915050565b613a196141c6565b60000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a230c524336040518263ffffffff1660e01b8152600401613a759190614b26565b60206040518083038186803b158015613a8d57600080fd5b505afa158015613aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ac5919061475d565b6040518060400160405280601a81526020017f526571756972657320497373756572206d656d6265727368697000000000000081525090613b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b339190614c48565b60405180910390fd5b506000613b47613d25565b90503373ffffffffffffffffffffffffffffffffffffffff167fb5ffee8da10703700415cbf7e501408eb3da0c5dff8eae740afca33b2a2db9688260050154604051613b939190614cec565b60405180910390a2600081600501819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613bed57600080fd5b505af1158015613c01573d6000803e3d6000fd5b5050505050565b3073ffffffffffffffffffffffffffffffffffffffff166344890ae06040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152506040518263ffffffff1660e01b8152600401613ced9190614cca565b600060405180830381600087803b158015613d0757600080fd5b505af1158015613d1b573d6000803e3d6000fd5b5050505050505050565b60007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261905090565b6000613d59848461430b565b9050818015613d66575080155b15613d715750613ffe565b80613db1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613da890614caa565b60405180910390fd5b600060018560010180549050613dc79190614ec8565b90506000856001018281548110613e07577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008660000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808760000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081876001018281548110613efd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508660000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905586600101805480613fc4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050505b505050565b60606000808486805490506140189190614ec8565b84116140245783614035565b8486805490506140349190614ec8565b5b905060008167ffffffffffffffff811115614079577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156140a75781602001602082028036833780820191505090505b50905060005b828110156141aa578781886140c29190614e72565b815481106140f9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061415d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806141a290614ff6565b9150506140ad565b508082876141b89190614e72565b935093505050935093915050565b60007f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705905090565b60006141fa848461430b565b90508180156142065750805b156142115750614306565b8015614252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161424990614c8a565b60405180910390fd5b83600101805490508460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083600101839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b505050565b6000808360010180549050146143f6578173ffffffffffffffffffffffffffffffffffffffff16836001018460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481106143af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146143f9565b60005b905092915050565b600061441461440f84614dd0565b614dab565b90508281526020810184848401111561442c57600080fd5b614437848285614f51565b509392505050565b60008135905061444e81615158565b92915050565b6000815190506144638161516f565b92915050565b60008083601f84011261447b57600080fd5b8235905067ffffffffffffffff81111561449457600080fd5b6020830191508360018202830111156144ac57600080fd5b9250929050565b600082601f8301126144c457600080fd5b81356144d4848260208601614401565b91505092915050565b600060a082840312156144ef57600080fd5b81905092915050565b60008135905061450781615186565b92915050565b60008151905061451c81615186565b92915050565b6000813590506145318161519d565b92915050565b60006020828403121561454957600080fd5b60006145578482850161443f565b91505092915050565b6000806040838503121561457357600080fd5b60006145818582860161443f565b92505060206145928582860161443f565b9150509250929050565b6000806000606084860312156145b157600080fd5b60006145bf8682870161443f565b93505060206145d08682870161443f565b92505060406145e1868287016144f8565b9150509250925092565b6000806000806080858703121561460157600080fd5b600061460f8782880161443f565b94505060206146208782880161443f565b9350506040614631878288016144f8565b925050606085013567ffffffffffffffff81111561464e57600080fd5b61465a878288016144b3565b91505092959194509250565b6000806040838503121561467957600080fd5b60006146878582860161443f565b9250506020614698858286016144f8565b9150509250929050565b600080600080606085870312156146b857600080fd5b60006146c68782880161443f565b94505060206146d7878288016144f8565b935050604085013567ffffffffffffffff8111156146f457600080fd5b61470087828801614469565b925092505092959194509250565b60008060006060848603121561472357600080fd5b60006147318682870161443f565b9350506020614742868287016144f8565b9250506040614753868287016144f8565b9150509250925092565b60006020828403121561476f57600080fd5b600061477d84828501614454565b91505092915050565b60006020828403121561479857600080fd5b600082013567ffffffffffffffff8111156147b257600080fd5b6147be848285016144dd565b91505092915050565b6000602082840312156147d957600080fd5b60006147e7848285016144f8565b91505092915050565b60006020828403121561480257600080fd5b60006148108482850161450d565b91505092915050565b60008060006040848603121561482e57600080fd5b600061483c868287016144f8565b935050602084013567ffffffffffffffff81111561485957600080fd5b61486586828701614469565b92509250509250925092565b60006020828403121561488357600080fd5b600061489184828501614522565b91505092915050565b60006148a683836148b2565b60208301905092915050565b6148bb81614efc565b82525050565b6148ca81614efc565b82525050565b60006148db82614e11565b6148e58185614e34565b93506148f083614e01565b8060005b83811015614921578151614908888261489a565b975061491383614e27565b9250506001810190506148f4565b5085935050505092915050565b61493781614f0e565b82525050565b60006149498385614e56565b9350614956838584614f51565b61495f836150cc565b840190509392505050565b60006149768385614e67565b9350614983838584614f51565b82840190509392505050565b600061499a82614e1c565b6149a48185614e45565b93506149b4818560208601614f60565b6149bd816150cc565b840191505092915050565b60006149d382614e1c565b6149dd8185614e56565b93506149ed818560208601614f60565b6149f6816150cc565b840191505092915050565b6000614a0e601383614e56565b9150614a19826150dd565b602082019050919050565b6000614a31601683614e56565b9150614a3c82615106565b602082019050919050565b6000614a54601d83614e56565b9150614a5f8261512f565b602082019050919050565b600060a083016000830151614a8260008601826148b2565b506020830151614a9560208601826148b2565b506040830151614aa860408601826148b2565b506060830151614abb6060860182614ae0565b5060808301518482036080860152614ad3828261498f565b9150508091505092915050565b614ae981614f3a565b82525050565b614af881614f3a565b82525050565b614b0781614f44565b82525050565b6000614b1a82848661496a565b91508190509392505050565b6000602082019050614b3b60008301846148c1565b92915050565b6000604082019050614b5660008301856148c1565b614b6360208301846148c1565b9392505050565b600060a082019050614b7f60008301896148c1565b614b8c60208301886148c1565b614b9960408301876148c1565b614ba66060830186614aef565b8181036080830152614bb981848661493d565b9050979650505050505050565b6000606082019050614bdb60008301866148c1565b614be860208301856148c1565b614bf56040830184614aef565b949350505050565b60006040820190508181036000830152614c1781856148d0565b9050614c266020830184614aef565b9392505050565b6000602082019050614c42600083018461492e565b92915050565b60006020820190508181036000830152614c6281846149c8565b905092915050565b60006020820190508181036000830152614c8381614a01565b9050919050565b60006020820190508181036000830152614ca381614a24565b9050919050565b60006020820190508181036000830152614cc381614a47565b9050919050565b60006020820190508181036000830152614ce48184614a6a565b905092915050565b6000602082019050614d016000830184614aef565b92915050565b6000604082019050614d1c6000830186614aef565b8181036020830152614d2f81848661493d565b9050949350505050565b6000602082019050614d4e6000830184614afe565b92915050565b60008083356001602003843603038112614d6d57600080fd5b80840192508235915067ffffffffffffffff821115614d8b57600080fd5b602083019250600182023603831315614da357600080fd5b509250929050565b6000614db5614dc6565b9050614dc18282614fc5565b919050565b6000604051905090565b600067ffffffffffffffff821115614deb57614dea61509d565b5b614df4826150cc565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614e7d82614f3a565b9150614e8883614f3a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614ebd57614ebc61503f565b5b828201905092915050565b6000614ed382614f3a565b9150614ede83614f3a565b925082821015614ef157614ef061503f565b5b828203905092915050565b6000614f0782614f1a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015614f7e578082015181840152602081019050614f63565b83811115614f8d576000848401525b50505050565b60006002820490506001821680614fab57607f821691505b60208210811415614fbf57614fbe61506e565b5b50919050565b614fce826150cc565b810181811067ffffffffffffffff82111715614fed57614fec61509d565b5b80604052505050565b600061500182614f3a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156150345761503361503f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f42616c616e636520697320706f73697469766500000000000000000000000000600082015250565b7f4164647265737320616c726561647920696e2073657400000000000000000000600082015250565b7f4164647265737320646f6573206e6f7420657869737420696e20736574000000600082015250565b61516181614efc565b811461516c57600080fd5b50565b61517881614f0e565b811461518357600080fd5b50565b61518f81614f3a565b811461519a57600080fd5b50565b6151a681614f44565b81146151b157600080fd5b5056fe526571756972657320646966666572656e742073656e64657220616e6420726563697069656e74526571756972657320616374697665204d61726b6574706c616365206d656d626572a2646970667358221220371e8bfaf36040dc1bbe0fd788ae4e188286f39cce1ce093e673cdc556400aac64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}