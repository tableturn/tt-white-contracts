{
  "address": "0x32001C8a82Fb06a1E176e42bb416cefC6E404Ea9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "memberCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "governorCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferCredits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethBalance",
          "type": "uint256"
        }
      ],
      "name": "DetailsChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "detailedMember",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethBalance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isGovernor",
              "type": "bool"
            }
          ],
          "internalType": "struct FastFrontendFacet.MemberDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "details",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "transferCredits",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isSemiPublic",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasFixedSupply",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "reserveBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "memberCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "governorCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct FastFrontendFacet.Details",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emitDetailsChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perPage",
          "type": "uint256"
        }
      ],
      "name": "paginateDetailedMembers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethBalance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isGovernor",
              "type": "bool"
            }
          ],
          "internalType": "struct FastFrontendFacet.MemberDetails[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d17881747c0a09e71f5aafb150c8d004c6b8a082bdc6744b3d4e56a16834f1f",
  "receipt": {
    "to": "0x6DF2D25d8C6FD680730ee658b530A05a99BB769a",
    "from": "0x717634cfe06FFAB2CEAA7fcf1b9019813f4B25FE",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1236475",
    "logsBloom": "0x
    "blockHash": "0x8886c5a156cc3759d10c3e80406a6db9ae8f31c58961ef321f8722ec7c963d4a",
    "transactionHash": "0x7d17881747c0a09e71f5aafb150c8d004c6b8a082bdc6744b3d4e56a16834f1f",
    "logs": [],
    "blockNumber": 5993699,
    "cumulativeGasUsed": "1236475",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fd2c1b70eb30f59fcde03d0960e64f71",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"memberCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"governorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferCredits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"}],\"name\":\"DetailsChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"detailedMember\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isGovernor\",\"type\":\"bool\"}],\"internalType\":\"struct FastFrontendFacet.MemberDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"details\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferCredits\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSemiPublic\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasFixedSupply\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reserveBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"memberCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"governorCount\",\"type\":\"uint256\"}],\"internalType\":\"struct FastFrontendFacet.Details\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitDetailsChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perPage\",\"type\":\"uint256\"}],\"name\":\"paginateDetailedMembers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isGovernor\",\"type\":\"bool\"}],\"internalType\":\"struct FastFrontendFacet.MemberDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The SPC contract is the central place for top-level governorship. It requires that a        first member address is passed at construction time.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"The SPC Smart Contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fast/FastFrontendFacet.sol\":\"FastFrontendFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/fast/FastFrontendFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFastAccess.sol';\\nimport './lib/LibFastToken.sol';\\n\\n\\n/** @title The SPC Smart Contract.\\n *  @dev The SPC contract is the central place for top-level governorship. It requires that a\\n *        first member address is passed at construction time.\\n */\\ncontract FastFrontendFacet is AFastFacet {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  // Events.\\n\\n  // This is an event that is fired whenever any of some of the FAST parameters\\n  // change, so that the frontend can react to it and refresh the general header\\n  // for that fast as well as the baseball cards in the FASTs list.\\n  event DetailsChanged(\\n    uint256 memberCount,\\n    uint256 governorCount,\\n    uint256 totalSupply,\\n    uint256 transferCredits,\\n    uint256 reserveBalance,\\n    uint256 ethBalance\\n  );\\n\\n  // Data structures.\\n\\n  struct Details {\\n    address addr;\\n    string name;\\n    string symbol;\\n    uint256 decimals;\\n    uint256 totalSupply;\\n    uint256 transferCredits;\\n    bool isSemiPublic;\\n    bool hasFixedSupply;\\n    uint256 reserveBalance;\\n    uint256 memberCount;\\n    uint256 governorCount;\\n  }\\n\\n  struct MemberDetails {\\n    address addr;\\n    uint256 balance;\\n    uint256 ethBalance;\\n    bool isGovernor;\\n  }\\n\\n  // Emitters.\\n\\n  function emitDetailsChanged()\\n      external diamondInternal {\\n    LibFastAccess.Data storage accessData = LibFastAccess.data();\\n    LibFastToken.Data storage tokenData = LibFastToken.data();\\n    emit DetailsChanged({\\n      memberCount: accessData.memberSet.values.length,\\n      governorCount: accessData.governorSet.values.length,\\n      totalSupply: tokenData.totalSupply,\\n      transferCredits: tokenData.transferCredits,\\n      reserveBalance: tokenData.balances[LibConstants.ZERO_ADDRESS],\\n      ethBalance: payable(address(this)).balance\\n    });\\n  }\\n\\n  // Public functions.\\n\\n  function details()\\n      public view returns(Details memory) {\\n    LibFast.Data storage topStorage = LibFast.data();\\n    LibFastAccess.Data storage accessStorage = LibFastAccess.data();\\n    LibFastToken.Data storage tokenStorage = LibFastToken.data();\\n    return Details({\\n      addr: address(this),\\n      name: tokenStorage.name,\\n      symbol: tokenStorage.symbol,\\n      decimals: tokenStorage.decimals,\\n      totalSupply: tokenStorage.totalSupply,\\n      transferCredits: tokenStorage.transferCredits,\\n      isSemiPublic: topStorage.isSemiPublic,\\n      hasFixedSupply: topStorage.hasFixedSupply,\\n      reserveBalance: tokenStorage.balances[LibConstants.ZERO_ADDRESS],\\n      memberCount: accessStorage.memberSet.values.length,\\n      governorCount: accessStorage.governorSet.values.length\\n    });\\n  }\\n\\n  function detailedMember(address member)\\n      public view returns(MemberDetails memory) {\\n    LibFastToken.Data storage tokenStorage = LibFastToken.data();\\n    LibFastAccess.Data storage accessStorage = LibFastAccess.data();\\n    return MemberDetails({\\n      addr: member,\\n      balance: tokenStorage.balances[member],\\n      ethBalance: member.balance,\\n      isGovernor: accessStorage.governorSet.contains(member)\\n    });\\n  }\\n\\n  function paginateDetailedMembers(uint256 index, uint256 perPage)\\n      external view returns(MemberDetails[] memory, uint256) {\\n    LibFastAccess.Data storage accessStorage = LibFastAccess.data();\\n    (address[] memory members, uint256 nextCursor) =\\n      LibPaginate.addresses(accessStorage.memberSet.values, index, perPage);\\n    MemberDetails[] memory values = new MemberDetails[](members.length);\\n    for (uint256 i = 0; i < members.length; ++i) {\\n      values[i] = detailedMember(members[i]);\\n    }\\n    return (values, nextCursor);\\n  }\\n}\\n\",\"keccak256\":\"0x9bc27617d7c845b32b184f65d2c38ba5a12955e6387152732de8834326a0da4c\",\"license\":\"MIT\"},\"contracts/fast/lib/AFastFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../../lib/LibConstants.sol';\\nimport '../../lib/LibHelpers.sol';\\nimport '../../lib/LibAddressSet.sol';\\nimport '../../interfaces/IHasMembers.sol';\\nimport '../../interfaces/IHasGovernors.sol';\\nimport '../../interfaces/IERC173.sol';\\nimport './IFast.sol';\\nimport '../lib/LibFast.sol';\\n\\n\\n/**\\n* @dev This contract is a group of modifiers that can be used by any facets to guard against\\n*       certain permissions.\\n*/\\nabstract contract AFastFacet {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Modifiers.\\n\\n  /// @dev Ensures that a method can only be called by another facet of the same diamond.\\n  modifier diamondInternal() {\\n    require(msg.sender == address(this), LibConstants.INTERNAL_METHOD);\\n    _;\\n  }\\n\\n  /// @dev Ensures that a method can only be called by the owner of this diamond.\\n  modifier diamondOwner() {\\n    require(msg.sender == IERC173(address(this)).owner(), LibConstants.REQUIRES_DIAMOND_OWNERSHIP);\\n    _;\\n  }\\n\\n  /// @dev Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier deployerContract() {\\n    require(msg.sender == LibConstants.DEPLOYER_CONTRACT, LibConstants.INTERNAL_METHOD);\\n    _;\\n  }\\n\\n  /** @dev Ensures that the given address is **not** a contract.\\n   *  @param candidate The address to check.\\n   */\\n  modifier nonContract(address candidate) {\\n    require(!LibHelpers.isContract(candidate), LibConstants.REQUIRES_NON_CONTRACT_ADDR);\\n    _;\\n  }\\n\\n  /** @dev Ensures that the given address is a member of the Exchange.\\n   *  @param candidate The address to check.\\n   */\\n  modifier exchangeMember(address candidate) {\\n    require(\\n      IHasMembers(LibFast.data().exchange).isMember(candidate),\\n      LibConstants.REQUIRES_EXCHANGE_MEMBERSHIP\\n    );\\n    _;\\n  }\\n\\n  /** @dev Ensures that the message sender is a member of the SPC.\\n   */\\n  modifier spcMembership() {\\n    require(\\n      IHasMembers(LibFast.data().spc).isMember(msg.sender),\\n      LibConstants.REQUIRES_SPC_MEMBERSHIP\\n    );\\n    _;\\n  }\\n\\n  /** @dev Ensures that the given address is a governor of the FAST.\\n   *  @param candidate The address to check.\\n   */\\n  modifier governance(address candidate) {\\n    require(\\n      IHasGovernors(address(this)).isGovernor(candidate),\\n      LibConstants.REQUIRES_FAST_GOVERNORSHIP\\n    );\\n    _;\\n  }\\n\\n  /** @dev Ensures that the given address is a member of the FAST.\\n   *  @param candidate The address to check.\\n   */\\n  modifier membership(address candidate) {\\n    require(\\n      IHasMembers(address(this)).isMember(candidate),\\n      LibConstants.REQUIRES_FAST_MEMBERSHIP\\n    );\\n    _;\\n  }\\n\\n  /** @dev Ensures that the given address is a member of the current FAST or the Zero Address.\\n   *  @param candidate The address to check.\\n   */\\n  modifier canHoldTokens(address candidate) {\\n    // Only perform checks if the address is non-zero.\\n    if (candidate != address(0)) {\\n    // FAST is semi-public - the only requirement to hold tokens is to be an exchange member.\\n      if (IFast(address(this)).isSemiPublic()) {\\n        require(\\n          IHasMembers(LibFast.data().exchange).isMember(candidate),\\n          LibConstants.REQUIRES_EXCHANGE_MEMBERSHIP\\n        );\\n      }\\n      // FAST is private, the requirement to hold tokens is to be a member of that FAST.\\n      else {\\n        require(\\n          IHasMembers(address(this)).isMember(candidate),\\n          LibConstants.REQUIRES_FAST_MEMBERSHIP\\n        );\\n      }\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x69d4577fc4c401d88e2113b747efec3fa70e571366aac7b2beb37fb79ca9c2ee\",\"license\":\"MIT\"},\"contracts/fast/lib/IFast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\ninterface IFast {\\n  function isSemiPublic() external view returns(bool);\\n  function hasFixedSupply() external view returns(bool);\\n}\\n\",\"keccak256\":\"0xea7b5645ce61b4f3c399bb1696603c57833e1f0b2fcce935f6420f55d602ba64\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\nlibrary LibFast {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Fast.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0x80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705;\\n\\n  // Data structures.\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    /// @dev The internal pointer to the SPC contract.\\n    address spc;\\n    /// @dev The internal pointer to the Exchange contract.\\n    address exchange;\\n    /// @dev We have to track whether the token facet provides continuous minting or fixed supply.\\n    bool hasFixedSupply;\\n    /// @dev Whether or not this FAST requires to be a member to hold tokens.\\n    bool isSemiPublic;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xc32df23d24f8ec8c918f1caeb8ca984bfe2ac1b7c370f24ad2a70a52e9d4e999\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\nlibrary LibFastAccess {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Fast.storage.Access'):\\n  bytes32 internal constant STORAGE_SLOT = 0x87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9a;\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    /// @dev We hold the list of the FAST governors in there.\\n    LibAddressSet.Data governorSet;\\n    // @dev The FAST members are held in there.\\n    LibAddressSet.Data memberSet;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x9744c77467b854899d5b5f9beaf4665f461adc8110432d174601a97f00e594ad\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastHistory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\nlibrary LibFastHistory {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Fast.storage.History'):\\n  bytes32 internal constant STORAGE_SLOT = 0x6bc8b61a9dd5fc049ea98027492a801d74e35fdf4d80d7fecd551a16e88fdbb4;\\n\\n  // Storage structures.\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    /// @dev All minting proofs are kept here.\\n    SupplyProof[] supplyProofs;\\n    /// @dev All transfer proofs are kept here.\\n    TransferProof[] transferProofs;\\n    /// @dev All transfers indices involving a given address are kept here.\\n    mapping(address => uint256[]) transferProofInvolvements;\\n  }\\n\\n  // Other structures.\\n\\n  /// @dev A minting operation could either be to mint or unmint tokens.\\n  enum SupplyOp { Mint, Burn }\\n\\n  /// @dev Minting operations are recorded for papertrail. This is the structure that keeps track of them.\\n  struct SupplyProof {\\n    SupplyOp op;\\n    uint256 amount;\\n    uint256 blockNumber;\\n    string ref;\\n  }\\n\\n  /// @dev Every transfer in is recorded. This is the structure that keeps track of them.\\n  struct TransferProof {\\n    address spender;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 blockNumber;\\n    string ref;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xd6af0fc0867dd0259fa6e0797f2b46cffac8a36f0380bf266e3ccf778aeb724c\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibFastToken {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Fast.storage.Token'):\\n  bytes32 internal constant STORAGE_SLOT = 0xb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261;\\n\\n  // Constants.\\n\\n  // ERC1404 Restriction codes.\\n  uint8 internal constant INSUFFICIENT_TRANSFER_CREDITS_CODE = 1;\\n  uint8 internal constant REQUIRES_FAST_MEMBERSHIP_CODE = 2;\\n  uint8 internal constant REQUIRES_EXCHANGE_MEMBERSHIP_CODE = 3;\\n  uint8 internal constant REQUIRES_DIFFERENT_SENDER_AND_RECIPIENT_CODE = 4;\\n\\n  string internal constant DEFAULT_TRANSFER_REFERENCE = 'Unspecified - via ERC20';\\n\\n  // Data structures.\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    // ERC20 related properties for this FAST Token.\\n    string name;\\n    string symbol;\\n    uint256 decimals;\\n    uint256 totalSupply;\\n    // Every time a transfer is executed, the credit decreases by the amount\\n    // of said transfer.\\n    // It becomes impossible to transact once it reaches zero, and must\\n    // be provisioned by an SPC governor.\\n    uint256 transferCredits;\\n    // Our members balances are held here.\\n    mapping(address => uint256) balances;\\n    // Allowances are stored here.\\n    mapping(address => mapping(address => uint256)) allowances;\\n    mapping(address => LibAddressSet.Data) allowancesByOwner;\\n    mapping(address => LibAddressSet.Data) allowancesBySpender;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x7255ca8c82f392258f4178b5c80b66c83796e9f25460f9ca690f5c5e250e03db\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x6ab22e74708905d9c31867461fffbd2e24bc6ad094aa1aab39211d99e296ab32\",\"license\":\"MIT\"},\"contracts/interfaces/IHasGovernors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\ninterface IHasGovernors {\\n  event GovernorAdded(address indexed governor);\\n  event GovernorRemoved(address indexed governor);\\n\\n  function isGovernor(address a) external view returns(bool);\\n  function governorCount() external view returns(uint256);\\n  function paginateGovernors(uint256 index, uint256 perPage) external view returns(address[] memory, uint256);\\n  function addGovernor(address payable a) external;\\n  function removeGovernor(address a) external;\\n}\\n\",\"keccak256\":\"0x35836b162c19951d87848f098fab3f42b79a0b9f593640e8ad8f2f2fa5b74d25\",\"license\":\"MIT\"},\"contracts/interfaces/IHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\ninterface IHasMembers {\\n  event MemberAdded(address indexed member);\\n  event MemberRemoved(address indexed member);\\n\\n  function isMember(address a) external view returns(bool);\\n  function memberCount() external view returns(uint256);\\n  function paginateMembers(uint256 index, uint256 perPage) external view returns(address[] memory, uint256);\\n  function addMember(address payable a) external;\\n  function removeMember(address a) external;\\n}\\n\",\"keccak256\":\"0xab0d7cfb46a5a70bd13783d959df2e8f593269472994ea828273fa563a4c0c39\",\"license\":\"MIT\"},\"contracts/lib/LibAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\nlibrary LibAddressSet {\\n  /// @dev Represents a list of addresses.\\n  struct Data {\\n    mapping(address => uint256) indices;\\n    address[] values;\\n  }\\n\\n  /**\\n   * @dev Adds an item into the storage set. If the address already exists in the\\n   *      set, the function reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be added.\\n   */\\n  function add(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && exists) { return; }\\n    require(!exists, 'Address already in set');\\n    d.indices[key] = d.values.length;\\n    d.values.push(key);\\n  }\\n\\n  /**\\n   * @dev Removes an item from the storage set. If the address does not exist in the\\n   *      set, the function reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be removed.\\n   */\\n  function remove(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && !exists) { return; }\\n    require(exists, 'Address does not exist in set');\\n    uint256 lastIndex = d.values.length - 1;\\n    address keyToMove = d.values[lastIndex];\\n    uint256 idxToReplace = d.indices[key];\\n    d.indices[keyToMove] = idxToReplace;\\n    d.values[idxToReplace] = keyToMove;\\n    delete d.indices[key];\\n    d.values.pop();\\n  }\\n\\n  /**\\n   * @dev Tests whether or not a given item already exists in the set.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to test.\\n   * @return a boolean.\\n   */\\n  function contains(Data storage d, address key)\\n      internal view returns(bool) {\\n    return d.values.length == 0\\n      ? false\\n      : d.values[d.indices[key]] == key;\\n  }\\n}\\n\",\"keccak256\":\"0x7daf050d0864e085c227521b1157b4ea652fe75ea7e10f685027b42d6e1caf87\",\"license\":\"MIT\"},\"contracts/lib/LibConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\nlibrary LibConstants {\\n  address internal constant ZERO_ADDRESS = address(0);\\n  address internal constant DEPLOYER_CONTRACT = 0x6DF2D25d8C6FD680730ee658b530A05a99BB769a;\\n\\n  string internal constant ALREADY_INITIALIZED = 'Already initialized';\\n  string internal constant INTERNAL_METHOD = 'Internal method';\\n  string internal constant REQUIRES_DIAMOND_OWNERSHIP = 'Requires diamond ownership';\\n  string internal constant REQUIRES_FAST_CONTRACT_CALLER = 'Caller must be a FAST contract';\\n\\n  string internal constant REQUIRES_SPC_MEMBERSHIP = 'Requires SPC membership';\\n  string internal constant REQUIRES_EXCHANGE_MEMBERSHIP = 'Requires Exchange membership';\\n\\n  string internal constant REQUIRES_FAST_GOVERNORSHIP = 'Requires FAST governorship';\\n  string internal constant REQUIRES_FAST_MEMBERSHIP = 'Requires FAST membership';\\n  string internal constant REQUIRES_NO_FAST_MEMBERSHIPS = 'Member still part of at least one FAST';\\n\\n  string internal constant DUPLICATE_ENTRY = 'Duplicate entry';\\n  string internal constant UNSUPPORTED_OPERATION = 'Unsupported operation';\\n  string internal constant REQUIRES_NON_ZERO_ADDRESS = 'Requires non-zero address';\\n  string internal constant REQUIRES_NON_CONTRACT_ADDR = 'Address cannot be a contract';\\n\\n  string internal constant MISSING_ATTACHED_ETH = 'Missing attached ETH';\\n\\n  string internal constant REQUIRES_CONTINUOUS_SUPPLY = 'Requires continuous supply';\\n  string internal constant INSUFFICIENT_FUNDS = 'Insufficient token balance';\\n  string internal constant INSUFFICIENT_ALLOWANCE = 'Insufficient allowance';\\n  string internal constant INSUFFICIENT_TRANSFER_CREDITS = 'Insufficient transfer credits';\\n  string internal constant REQUIRES_DIFFERENT_SENDER_AND_RECIPIENT = 'Requires different sender and recipient';\\n  string internal constant UNKNOWN_RESTRICTION_CODE = 'Unknown restriction code';\\n}\\n\",\"keccak256\":\"0x4ceefe5db0e5056edaf89b9aea9a130720ed116a5f66f543b6ecf57a0360397a\",\"license\":\"MIT\"},\"contracts/lib/LibHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary LibHelpers {\\n  function upTo(address payable to, uint256 amount)\\n      internal view returns(uint256) {\\n    // If the recipient has more than what is ought to be paid, return.\\n    uint256 toBalance = to.balance;\\n    if (toBalance >= amount) { return 0; }\\n    // If the recipient has some Eth we should only pay the top-up.\\n    amount = amount - toBalance;\\n    // If the available eth is less than what we should pay, just cap it.\\n    uint256 available = payable(address(this)).balance;\\n    if (available < amount) { amount = available; }\\n    // Provision the new fast with Eth.\\n    return amount;\\n  }\\n\\n  function isContract(address target)\\n      internal view returns (bool) {\\n    uint32 size;\\n    assembly { size := extcodesize(target) }\\n    return (size > 0);\\n  }\\n}\\n\",\"keccak256\":\"0xa3ac21d8e6e5f25d9125d2975e7157e5c660bd481fb102c39a64810955d6eaab\",\"license\":\"MIT\"},\"contracts/lib/LibPaginate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../fast/lib/LibFastHistory.sol';\\n\\n\\nlibrary LibPaginate {\\n  function addresses(address[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(address[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      address[] memory values = new address[](length);\\n      for (uint256 i = 0; i < length; i++) {\\n        values[i] = collection[cursor + i];\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function uint256s(uint256[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(uint256[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      uint256[] memory values = new uint256[](length);\\n      for (uint256 i = 0; i < length; i++) {\\n        values[i] = collection[cursor + i];\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function supplyProofs(LibFastHistory.SupplyProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.SupplyProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.SupplyProof[] memory values = new LibFastHistory.SupplyProof[](length);\\n      for (uint256 i = 0; i < length; i++) {\\n        values[i] = collection[cursor + i];\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function transferProofs(LibFastHistory.TransferProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.TransferProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.TransferProof[] memory values = new LibFastHistory.TransferProof[](length);\\n      for (uint256 i = 0; i < length; i++) {\\n        values[i] = collection[cursor + i];\\n      }\\n      return (values, cursor + length);\\n  }\\n}\",\"keccak256\":\"0xedbf24531aa1b21a17a7962b2053fe1bd81ddf9e8869f508f14f7fb9087631d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611199806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634f2274c014610051578063565974d31461005b57806388a91524146100795780639f4c440b146100a9575b600080fd5b6100596100da565b005b610063610252565b6040516100709190610e42565b60405180910390f35b610093600480360381019061008e9190610ac7565b610487565b6040516100a09190610e64565b60405180910390f35b6100c360048036038101906100be9190610af0565b610556565b6040516100d1929190610df0565b60405180910390f35b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600f81526020017f496e7465726e616c206d6574686f64000000000000000000000000000000000081525090610180576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101779190610e20565b60405180910390fd5b50600061018b6106b8565b905060006101976106e0565b90507f3f34e05a7df519b3b9e1ab85fab4e26555d5863f50b821555768b78d8600e4af82600301600101805490508360010160010180549050836004015484600501548560060160008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020543073ffffffffffffffffffffffffffffffffffffffff163160405161024696959493929190610e7f565b60405180910390a15050565b61025a6109e9565b6000610264610708565b905060006102706106b8565b9050600061027c6106e0565b90506040518061016001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020018260010180546102b59061104b565b80601f01602080910402602001604051908101604052809291908181526020018280546102e19061104b565b801561032e5780601f106103035761010080835404028352916020019161032e565b820191906000526020600020905b81548152906001019060200180831161031157829003601f168201915b505050505081526020018260020180546103479061104b565b80601f01602080910402602001604051908101604052809291908181526020018280546103739061104b565b80156103c05780601f10610395576101008083540402835291602001916103c0565b820191906000526020600020905b8154815290600101906020018083116103a357829003601f168201915b505050505081526020018260030154815260200182600401548152602001826005015481526020018460010160159054906101000a900460ff16151581526020018460010160149054906101000a900460ff16151581526020018260060160008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001836003016001018054905081526020018360010160010180549050815250935050505090565b61048f610a5d565b60006104996106e0565b905060006104a56106b8565b905060405180608001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018360060160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020018573ffffffffffffffffffffffffffffffffffffffff16318152602001610548868460010161073090919063ffffffff16565b151581525092505050919050565b60606000806105636106b8565b9050600080610579836003016001018888610826565b915091506000825167ffffffffffffffff8111156105c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156105f957816020015b6105e6610a5d565b8152602001906001900390816105de5790505b50905060005b83518110156106a657610651848281518110610644577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610487565b82828151811061068a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508061069f9061107d565b90506105ff565b50808295509550505050509250929050565b60007f87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9a905090565b60007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261905090565b60007f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705905090565b60008083600101805490501461081b578173ffffffffffffffffffffffffffffffffffffffff16836001018460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481106107d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461081e565b60005b905092915050565b606060008084868054905061083b9190610f9c565b84116108475783610858565b8486805490506108579190610f9c565b5b905060008167ffffffffffffffff81111561089c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156108ca5781602001602082028036833780820191505090505b50905060005b828110156109cd578781886108e59190610f46565b8154811061091c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110610980577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806109c59061107d565b9150506108d0565b508082876109db9190610f46565b935093505050935093915050565b604051806101600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016000815260200160008152602001600081526020016000151581526020016000151581526020016000815260200160008152602001600081525090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000151581525090565b600081359050610aac81611135565b92915050565b600081359050610ac18161114c565b92915050565b600060208284031215610ad957600080fd5b6000610ae784828501610a9d565b91505092915050565b60008060408385031215610b0357600080fd5b6000610b1185828601610ab2565b9250506020610b2285828601610ab2565b9150509250929050565b6000610b388383610d28565b60808301905092915050565b610b4d81610fd0565b82525050565b6000610b5e82610ef0565b610b688185610f13565b9350610b7383610ee0565b8060005b83811015610ba4578151610b8b8882610b2c565b9750610b9683610f06565b925050600181019050610b77565b5085935050505092915050565b610bba81610fe2565b82525050565b6000610bcb82610efb565b610bd58185610f24565b9350610be5818560208601611018565b610bee81611124565b840191505092915050565b6000610c0482610efb565b610c0e8185610f35565b9350610c1e818560208601611018565b610c2781611124565b840191505092915050565b600061016083016000830151610c4b6000860182610b44565b5060208301518482036020860152610c638282610bc0565b91505060408301518482036040860152610c7d8282610bc0565b9150506060830151610c926060860182610dd2565b506080830151610ca56080860182610dd2565b5060a0830151610cb860a0860182610dd2565b5060c0830151610ccb60c0860182610bb1565b5060e0830151610cde60e0860182610bb1565b50610100830151610cf3610100860182610dd2565b50610120830151610d08610120860182610dd2565b50610140830151610d1d610140860182610dd2565b508091505092915050565b608082016000820151610d3e6000850182610b44565b506020820151610d516020850182610dd2565b506040820151610d646040850182610dd2565b506060820151610d776060850182610bb1565b50505050565b608082016000820151610d936000850182610b44565b506020820151610da66020850182610dd2565b506040820151610db96040850182610dd2565b506060820151610dcc6060850182610bb1565b50505050565b610ddb8161100e565b82525050565b610dea8161100e565b82525050565b60006040820190508181036000830152610e0a8185610b53565b9050610e196020830184610de1565b9392505050565b60006020820190508181036000830152610e3a8184610bf9565b905092915050565b60006020820190508181036000830152610e5c8184610c32565b905092915050565b6000608082019050610e796000830184610d7d565b92915050565b600060c082019050610e946000830189610de1565b610ea16020830188610de1565b610eae6040830187610de1565b610ebb6060830186610de1565b610ec86080830185610de1565b610ed560a0830184610de1565b979650505050505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610f518261100e565b9150610f5c8361100e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f9157610f906110c6565b5b828201905092915050565b6000610fa78261100e565b9150610fb28361100e565b925082821015610fc557610fc46110c6565b5b828203905092915050565b6000610fdb82610fee565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561103657808201518184015260208101905061101b565b83811115611045576000848401525b50505050565b6000600282049050600182168061106357607f821691505b60208210811415611077576110766110f5565b5b50919050565b60006110888261100e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110bb576110ba6110c6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b61113e81610fd0565b811461114957600080fd5b50565b6111558161100e565b811461116057600080fd5b5056fea2646970667358221220ab012ae15e6aa10241671fea226584cfbde93fea7f80ad9da53a2f0c9f440ab664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80634f2274c014610051578063565974d31461005b57806388a91524146100795780639f4c440b146100a9575b600080fd5b6100596100da565b005b610063610252565b6040516100709190610e42565b60405180910390f35b610093600480360381019061008e9190610ac7565b610487565b6040516100a09190610e64565b60405180910390f35b6100c360048036038101906100be9190610af0565b610556565b6040516100d1929190610df0565b60405180910390f35b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600f81526020017f496e7465726e616c206d6574686f64000000000000000000000000000000000081525090610180576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101779190610e20565b60405180910390fd5b50600061018b6106b8565b905060006101976106e0565b90507f3f34e05a7df519b3b9e1ab85fab4e26555d5863f50b821555768b78d8600e4af82600301600101805490508360010160010180549050836004015484600501548560060160008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020543073ffffffffffffffffffffffffffffffffffffffff163160405161024696959493929190610e7f565b60405180910390a15050565b61025a6109e9565b6000610264610708565b905060006102706106b8565b9050600061027c6106e0565b90506040518061016001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020018260010180546102b59061104b565b80601f01602080910402602001604051908101604052809291908181526020018280546102e19061104b565b801561032e5780601f106103035761010080835404028352916020019161032e565b820191906000526020600020905b81548152906001019060200180831161031157829003601f168201915b505050505081526020018260020180546103479061104b565b80601f01602080910402602001604051908101604052809291908181526020018280546103739061104b565b80156103c05780601f10610395576101008083540402835291602001916103c0565b820191906000526020600020905b8154815290600101906020018083116103a357829003601f168201915b505050505081526020018260030154815260200182600401548152602001826005015481526020018460010160159054906101000a900460ff16151581526020018460010160149054906101000a900460ff16151581526020018260060160008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001836003016001018054905081526020018360010160010180549050815250935050505090565b61048f610a5d565b60006104996106e0565b905060006104a56106b8565b905060405180608001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018360060160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020018573ffffffffffffffffffffffffffffffffffffffff16318152602001610548868460010161073090919063ffffffff16565b151581525092505050919050565b60606000806105636106b8565b9050600080610579836003016001018888610826565b915091506000825167ffffffffffffffff8111156105c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156105f957816020015b6105e6610a5d565b8152602001906001900390816105de5790505b50905060005b83518110156106a657610651848281518110610644577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610487565b82828151811061068a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508061069f9061107d565b90506105ff565b50808295509550505050509250929050565b60007f87ed8063ac9ead3b2eb7551ed3d89b29fcbf44d6733084b5c82e95d5120ece9a905090565b60007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261905090565b60007f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705905090565b60008083600101805490501461081b578173ffffffffffffffffffffffffffffffffffffffff16836001018460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481106107d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461081e565b60005b905092915050565b606060008084868054905061083b9190610f9c565b84116108475783610858565b8486805490506108579190610f9c565b5b905060008167ffffffffffffffff81111561089c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156108ca5781602001602082028036833780820191505090505b50905060005b828110156109cd578781886108e59190610f46565b8154811061091c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110610980577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806109c59061107d565b9150506108d0565b508082876109db9190610f46565b935093505050935093915050565b604051806101600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016000815260200160008152602001600081526020016000151581526020016000151581526020016000815260200160008152602001600081525090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000151581525090565b600081359050610aac81611135565b92915050565b600081359050610ac18161114c565b92915050565b600060208284031215610ad957600080fd5b6000610ae784828501610a9d565b91505092915050565b60008060408385031215610b0357600080fd5b6000610b1185828601610ab2565b9250506020610b2285828601610ab2565b9150509250929050565b6000610b388383610d28565b60808301905092915050565b610b4d81610fd0565b82525050565b6000610b5e82610ef0565b610b688185610f13565b9350610b7383610ee0565b8060005b83811015610ba4578151610b8b8882610b2c565b9750610b9683610f06565b925050600181019050610b77565b5085935050505092915050565b610bba81610fe2565b82525050565b6000610bcb82610efb565b610bd58185610f24565b9350610be5818560208601611018565b610bee81611124565b840191505092915050565b6000610c0482610efb565b610c0e8185610f35565b9350610c1e818560208601611018565b610c2781611124565b840191505092915050565b600061016083016000830151610c4b6000860182610b44565b5060208301518482036020860152610c638282610bc0565b91505060408301518482036040860152610c7d8282610bc0565b9150506060830151610c926060860182610dd2565b506080830151610ca56080860182610dd2565b5060a0830151610cb860a0860182610dd2565b5060c0830151610ccb60c0860182610bb1565b5060e0830151610cde60e0860182610bb1565b50610100830151610cf3610100860182610dd2565b50610120830151610d08610120860182610dd2565b50610140830151610d1d610140860182610dd2565b508091505092915050565b608082016000820151610d3e6000850182610b44565b506020820151610d516020850182610dd2565b506040820151610d646040850182610dd2565b506060820151610d776060850182610bb1565b50505050565b608082016000820151610d936000850182610b44565b506020820151610da66020850182610dd2565b506040820151610db96040850182610dd2565b506060820151610dcc6060850182610bb1565b50505050565b610ddb8161100e565b82525050565b610dea8161100e565b82525050565b60006040820190508181036000830152610e0a8185610b53565b9050610e196020830184610de1565b9392505050565b60006020820190508181036000830152610e3a8184610bf9565b905092915050565b60006020820190508181036000830152610e5c8184610c32565b905092915050565b6000608082019050610e796000830184610d7d565b92915050565b600060c082019050610e946000830189610de1565b610ea16020830188610de1565b610eae6040830187610de1565b610ebb6060830186610de1565b610ec86080830185610de1565b610ed560a0830184610de1565b979650505050505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610f518261100e565b9150610f5c8361100e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f9157610f906110c6565b5b828201905092915050565b6000610fa78261100e565b9150610fb28361100e565b925082821015610fc557610fc46110c6565b5b828203905092915050565b6000610fdb82610fee565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561103657808201518184015260208101905061101b565b83811115611045576000848401525b50505050565b6000600282049050600182168061106357607f821691505b60208210811415611077576110766110f5565b5b50919050565b60006110888261100e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110bb576110ba6110c6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b61113e81610fd0565b811461114957600080fd5b50565b6111558161100e565b811461116057600080fd5b5056fea2646970667358221220ab012ae15e6aa10241671fea226584cfbde93fea7f80ad9da53a2f0c9f440ab664736f6c63430008040033",
  "devdoc": {
    "details": "The SPC contract is the central place for top-level governorship. It requires that a        first member address is passed at construction time.",
    "kind": "dev",
    "methods": {},
    "title": "The SPC Smart Contract.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}