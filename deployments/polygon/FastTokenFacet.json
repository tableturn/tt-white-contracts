{
  "address": "0x10c34De390c56A5F332da4030b2194f00Ac6099B",
  "abi": [
    {
      "inputs": [],
      "name": "InternalMethod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequiresContinuousSupply",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "RequiresDifferentSenderAndRecipient",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresFastMembership",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresIssuerMembership",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresMarketplaceActiveMembership",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "RequiresPositiveBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequiresTransfersEnabled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresValidTokenHolder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsupportedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "ref",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "Burnt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Crowdfund",
          "name": "crowdfund",
          "type": "address"
        }
      ],
      "name": "CrowdfundDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "transfersDisabled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "memberCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "governorCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveBalance",
          "type": "uint256"
        }
      ],
      "name": "DetailsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Disapproval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Distribution",
          "name": "distribution",
          "type": "address"
        }
      ],
      "name": "DistributionDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "FastTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "ref",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "beforeRemovingMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "disapprove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "givenAllowanceCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "holders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perPage",
          "type": "uint256"
        }
      ],
      "name": "paginateAllowancesByOwner",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perPage",
          "type": "uint256"
        }
      ],
      "name": "paginateAllowancesBySpender",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "performApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "performDisapproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ref",
              "type": "string"
            }
          ],
          "internalType": "struct FastTokenFacet.TransferArgs",
          "name": "p",
          "type": "tuple"
        }
      ],
      "name": "performTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "receivedAllowanceCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "retrieveDeadTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "transferFromWithRef",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ref",
          "type": "string"
        }
      ],
      "name": "transferWithRef",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf4c34c6fc6a87b18a50d6c16cff2be742bc3455892f41fe89ce9ce14dcf2967b",
  "receipt": {
    "to": "0x6DF2D25d8C6FD680730ee658b530A05a99BB769a",
    "from": "0x717634cfe06FFAB2CEAA7fcf1b9019813f4B25FE",
    "contractAddress": null,
    "transactionIndex": 32,
    "gasUsed": "3166924",
    "logsBloom": "0x
    "blockHash": "0x0ffa0fe17215fdaddc8248fb1aee71db311b9f2270444d88a2800b4880fac4ef",
    "transactionHash": "0xf4c34c6fc6a87b18a50d6c16cff2be742bc3455892f41fe89ce9ce14dcf2967b",
    "logs": [
      {
        "transactionIndex": 32,
        "blockNumber": 41678013,
        "transactionHash": "0xf4c34c6fc6a87b18a50d6c16cff2be742bc3455892f41fe89ce9ce14dcf2967b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000717634cfe06ffab2ceaa7fcf1b9019813f4b25fe",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000259c41ce6ce65cc000000000000000000000000000000000000000000000000740b149afa47322e00000000000000000000000000000000000000000000029d1171177ba4b167e100000000000000000000000000000000000000000000000071b1507e1378cc6200000000000000000000000000000000000000000000029d13cadb988b7fcdad",
        "logIndex": 101,
        "blockHash": "0x0ffa0fe17215fdaddc8248fb1aee71db311b9f2270444d88a2800b4880fac4ef"
      }
    ],
    "blockNumber": 41678013,
    "cumulativeGasUsed": "6475399",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "906d0b448da35e1afe404590c784f290",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InternalMethod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequiresContinuousSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"RequiresDifferentSenderAndRecipient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresFastMembership\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresIssuerMembership\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresMarketplaceActiveMembership\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"RequiresPositiveBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequiresTransfersEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresValidTokenHolder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Crowdfund\",\"name\":\"crowdfund\",\"type\":\"address\"}],\"name\":\"CrowdfundDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"transfersDisabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"memberCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"governorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveBalance\",\"type\":\"uint256\"}],\"name\":\"DetailsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Disapproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Distribution\",\"name\":\"distribution\",\"type\":\"address\"}],\"name\":\"DistributionDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"FastTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"beforeRemovingMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"disapprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"givenAllowanceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perPage\",\"type\":\"uint256\"}],\"name\":\"paginateAllowancesByOwner\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perPage\",\"type\":\"uint256\"}],\"name\":\"paginateAllowancesBySpender\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"performApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"performDisapproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"internalType\":\"struct FastTokenFacet.TransferArgs\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"performTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"receivedAllowanceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"retrieveDeadTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"transferFromWithRef\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"transferWithRef\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"This value changes when `approve`, `disapprove` and `transferFrom` / `transferFromWithRef` are called.\",\"params\":{\"owner\":\"is the owner of the funds.\",\"spender\":\"is the address for which the allowance should be queried.\"},\"returns\":{\"_0\":\"A `uint256` representing the remaining allowance of `spender` over `owner`'s funds.\"}},\"approve(address,uint256)\":{\"params\":{\"amount\":\"is how much to **increase** the allowance.\",\"spender\":\"is the address to allow spending from the caller's wallet.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The owners address to get the balance of.\"},\"returns\":{\"_0\":\"uint256 The current balance of this owner's account.\"}},\"burn(uint256,string)\":{\"params\":{\"amount\":\"The number of FAST tokens to mint.\",\"ref\":\"A reference for this minting operation.\"}},\"decimals()\":{\"returns\":{\"_0\":\"uint256 Number of decimals the FAST has.\"}},\"disapprove(address,uint256)\":{\"params\":{\"amount\":\"is how much to **decrease** the allowance.\",\"spender\":\"is the address to disallow spending from the caller's wallet.\"}},\"mint(uint256,string)\":{\"params\":{\"amount\":\"The number of FAST tokens to mint.\",\"ref\":\"A reference for this minting operation.\"}},\"name()\":{\"returns\":{\"_0\":\"string Name of the FAST.\"}},\"performApproval(address,address,uint256)\":{\"params\":{\"amount\":\"is how much to **increase** the current allowance by.  Note: This function runs when amount is zero, and will emit.\",\"from\":\"is the wallet from which to give the allowance.\",\"spender\":\"is the receiver of the allowance.\"}},\"retrieveDeadTokens(address)\":{\"params\":{\"holder\":\"is the address for which to move the tokens from.\"}},\"symbol()\":{\"returns\":{\"_0\":\"string Symbol of the FAST.\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"uint256 Total supply of the FAST.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"See `ERC20.Approval`.\"},\"Burnt(uint256,string,address)\":{\"notice\":\"Emited whenever an burning happens in a FAST.\"},\"CrowdfundDeployed(address)\":{\"notice\":\"Crowdfund related events.\"},\"DetailsChanged(bool,uint256,uint256,uint256,uint256)\":{\"notice\":\"This is an event that is fired whenever any of some of the FAST parameters change, so that the frontend can react to it and refresh the general header for that fast as well as the baseball cards in the FASTs list.\"},\"Disapproval(address,address,uint256)\":{\"notice\":\"See `ERC20.Disapproval`.\"},\"DistributionDeployed(address)\":{\"notice\":\"Distribution related events.\"},\"FastTransfer(address,address,address,uint256,string)\":{\"notice\":\"As we augmented the ERC20 standard with a few concepts, we emit our custom events in addition to the ERC20 ones.\"},\"Minted(uint256,string,address)\":{\"notice\":\"Emited whenever an issuance happens in a FAST.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"See `ERC20.Transfer`.\"}},\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through `transferFrom`. This is zero by default.\"},\"approve(address,uint256)\":{\"notice\":\"This method directly calls `performApproval`, setting its `from` paramter to the sender of the transaction.\"},\"balanceOf(address)\":{\"notice\":\"The balance of the passed owner (ERC20 standard).\"},\"burn(uint256,string)\":{\"notice\":\"Burns an amount of FAST tokens.  A reference can be passed to identify why this happened for example. Business logic. - Modifiers:   - Requires the caller to be a member of the Issuer contract. - Requires that the token has continuous supply. - Requires that there are enough funds in the reserve to cover for `amount` being burnt. - Decreases the reserve balance by `amount`. - Calls `FastHistoryFacet.burnt(amount, ref)`. - Calls `FastFrontendFacet.emitDetailsChanged`. - Emits a `Burnt(amount, ref)`.\"},\"decimals()\":{\"notice\":\"The `decimals` of this FAST (ERC20 standard).\"},\"disapprove(address,uint256)\":{\"notice\":\"This method directly calls `performDisapproval`, setting its `from` parameter to the sender of the transaction.\"},\"mint(uint256,string)\":{\"notice\":\"Mints an amount of FAST tokens.  A reference can be passed to identify why this happened for example. Business logic: - Modifiers:   - Requires the caller to be a member of the Issuer contract. - Requires that either the token has continuous supply, or that no tokens have been minted yet. - Increases the reserve balance by `amount`. - Calls `FastHistoryFacet.minted`. - Calls `FastFrontendFacet.emitDetailsChanged`. - Emits a `Minted(amount, ref)` event.\"},\"name()\":{\"notice\":\"The name of this FAST (ERC20 standard).\"},\"performApproval(address,address,uint256)\":{\"notice\":\"Increases the allowance given by `from` to `spender` by `amount`. Note that this function should run and emit even if the amount passed is zero. Business logic: - Modifiers:   - Only facets of the current diamond should be able to call this.   - Requires that `onlyTokenHolder` passes for the `from` address. - Requires that the `amount` is positive number. - Increases the allowance given by `from` to `spender` by `amount`. - Update the allowance lookup tables in both directions. - Emits an `Approval(from, spender, amount)`.\"},\"performDisapproval(address,address,uint256)\":{\"notice\":\"Decreases allowance given by `from` to `spender` by `amount`. Business logic: - Modifiers:   - Only facets of the current diamond should be able to call this. - The allowance given by `from` to `spender` is decreased by `amount`. - Whether the allowance reached zero, stop tracking it by owner and by spender. - Emit a `Disapproval(from, spender, amount)` event.  Note: This function runs when amount is zero, and will emit.\"},\"performTransfer((address,address,address,uint256,string))\":{\"notice\":\"This is the internal method that gets called whenever a transfer is initiated. Both `transfer`, `transferWithRef`, and their variants internally call this function. Business logic: - Modifiers:   - Only facets of the current diamond should be able to call this. - Requires that transfers are enabled for this FAST. - Requires that `from` and `to` are different addresses. - Requires that `from` membership is active in the marketplace. - If `from` is not the reserve, requires that `from` is a valid token holder. - If `from` is the reserve, requires that the message sender is an issuer member. - Requires that `to` is a valid token holder. - Requires that the amount is a positive value. - If the transfer is an allowance - e.g. the `spender` is not the same as the `from` address,   - The allowance given by the `from` address to the `spender` covers for the `amount`.     - If we are **not** transfering **from** the reserve,       - Decreases the allowance given by `from` to `spender`.         - If the new allowance reaches zero,           - Stop tracking the allowance in the allowance lookup tables for both spending and receiving directions. - Decreases the balance of the `owner` address. - Increases the balance of the `to` address by `amount`. - If we are **not** transfering **from** the reserve,   - Requires that there are enough transfer credits to cover for `amount`.   - Decreases the transfer credits by `amount`. - If the `to` address is the reserve,   - Decreases the total supply by `amount`.   - Calls `FastFrontendFacet.emitDetailsChanged`. - Else, if the `from` address is the reserve,   - Increases the total supply by `amount`.   - Calls `FastFrontendFacet.emitDetailsChanged`. - Calls `FastHistoryFacet.transfered`. - Emits a `Transfer(from, to, amount)` event.\"},\"retrieveDeadTokens(address)\":{\"notice\":\"Allows an Issuer member to move an arbitrary account's holdings back to the reserve, as per regulatory requirements. Business logic: - Modifiers:   - Requires that the caller is a member of the Issuer contract. - If the amount held by `holder` is not zero   - The balance of `holder` should be set to zero.   - The reserve's balance should be increased by how much was on the holder's account.   - Total supply should be decreased by that amount too. - The `holder`'s address should not be tracked as a token holder in this FAST anymore. - The `holder`'s address should not be tracked as a token holder in the Marketplace anymore. - A `Transfer(holder, reserve, amount)` event should be emited. - If the amount previously held by `holder` was not zero,   - Since the reserve balance and total supply have changed, the `FastFrontendFacet.emitDetailsChanged()` function should be called.\"},\"symbol()\":{\"notice\":\"The symbol of this FAST (ERC20 standard).\"},\"totalSupply()\":{\"notice\":\"The total supply of the FAST (ERC20 standard).\"},\"transfer(address,uint256)\":{\"notice\":\"See `performTransfer`, the spender will be equal to the `owner`, and the `ref` will be defauted. \"},\"transferFrom(address,address,uint256)\":{\"notice\":\"See `performTransfer`, the `ref` will be defaulted.\"},\"transferFromWithRef(address,address,uint256,string)\":{\"notice\":\"See `performTransfer`.\"},\"transferWithRef(address,uint256,string)\":{\"notice\":\"See `performTransfer`, the spender will be equal to the `owner`. \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fast/FastTokenFacet.sol\":\"FastTokenFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/common/AHasAutomatons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../common/lib/LibHasAutomatons.sol';\\n\\n\\n/**\\n * @title The Fast Smart Contract.\\n * @notice The Fast Automatons abstract contract is in charge of keeping track of automaton accounts.\\n */\\nabstract contract AHasAutomatons {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Errors.\\n\\n  error RequiresAutomatonsManager(address who);\\n\\n  /// Events.\\n\\n  /**\\n   * @notice Emited when an automaton is added or changed.\\n   * @param automaton is the address of the automaton.\\n   * @param privileges is the new bitfield assigned to this automaton.\\n   */\\n  event AutomatonPrivilegesSet(address indexed automaton, uint32 indexed privileges);\\n\\n  /**\\n   * @notice Emited when an automaton is removed.\\n   * @param automaton is the address of the removed automaton.\\n   */\\n  event AutomatonRemoved(address indexed automaton);\\n\\n  // Must be overriden.\\n  function isAutomatonsManager(address who)\\n      virtual internal view\\n      returns(bool);\\n\\n  // May be overriden.\\n  function onAutomatonAdded(address member)\\n      virtual internal {}\\n  \\n  // May be overriden.\\n  function onAutomatonRemoved(address member)\\n      virtual internal {}\\n\\n  /// Automatons management.\\n\\n  /**\\n   * @notice Queries whether a given address is an automaton for this Fast or not.\\n   * @param candidate is the address to test.\\n   * @return A `boolean` flag.\\n   */\\n  function isAutomaton(address candidate)\\n      external view returns(bool) {\\n    return LibHasAutomatons.data().automatonSet.contains(candidate);\\n  }\\n\\n  /**\\n   * @notice Returns the privileges for a given automaton address, or zero if no privileges exist.\\n   * @param automaton is the address to test.\\n   * @return An `uint256` bitfield.\\n   */\\n  function automatonPrivileges(address automaton)\\n      external view returns(uint32) {\\n    return LibHasAutomatons.data().automatonPrivileges[automaton];\\n  }\\n\\n  function automatonCan(address automaton, uint32 privilege)\\n    external view returns(bool) {\\n      return (LibHasAutomatons.data().automatonPrivileges[automaton] & privilege) != 0;\\n    }\\n\\n  /**\\n   * @notice Counts the numbers of automatons present in this Fast.\\n   * @return The number of automatons in this marketplace.\\n   */\\n  function automatonCount()\\n      external view returns(uint256) {\\n    return LibHasAutomatons.data().automatonSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Paginates the automatons of this Fast based on a starting cursor and a number of records per page.\\n   * @param cursor is the index at which to start.\\n   * @param perPage is how many records should be returned at most.\\n   * @return A `address[]` list of values at most `perPage` big.\\n   * @return A `uint256` index to the next page.\\n   */\\n  function paginateAutomatons(uint256 cursor, uint256 perPage)\\n    external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(\\n      LibHasAutomatons.data().automatonSet.values,\\n      cursor,\\n      perPage\\n    );\\n  }\\n\\n  /**\\n   * @notice Sets privileges for a given automaton address.\\n   * @param candidate is the automaton address to which the privileges should be assigned.\\n   * @param privileges is a bitfield of privileges to apply.\\n   */\\n  function setAutomatonPrivileges(address candidate, uint32 privileges)\\n      external onlyAutomatonManager(msg.sender) {\\n    LibHasAutomatons.Data storage ds = LibHasAutomatons.data();\\n    ds.automatonSet.add(candidate, true);\\n    ds.automatonPrivileges[candidate] = privileges;\\n    emit AutomatonPrivilegesSet(candidate, privileges);\\n  }\\n\\n  /**\\n   * @notice Removes an automaton completely.\\n   * @param candidate is the automaton to remove.\\n   */\\n  function removeAutomaton(address candidate)\\n      external onlyAutomatonManager(msg.sender) {\\n    LibHasAutomatons.Data storage ds = LibHasAutomatons.data();\\n    ds.automatonSet.remove(candidate, false);\\n    delete ds.automatonPrivileges[candidate];\\n    emit AutomatonRemoved(candidate);\\n  }\\n\\n  /// Modifiers.\\n\\n  modifier onlyAutomatonManager(address who) {\\n    if (!isAutomatonsManager(who))\\n      revert RequiresAutomatonsManager(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xd163d134b9021fe9f7f56c3c740893e7cae2b2de575fb6e65823f7c7f18f9581\",\"license\":\"MIT\"},\"contracts/common/AHasGovernors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../common/lib/LibHasGovernors.sol';\\nimport '../interfaces/ICustomErrors.sol';\\n\\n\\n/**\\n * @title The Fast Smart Contract.\\n * @notice The Fast Governors abstract contract is in charge of keeping track of automaton accounts.\\n */\\nabstract contract AHasGovernors {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Errors.\\n\\n  /// @notice Happens when a function is called by an address that is not a governors manager.\\n  error RequiresGovernorsManager(address who);\\n  /// @notice Happens when an address is used as a governor but is not valid.\\n  error RequiresValidGovernor(address who);\\n\\n  /// Events.\\n\\n  /**\\n   * @notice Emited when a governor is added to the implementing contract.\\n   * @param governor is the address of the added governor.\\n   */\\n  event GovernorAdded(address indexed governor);\\n  /**\\n   * @notice Emited when a governor is removed to the implementing contract.\\n   * @param governor is the address of the removed member.\\n   */\\n  event GovernorRemoved(address indexed governor);\\n\\n  /**\\n   * @notice Checks whether the caller is a governor manager or not.\\n   * @dev Must be implemented by the inheriting contract.\\n   * @param who is the address to test.\\n   */\\n  function isGovernorsManager(address who)\\n      virtual internal view\\n      returns(bool);\\n\\n  /**\\n   * @notice Checks whether the given address can be added as a governor or not.\\n   * @dev Must be implemented by the inheriting contract.\\n   * @param who is the address to test.\\n   */\\n  function isValidGovernor(address who)\\n      virtual internal view\\n      returns(bool);\\n\\n  /**\\n   * @notice This callback is called when a governor is added to the contract.\\n   * @dev May be overriden by the inheriting contract.\\n   * @param governor is the address which was added.\\n   */\\n  function onGovernorAdded(address governor)\\n      virtual internal {}\\n  \\n  /**\\n   * @notice This callback is called when a governor is removed to the contract.\\n   * @dev May be overriden by the inheriting contract.\\n   * @param governor is the address which was removed.\\n   */\\n  function onGovernorRemoved(address governor)\\n      virtual internal {}\\n  \\n  // Governors management.\\n\\n  /**\\n   * @notice Queries whether a given address is a governor or not.\\n   * @param who is the address to test.\\n   * @return A `bool` equal to `true` when `candidate` is a governor.\\n   */\\n  function isGovernor(address who)\\n      external view returns(bool) {\\n    return LibHasGovernors.data().governorSet.contains(who);\\n  }\\n\\n  /**\\n   * @notice Queries the number of governors.\\n   * @return An `uint256`.\\n   */\\n  function governorCount()\\n      external view returns(uint256) {\\n    return LibHasGovernors.data().governorSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Queries pages of governors based on a start index and a page size.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginateGovernors(uint256 index, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibHasGovernors.data().governorSet.values, index, perPage);\\n  }\\n\\n  /**\\n   * @notice Adds a governor to the list of known governors.\\n   * @param who is the address to be added.\\n   */\\n  function addGovernor(address payable who)\\n      external \\n      onlyGovernorManager(msg.sender) onlyValidGovernor(who) {\\n    // Add the governor.\\n    LibHasGovernors.data().governorSet.add(who, false);\\n    // Notify via callback.\\n    onGovernorAdded(who);\\n    // Emit!\\n    emit GovernorAdded(who);\\n  }\\n\\n  /**\\n   * @notice Removes a governor from this contract.\\n   * @param governor The address of the governor to be removed.\\n   * @notice Requires that the caller is a governor of this Issuer.\\n   * @notice Emits a `AHasGovernors.GovernorRemoved` event.\\n   */\\n  function removeGovernor(address governor)\\n      external \\n      onlyGovernorManager(msg.sender) {\\n    // Notify via callback.\\n    onGovernorRemoved(governor);\\n    // Remove governor.\\n    LibHasGovernors.data().governorSet.remove(governor, false);\\n    // Emit!\\n    emit GovernorRemoved(governor);\\n  }\\n\\n  /// Modifiers.\\n\\n  modifier onlyGovernorManager(address who) {\\n    if (!isGovernorsManager(who))\\n      revert RequiresGovernorsManager(who);\\n    _;\\n  }\\n\\n  modifier onlyValidGovernor(address who) {\\n    if (!isValidGovernor(who))\\n      revert RequiresValidGovernor(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x95841d60021345ba3591beba82b0ec0291504bf4525fdb247906841e20839ebf\",\"license\":\"MIT\"},\"contracts/common/AHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../common/lib/LibHasMembers.sol';\\nimport '../interfaces/ICustomErrors.sol';\\n\\n\\n/**\\n * @title The Fast Smart Contract.\\n * @notice The Fast Members abstract contract is in charge of keeping track of automaton accounts.\\n */\\nabstract contract AHasMembers {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Errors.\\n\\n  /// @notice Happens when a function is called by an address that is not a members manager.\\n  error RequiresMembersManager(address who);\\n  /// @notice Happens when an address is used as a member but is not valid.\\n  error RequiresValidMember(address who);\\n\\n  /// Events.\\n\\n  /**\\n   * @notice Emited when a member is added to the implementing contract.\\n   * @param member is the address of the added member.\\n   */\\n  event MemberAdded(address indexed member);\\n  /**\\n   * @notice Emited when a member is removed to the implementing contract.\\n   * @param member is the address of the removed member.\\n   */\\n  event MemberRemoved(address indexed member);\\n\\n  /**\\n   * @notice Checks whether the given address is a members manager or not.\\n   * @dev Must be implemented by the inheriting contract.\\n   * @param who is the address to test.\\n   */\\n  function isMembersManager(address who)\\n      virtual internal view\\n      returns(bool);\\n\\n  /**\\n   * @notice Checks whether the given address can be added as a member or not.\\n   * @dev Must be implemented by the inheriting contract.\\n   * @param who is the address to test.\\n   */\\n  function isValidMember(address who)\\n      virtual internal view\\n      returns(bool);\\n\\n  /**\\n   * @notice This callback is called when a member is added to the contract.\\n   * @dev May be overriden by the inheriting contract.\\n   * @param member is the address which was added.\\n   */\\n  function onMemberAdded(address member)\\n      virtual internal {}\\n  \\n  /**\\n   * @notice This callback is called when a member is removed to the contract.\\n   * @dev May be overriden by the inheriting contract.\\n   * @param member is the address which was removed.\\n   */\\n  function onMemberRemoved(address member)\\n      virtual internal {}\\n  \\n  // Members management.\\n\\n  /**\\n   * @notice Queries whether a given address is a member or not.\\n   * @param who is the address to test.\\n   * @return A `bool` equal to `true` when `candidate` is a member.\\n   */\\n  function isMember(address who)\\n      external view returns(bool) {\\n    return LibHasMembers.data().memberSet.contains(who);\\n  }\\n\\n  /**\\n   * @notice Queries the number of members.\\n   * @return An `uint256`.\\n   */\\n  function memberCount()\\n      external view returns(uint256) {\\n    return LibHasMembers.data().memberSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Queries pages of members based on a start index and a page size.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginateMembers(uint256 index, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibHasMembers.data().memberSet.values, index, perPage);\\n  }\\n\\n  /**\\n   * @notice Adds a member to the list of known members.\\n   * @param who is the address to be added.\\n   */\\n  function addMember(address payable who)\\n      external \\n      onlyMemberManager(msg.sender) onlyValidMember(who) {\\n    // Add the member.\\n    LibHasMembers.data().memberSet.add(who, false);\\n    // Notify via callback.\\n    onMemberAdded(who);\\n    // Emit!\\n    emit MemberAdded(who);\\n  }\\n\\n  /**\\n   * @notice Removes a member from this contract.\\n   * @param member The address of the member to be removed.\\n   * @notice Requires that the caller is a member of this Issuer.\\n   * @notice Emits a `AHasMembers.MemberRemoved` event.\\n   */\\n  function removeMember(address member)\\n      external \\n      onlyMemberManager(msg.sender) {\\n    // Notify via callback.\\n    onMemberRemoved(member);\\n    // Remove member.\\n    LibHasMembers.data().memberSet.remove(member, false);\\n    // Emit!\\n    emit MemberRemoved(member);\\n  }\\n\\n  /// Modifiers.\\n\\n  modifier onlyMemberManager(address who) {\\n    if (!isMembersManager(who))\\n      revert RequiresMembersManager(who);\\n    _;\\n  }\\n\\n  modifier onlyValidMember(address who) {\\n    if (!isValidMember(who))\\n      revert RequiresValidMember(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xf5a8f86cc13f5aa313c02306d99affbaf73658e51aa7df1af60176bbccd18c74\",\"license\":\"MIT\"},\"contracts/common/lib/LibHasAutomatons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibHasAutomatons {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is `keccak256('HasAutomatons.storage.Main')`.\\n  bytes32 internal constant STORAGE_SLOT = 0x3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b9183;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we hold our automatons data.\\n    LibAddressSet.Data automatonSet;\\n    /// @notice This is where we store privileges for each of our automaton account.\\n    mapping(address => uint32) automatonPrivileges;\\n  }\\n\\n  function data() internal pure\\n      returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x0dad1ab3437a67476d7480b7cc89258ea857e5f9320226f46fe78654a30e5953\",\"license\":\"MIT\"},\"contracts/common/lib/LibHasGovernors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibHasGovernors {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is `keccak256('HasGovernors.storage.Main')`.\\n  bytes32 internal constant STORAGE_SLOT = 0xdac4df64cf6992e5f0fa766abc48a6698b638db4d8eeee68133c41fdd4862975;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we hold our automatons data.\\n    LibAddressSet.Data governorSet;\\n  }\\n\\n  function data() internal pure\\n      returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x67f9734a465b774ccae296f7ed930ffee2d46377333080c49baa0c0697f0db14\",\"license\":\"MIT\"},\"contracts/common/lib/LibHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibHasMembers {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is `keccak256('HasMembers.storage.Main')`.\\n  bytes32 internal constant STORAGE_SLOT = 0xd56529bfa3ed57257eed4751494e1d0c0f212cfe38768380e006e3bee06ffb91;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we hold our automatons data.\\n    LibAddressSet.Data memberSet;\\n  }\\n\\n  function data() internal pure\\n      returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x3c2d0885328df3aff3f7e8fd65f9bfe04ce43c5be28b376ea3803613d91b8bbe\",\"license\":\"MIT\"},\"contracts/fast/Crowdfund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../interfaces/IERC20.sol';\\nimport '../common/AHasMembers.sol';\\nimport '../common/AHasGovernors.sol';\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\n\\n\\n/**\\n * @title The `Crowdfund` FAST contract.\\n * @notice This contract is used to manage a crowdfunding campaign.\\n */\\ncontract Crowdfund {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// @notice Happens when a function requires an unmet phase.\\n  error InvalidPhase();\\n  /// @notice Happens when a duplicate entry is found.\\n  error DuplicateEntry();\\n  /// @notice Happens when inconsistent parametters are detected.\\n  error InconsistentParameter(string param);\\n  /// @notice Happens when an address is not a crowdfund pledger.\\n  error UnknownPledger(address who);\\n  /// @notice Happens when a call to the ERC20 token contract fails.\\n  error TokenContractError();\\n  /// @notice Happens when there are insufficient funds somewhere.\\n  error InsufficientFunds(uint256 amount);\\n\\n  /// @notice Happens when an address is not an issuer member.\\n  error RequiresIssuerMemberCaller();\\n  /// @notice Happens when an address is not a FAST member.\\n  error RequiresFastMemberCaller();\\n  /// @notice Happens when a parameter has to be a FAST governor.\\n  error RequiresFastGovernorship(address who);\\n  /// @notice Happens when a parameter has to be a FAST member.\\n  error RequiresFastMembership(address who);\\n\\n  /**\\n   * @notice Emited whenever the internal phase of this crowdfund changes.\\n   * @param phase The new phase of this contract.\\n   */\\n  event Advance(Phase phase);\\n\\n  /**\\n   * @notice Emited whenever a plege is made.\\n   * @param pledger The address of the pledger.\\n   * @param amount The amount of tokens pledged.\\n   */\\n  event Pledge(address indexed pledger, uint256 amount);\\n\\n  /**\\n   * @notice Emited when the crowdfunding is terminated.\\n   * @param success Whether the crowdfunding was successful or not.\\n   */\\n  event Terminated(bool indexed success);\\n\\n  /// @notice The different phases of the crowdfund.\\n  enum Phase { Setup, Funding, Success, Failure }\\n\\n  /// @notice Parameters to be passed to this contract's constructor.\\n  struct Params {\\n    /// @notice Who initially deployed this contract.\\n    address owner;\\n    /// @notice The issuer contract address.\\n    address issuer;\\n    /// @notice The FAST contract that this crowdfund is locked onto.\\n    address fast;\\n    /// @notice The beneficiary of the crowdfund.\\n    address beneficiary;\\n    /// @notice The token contract address.\\n    IERC20 token;\\n  }\\n\\n  /// @notice A version identifier for us to track what's deployed.\\n  uint16 public constant VERSION = 1;\\n\\n  /// @notice The initial params, as passed to the contract's constructor.\\n  Params public params;\\n  /// @notice The phase at which the crowdfunding is at.\\n  Phase public phase;\\n  /// @notice When was the distribution created.\\n  uint256 public creationBlock;\\n  /// @notice The fee expressed in basis points - eg ten thousandths.\\n  uint256 public basisPointsFee;\\n  /// @notice How much was collected so far.\\n  uint256 public collected;\\n\\n  /// @notice The set of addresses that have pledged to this crowdfund.\\n  LibAddressSet.Data internal pledgerSet;\\n  /// @notice The mapping of pledgers to their pledged amounts.\\n  mapping(address => uint256) public pledges;\\n  /// @notice Mapping of pledgers to whether they have been refunded or not.\\n  mapping(address => bool) public refunded;\\n\\n  /**\\n   * @notice The constructor for this contract.\\n   * Note that the constructor places the contract into the setup phase.\\n   * @param p The parameters to be passed to this contract's constructor.\\n   */\\n  constructor(Params memory p) {\\n    // Store parameters.\\n    params = p;\\n    // Check that the owner is a member of the FAST contract.\\n    if (!isFastGovernor(p.owner))\\n      revert RequiresFastGovernorship(p.owner);\\n    // Check that the beneficiary is a member of the FAST contract.\\n    else if (!isFastMember(p.beneficiary))\\n      revert RequiresFastMembership(p.beneficiary);\\n    // Keep creation block handy.\\n    creationBlock = block.number;\\n  }\\n\\n  /// @dev Given a total and a fee in basis points, returns the fee amount rounded up.\\n  function feeAmount()\\n      public view returns(uint256) {\\n    return Math.mulDiv(collected, basisPointsFee, 10_000, Math.Rounding.Up);\\n  }\\n\\n  /**\\n   * @notice Advances the campaign to the funding phase.\\n   * Note that this method is only available during the setup phase.\\n   * @param _basisPointsFee The fee expressed in basis points - eg ten thousandths.\\n   */\\n  function advanceToFunding(uint256 _basisPointsFee)\\n      external onlyDuring(Phase.Setup) onlyIssuerMember {\\n    // Make sure the fee doesn't exceed a hundred percent.\\n    if (_basisPointsFee > 10_000)\\n      revert InconsistentParameter(\\\"basisPointsFee\\\");\\n    basisPointsFee = _basisPointsFee;\\n    emit Advance(phase = Phase.Funding);\\n  }\\n\\n  /**\\n   * @notice Allows a pledger to pledge tokens to this crowdfund.\\n   * Note that this method is only available during the funding phase.\\n   * @param amount The amount of tokens to pledge.\\n   */\\n  function pledge(uint256 amount)\\n      public onlyDuring(Phase.Funding) onlyFastMember {\\n    // Make sure the amount is non-zero.\\n    if (amount == 0)\\n      revert InconsistentParameter(\\\"amount\\\");\\n    // Make sure that the message sender gave us allowance for at least this amount.\\n    uint256 allowance = params.token.allowance(msg.sender, address(this));\\n    if (allowance < amount)\\n      revert InsufficientFunds(amount - allowance);\\n    // Keep track of the pledger - don't throw if already present.\\n    pledgerSet.add(msg.sender, true);\\n    // Add the pledged amount to the existing pledge.\\n    pledges[msg.sender] += amount;\\n    // Update the collected amount.\\n    collected += amount;\\n    // Transfer the tokens to this contract.\\n    if (!params.token.transferFrom(msg.sender, address(this), amount))\\n      revert TokenContractError();\\n    // Emit!\\n    emit Pledge(msg.sender, amount);\\n  }\\n\\n  /**\\n   * @notice Queries the number of members.\\n   * @return An `uint256`.\\n   */\\n  function pledgerCount()\\n      external view returns(uint256) {\\n    return pledgerSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Queries pages of pledgers based on a start index and a page size.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginatePledgers(uint256 index, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(pledgerSet.values, index, perPage);\\n  }\\n\\n  /**\\n   * @notice Allows an issuer member to terminate the crowdfunding given a success flag.\\n   * Note that this method is available during any phase and can be used as a panic\\n   * button to terminate the crowdfunding prematurely.\\n   * @param success Whether the crowdfunding was successful or not.\\n   */\\n  function terminate(bool success)\\n      public onlyIssuerMember {\\n    // If the crowdfunding was successful...\\n    if (success) {\\n      // Transfer the fee to the issuer contract if there is one.\\n      uint256 finalFee = feeAmount();\\n      if (finalFee > 0)\\n        if (!params.token.transfer(params.issuer, finalFee))\\n          revert TokenContractError();\\n      // Transfer the payout to the beneficiary.\\n      uint256 payout = collected - finalFee;\\n      // If there's a payout for the beneficiary, transfer it.\\n      if (payout > 0)\\n        // Make sure that the beneficiary is **still** a member of the FAST contract.\\n        if (!isFastMember(params.beneficiary))\\n          revert RequiresFastMembership(params.beneficiary);\\n        // Attempt to transfer to the beneficiary.\\n        else if (!params.token.transfer(params.beneficiary, payout))\\n          revert TokenContractError();\\n    }\\n    // Advance to next phase.\\n    emit Advance(phase = success ? Phase.Success : Phase.Failure);\\n  }\\n\\n  /**\\n   * @notice Allows a pledger to be refunded if the crowdfunding failed.\\n   * Note that this method is only available during the failure phase.\\n   * @param pledger The address of the pledger to refund.\\n   */\\n  function refund(address pledger)\\n      public onlyDuring(Phase.Failure) {\\n    // Make sure the pledger is in the set.\\n    if (!pledgerSet.contains(pledger))\\n      revert UnknownPledger(pledger);\\n    // Pledger has already been refunded...\\n    else if (refunded[pledger])\\n      revert DuplicateEntry();\\n    // Track that the pledger has been refunded.\\n    refunded[pledger] = true;\\n    // Transfer the tokens to the pledger.\\n    if (!params.token.transfer(pledger, pledges[pledger]))\\n      revert TokenContractError();\\n  }\\n\\n  /// Modifiers and ACL functions.\\n\\n  /**\\n   * @notice Checks whether the given address is a governor of the FAST contract.\\n   * @param who The address to check.\\n   * @return A `bool` indicating whether the address is a governor of the FAST contract.\\n   */\\n  function isFastGovernor(address who)\\n      internal view returns(bool) {\\n    return AHasGovernors(params.fast).isGovernor(who);\\n  }\\n\\n  /**\\n   * @dev Checks whether the given address is a member of the FAST contract.\\n   * @param who The address to check.\\n   * @return A `bool` indicating whether the address is a member of the FAST contract.\\n   */\\n  function isFastMember(address who)\\n      internal view returns(bool) {\\n    return AHasMembers(params.fast).isMember(who);\\n  }\\n\\n  modifier onlyDuring(Phase _phase) {\\n    if (_phase != phase)\\n      revert InvalidPhase();\\n    _;\\n  }\\n\\n  modifier onlyIssuerMember() {\\n    if (!AHasMembers(params.issuer).isMember(msg.sender))\\n      revert RequiresIssuerMemberCaller();\\n    _;\\n  }\\n\\n  modifier onlyFastMember() {\\n    if (!isFastMember(msg.sender))\\n      revert RequiresFastMemberCaller();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xd6590e929b27f72064d3bd26115d7d2b409b8282fbed5ef90372ded052560e8b\",\"license\":\"MIT\"},\"contracts/fast/Distribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../interfaces/IERC20.sol';\\nimport '../common/AHasMembers.sol';\\nimport '../common/AHasAutomatons.sol';\\nimport './FastAutomatonsFacet.sol';\\n\\n\\n/**\\n * @title The `Distribution` FAST contract.\\n * @notice This contract allows for dividends or proceeds to be distributted amongst\\n * a list of beneficiaries. It has a lifecycle that can be described based on the\\n * following steps (or phases):\\n * - Funding, during which the sum to be distributed has to be credited to this contract.\\n * - FeeSetup, during which the oracle will define the fee to be paid upon distribution.\\n * - BeneficiariesSetup, during which the oracle can setup the beneficiaries.\\n * - Withdrawal, during which each beneficiary can withdraw their proceeds.\\n * - Terminated, during which nothing is possible.\\n */\\ncontract Distribution {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// @notice Happens when a function requires an unmet phase.\\n  error InvalidPhase();\\n  /// @notice Happens when a duplicate entry is found.\\n  error DuplicateEntry();\\n  /// @notice Happens when inconsistent parametters are detected.\\n  error InconsistentParameter(string param);\\n  /// @notice Happens when a call to the ERC20 token contract fails.\\n  error TokenContractError();\\n  /// @notice Happens when there are insufficient funds somewhere.\\n  error InsufficientFunds(uint256 amount);\\n  /// @notice Happens when the distribution has been overfunded.\\n  error Overfunded(uint256 amount);\\n  /// @notice Happens when a beneficiary is not found.\\n  error UnknownBeneficiary(address who);\\n\\n  /// @notice Happens when a function must be called by the FAST contract.\\n  error RequiresFastCaller();\\n  /// @notice Happens when an address is not crowdfund manager.\\n  error RequiresManagerCaller();\\n  /// @notice Happens when a parameter has to be a FAST member.\\n  error RequiresFastMembership(address who);\\n\\n  /// @notice The possible phases in which the contract is in.\\n  enum Phase { Funding, FeeSetup, BeneficiariesSetup, Withdrawal, Terminated }\\n\\n  /**\\n   * @notice Emited whenever the internal phase of this distribution changes.\\n   * @param phase The new phase of this contract.\\n   */\\n  event Advance(Phase phase);\\n  /**\\n   * @notice Emited whenever a beneficiary is added to the distribution list.\\n   * @param beneficiary is the address of the beneficiary who was added.\\n   * @param amount is the amount in native target token that is owed to the beneficiary. \\n   */\\n  event BeneficiaryAdded(address indexed beneficiary, uint256 indexed amount);\\n  /**\\n   * @notice Emited whenever a beneficiary is removed from the distribution list.\\n   * @param beneficiary is the address of the beneficiary who was removed.\\n   */\\n  event BeneficiaryRemoved(address indexed beneficiary);\\n  /**\\n   * @notice Emited whenever a beneficiary withdraws their owings.\\n   * @param caller is the address who ordered the withdrawal.\\n   * @param beneficiary is the address of the beneficiary who performed the withdrawal.\\n   * @param amount is the amount that was withdrawn.\\n   */\\n  event Withdrawal(address indexed caller, address indexed beneficiary, uint256 amount);\\n\\n  /// @notice Parameters to be passed to this contract's constructor.\\n  struct Params {\\n    /// @notice The distributor of the distribution - eg the address who ordered its deployment.\\n    address distributor;\\n    /// @notice The Issuer contract address.\\n    address issuer;\\n    /// @notice To which FAST this Distribution belongs\\n    address fast;\\n    /// @notice The target ERC20 address to be distributed to the beneficiaries.\\n    IERC20 token;\\n    /// @notice Block latching.\\n    uint256 blockLatch;\\n    /// @notice How much is meant to be distributed.\\n    uint256 total;\\n  }\\n\\n  /// @notice A version identifier for us to track what's deployed.\\n  uint16 public constant VERSION = 1;\\n\\n  /// @notice The initial params, as passed to the contract's constructor.\\n  Params public params;\\n  /// @notice The phase at which the distribution is at.\\n  Phase public phase = Phase.Funding;\\n  /// @notice When was the distribution created.\\n  uint256 public creationBlock;\\n  /// @notice How much the fee that will be distributed to `issuer` is.\\n  uint256 public fee;\\n  /// @notice How much is left for distribution.\\n  uint256 public available;\\n\\n  /// @notice The list of beneficiaries known to the system.\\n  LibAddressSet.Data internal beneficiaries;\\n  /// @notice How much was set asside for a particular beneficiary.\\n  mapping(address => uint256) public owings;\\n  /// @notice Whether or not a benificiary has withdrawn yet.\\n  mapping(address => bool) public withdrawn;\\n\\n  /**\\n   * @notice Constructs a new `Distribution` contracts.\\n   * @param p is a `Params` structure.\\n   */\\n  constructor(Params memory p) {\\n    // If the distribution is latched in the future, throw.\\n    if (p.blockLatch >= block.number)\\n      revert InconsistentParameter(\\\"blockLatch\\\");\\n    // Store all parameters.\\n    params = p;\\n    available = p.total;\\n    creationBlock = block.number;\\n  }\\n\\n  function advanceToFeeSetup()\\n      public onlyDuring(Phase.Funding) onlyFastCaller {\\n    // Make sure that the current distribution has exactly the required amount locked.\\n    uint256 balance = params.token.balanceOf(address(this));\\n    if (balance != params.total)\\n      revert InconsistentParameter(\\\"balance\\\");\\n    // Move to next phase.\\n    emit Advance(phase = Phase.FeeSetup);\\n  }\\n\\n  /**\\n   * @notice Sets the fee to be taken upon distribution. Only available during the\\n   * `Phase.FeeSetup` phase, throws otherwise. This method automatically advances the\\n   * phase to `Phase.BeneficiariesSetup`, so it can only be called once.\\n   * Note that only a manager (issuer or automaton with the correct privileges) can\\n   * call this method.\\n   * @param _fee is the amount that the `issuer` will receive.\\n   */\\n  function advanceToBeneficiariesSetup(uint256 _fee)\\n      external onlyDuring(Phase.FeeSetup) onlyManager {\\n    fee = _fee;\\n    available -= fee;\\n    // Move to next phase.\\n    emit Advance(phase = Phase.BeneficiariesSetup);\\n  }\\n\\n  /**\\n   * @notice Advances the distribution to the `Phase.Withdrawal` phase.\\n   * The distribution must be in the `Phase.BeneficiariesSetup` phase.\\n   */\\n  function advanceToWithdrawal()\\n      public onlyDuring(Phase.BeneficiariesSetup) onlyManager {\\n    // If the distribution covers more than the sum of all proceeds, we want\\n    // to prevent the distribution from advancing to the withdrawal phase.\\n    if (available > 0)\\n      revert Overfunded(available);\\n    // Transfer the fee to the issuer contract.\\n    if (!params.token.transfer(params.issuer, fee))\\n      revert TokenContractError();\\n    // Move to next phase.\\n    emit Advance(phase = Phase.Withdrawal);\\n  }\\n\\n  /**\\n   * @notice Adds beneficiaries and amounts to the distribution list. Both `_beneficiaries`\\n   * and `_amounts` arrays must be of the same size, or the method will revert.\\n   * This method is only available during the `Phase.BeneficiariesSetup` phase.\\n   * During execution, this method will make sure that the cumulated amounts for all\\n   * beneficiaries doesn't exceed the `total` amount available for distribution, or it\\n   * will simply throw.\\n   * Note that adding the same beneficiary twice will throw.\\n   * Note that only a manager (issuer or automaton with the correct privileges) can\\n   * call this method.\\n   * @param _beneficiaries is the list of beneficiaries to add.\\n   * @param _amounts is the list of amounts respective to each beneficiary.\\n   */\\n  function addBeneficiaries(address[] calldata _beneficiaries, uint256[] calldata _amounts)\\n      public onlyDuring(Phase.BeneficiariesSetup) onlyManager {\\n    // Beneficiaries and amount sizes must match.\\n    if (_beneficiaries.length != _amounts.length)\\n      revert InconsistentParameter(\\\"lengths\\\");\\n\\n    // We will count how much is needed for all these beneficiaries.\\n    uint256 needed = 0;\\n    // For each of the passed beneficiaries...\\n    for (uint256 i = 0; i < _beneficiaries.length;) {\\n      // Memoize a few variables...\\n      address beneficiary = _beneficiaries[i];\\n      uint256 amount = _amounts[i];\\n      // Make sure the beneficiary is a member of the FAST.\\n      if (!AHasMembers(params.fast).isMember(beneficiary))\\n        revert RequiresFastMembership(beneficiary);\\n\\n      // Add the beneficiary to our set.\\n      beneficiaries.add(beneficiary, false);\\n      // Keep track of the amount this beneficiary is entitled to.\\n      owings[beneficiary] = amount;\\n      // Accumulate how much is needed for these beneficiaries.\\n      needed += amount;\\n      // Emit!\\n      emit BeneficiaryAdded(beneficiary, amount);\\n      // Next iteration.\\n      unchecked { ++i; }\\n    }\\n\\n    // Make sure that there's enough to pay everyone.\\n    if (available < needed)\\n      revert InsufficientFunds(needed - available);\\n    // Decrease the amount of available funds.\\n    unchecked { available -= needed; }\\n  }\\n\\n  /**\\n   * @notice Removes a list of beneficiaries from the distribution list.\\n   * Note that removing a non-existent beneficiary will simply throw.\\n   * During execution, this method will increase the amount available for\\n   * distribution automatically.\\n   * Note that only a manager (issuer or automaton with the correct privileges) can\\n   * call this method.\\n   * @param _beneficiaries is the list of addresses to remove.\\n   */\\n  function removeBeneficiaries(address[] memory _beneficiaries)\\n      external onlyDuring(Phase.BeneficiariesSetup) onlyManager {\\n    // Remove all specified beneficiaries.\\n    for (uint256 i = 0; i < _beneficiaries.length;) {\\n      address beneficiary = _beneficiaries[i];\\n      // Remove the beneficiary from our list.\\n      beneficiaries.remove(beneficiary, false);\\n      // Increase the amount available for distribution, as it won't go to this beneficiary.\\n      available += owings[beneficiary];\\n      // Set the beneficiary's balance to zero.\\n      owings[beneficiary] = 0;\\n      // Emit!\\n      emit BeneficiaryRemoved(beneficiary);\\n      // Next iteration.\\n      unchecked { ++i; }\\n    }\\n  }\\n\\n  /**\\n   * @notice Queries pages of beneficiaries based on a start index and a page size.\\n   * Note that it is possible to query owings for each of these beneficiaries by\\n   * utilizing the `owings` and `withdrawn` public function.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginateBeneficiaries(uint256 index, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(\\n      beneficiaries.values,\\n      index,\\n      perPage\\n    );\\n  }\\n\\n  /**\\n   * @notice This function allows any beneficiary to withdraw what they are owed. This\\n   * method can only be called during the `Phase.Withdrawal` phase.\\n   * Note that this function is protected from reentrancy as it operates on the `token`\\n   * methods.\\n   */\\n  function withdraw(address beneficiary)\\n      public onlyDuring(Phase.Withdrawal) {\\n    if (!beneficiaries.contains(beneficiary))\\n      revert UnknownBeneficiary(beneficiary);\\n    else if (withdrawn[beneficiary])\\n      revert DuplicateEntry();\\n    // Memoize a few variables.\\n    uint256 amount = owings[beneficiary];\\n    // Make sure they can't do it again later... It is important\\n    // to do this before any call to `token` to prevent reentrancy.\\n    withdrawn[beneficiary] = true;\\n    // Transfer to the beneficiary all of their ownings.\\n    if (!params.token.transfer(beneficiary, amount))\\n      revert TokenContractError();\\n    // Emit!\\n    emit Withdrawal(msg.sender, beneficiary, amount);\\n  }\\n\\n  /**\\n   * @notice A panic function that can only be called by the distributor of the distribution.\\n   * Upon calling this method, the contract will simply send back any funds still\\n   * available to it and set its internal state to a termination one.\\n   * Note that since this method calls the `token` contract, it **must be\\n   * protected against reentrancy**.\\n   */\\n  function terminate()\\n      public onlyManager {\\n    // Reset internal variables so that it's clear that the contract is terminated.\\n    // It is important to do this prior to any call to `token` methods to prevent\\n    // re-entrancy attacks.\\n    emit Advance(phase = Phase.Terminated);\\n    available = 0;\\n    // Move all funds to the distributor account.\\n    params.token.transfer(params.distributor, params.token.balanceOf(address(this)));\\n  }\\n\\n  /// Modifiers.\\n\\n  modifier onlyDuring(Phase _phase) {\\n    if (_phase != phase)\\n      revert InvalidPhase();\\n    _;\\n  }\\n\\n  modifier onlyFastCaller() {\\n    if (msg.sender != params.fast)\\n      revert RequiresFastCaller();\\n    _;\\n  }\\n\\n  modifier onlyManager() {\\n    if (!AHasMembers(params.issuer).isMember(msg.sender) &&\\n        !AHasAutomatons(params.fast).automatonCan(msg.sender, FAST_PRIVILEGE_MANAGE_DISTRIBUTIONS))\\n      revert RequiresManagerCaller();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xf97b48e66574daa601684c917b15fe410455fdac2152861fda5fe07e39fca89a\",\"license\":\"MIT\"},\"contracts/fast/FastAccessFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../common/AHasMembers.sol';\\nimport '../common/AHasGovernors.sol';\\nimport '../marketplace/MarketplaceAccessFacet.sol';\\nimport '../issuer/IssuerAccessFacet.sol';\\nimport './FastTokenFacet.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFast.sol';\\nimport './FastTopFacet.sol';\\nimport './FastFrontendFacet.sol';\\nimport './FastAutomatonsFacet.sol';\\n\\n\\n/**\\n * @title The Fast Smart Contract.\\n * @notice The FAST Access facet is the source of truth when it comes to\\n * permissioning and ACLs within a given FAST.\\n */\\ncontract FastAccessFacet is AFastFacet, AHasGovernors, AHasMembers {\\n  using LibAddressSet for LibAddressSet.Data;\\n  /// Structs.\\n\\n  /**\\n   * @notice This structure isn't used anywhere in storage. Instead, it\\n   * allows various methods of the contract to return all the flags\\n   * associated with a given address in one go.\\n   */\\n  struct Flags {\\n    /// @notice Whether or not the item in scope is considered a governor of this FAST.\\n    bool isGovernor;\\n    /// @notice Whether or not the item in scope is considered a member of this FAST.\\n    bool isMember;\\n  }\\n\\n  /// AHasGovernors implementation.\\n\\n  function isGovernorsManager(address who)\\n      internal view override(AHasGovernors) returns(bool) {\\n    return _isIssuerMember(who);\\n  }\\n\\n  function isValidGovernor(address who)\\n      internal view override(AHasGovernors) returns(bool) {\\n    return _isMarketplaceMember(who);\\n  }\\n\\n  function onGovernorAdded(address governor)\\n      internal override(AHasGovernors) {\\n    // Notify issuer that this governor was added to this FAST.\\n    IssuerAccessFacet(LibFast.data().issuer).governorAddedToFast(governor);\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n  }\\n\\n  function onGovernorRemoved(address governor)\\n      internal override(AHasGovernors) {\\n    // Notify issuer that this governor was removed from this FAST.\\n    IssuerAccessFacet(LibFast.data().issuer).governorRemovedFromFast(governor);\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n  }\\n\\n  /// AHasMembers implementation.\\n\\n  function isMembersManager(address who)\\n      internal view override(AHasMembers) returns(bool) {\\n    return\\n      AHasGovernors(this).isGovernor(who) ||\\n      AHasAutomatons(address(this)).automatonCan(who, FAST_PRIVILEGE_MANAGE_MEMBERS);\\n  }\\n\\n  function isValidMember(address who)\\n      internal view override(AHasMembers) returns(bool) {\\n    return _isMarketplaceMember(who);\\n  }\\n\\n  function onMemberAdded(address member)\\n      internal override(AHasMembers) {\\n    // Notify marketplace that this member was added to this FAST.\\n    MarketplaceAccessFacet(LibFast.data().marketplace).memberAddedToFast(member);\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n  }\\n\\n  function onMemberRemoved(address member)\\n      internal override(AHasMembers) {\\n    // Notify token facet that this member was removed.\\n    FastTokenFacet(address(this)).beforeRemovingMember(member);\\n    // Notify marketplace that this member was removed from this FAST.\\n    MarketplaceAccessFacet(LibFast.data().marketplace).memberRemovedFromFast(member);\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n  }\\n\\n  /// Flags.\\n\\n  /**\\n   * @notice Retrieves flags for a given address.\\n   * @param a is the address to retrieve flags for.\\n   * @return A `Flags` struct.\\n   */\\n  function flags(address a)\\n      external view returns(Flags memory) {\\n    return Flags({\\n        isGovernor: AHasGovernors(address(this)).isGovernor(a),\\n        isMember: AHasMembers(address(this)).isMember(a)\\n      });\\n  }\\n}\\n\",\"keccak256\":\"0xe914c34c5e8e553fec9343807e307e3d14a7b5ff57d21b7b76d3ddfdf17d9aae\",\"license\":\"MIT\"},\"contracts/fast/FastAutomatonsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport './lib/AFastFacet.sol';\\nimport '../common/AHasAutomatons.sol';\\n\\n\\n// Privileges bits.\\nuint32 constant FAST_PRIVILEGE_MANAGE_MEMBERS = 1;\\nuint32 constant FAST_PRIVILEGE_MANAGE_DISTRIBUTIONS = 2;\\n\\n/**\\n * @title The Fast Smart Contract.\\n * @notice The Fast Automatons facet is in charge of keeping track of automaton accounts.\\n */\\ncontract FastAutomatonsFacet is AFastFacet, AHasAutomatons {\\n  /// Automatons management.\\n\\n  function isAutomatonsManager(address who)\\n      internal view override(AHasAutomatons)\\n      returns(bool) {\\n    return _isIssuerMember(who);\\n  }\\n}\\n\",\"keccak256\":\"0xb7c24385b1896137f01fb2d7edf20d0d8b301324c4825f51755a40b46bbd15ab\",\"license\":\"MIT\"},\"contracts/fast/FastFrontendFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibHelpers.sol';\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFastToken.sol';\\n\\n\\n/**\\n * @notice A facet dedicated to view / UI only methods. This facet should never hold any method that\\n * is not either `pure` or `view`, except to emit events.\\n */\\ncontract FastFrontendFacet is AFastFacet {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Data structures.\\n\\n  /**\\n   * @notice This struct groups the common attributes of a FAST.\\n   * @dev This struct shouldn't be used in internal storage.\\n   */\\n  struct Details {\\n    /// @notice The `address` of the FAST.\\n    address addr;\\n    /// @notice The `name` of the FAST (ERC20).\\n    string name;\\n    /// @notice The `symbol` of the FAST (ERC20).\\n    string symbol;\\n    /// @notice The `decimals` of the FAST (ERC20).\\n    uint8 decimals;\\n    /// @notice The `totalSupply` of the FAST (ERC20).\\n    uint256 totalSupply;\\n    /// @notice Whether the FAST is semi public or not.\\n    bool isSemiPublic;\\n    /// @notice Whether the FAST has a fixed supply or continious.\\n    bool hasFixedSupply;\\n    /// @notice Whether the transfers are enabled or not for this FAST.\\n    bool transfersDisabled;\\n    /// @notice The reserve balance.\\n    uint256 reserveBalance;\\n    /// @notice The number of members the FAST has.\\n    uint256 memberCount;\\n    /// @notice The number of governors for the FAST.\\n    uint256 governorCount;\\n  }\\n\\n  /**\\n   * @notice Governor level details.\\n   * @dev Note that **this struct shouldn't be used in internal storage**.\\n   */\\n  struct GovernorDetails {\\n    /// @notice The Governor's address.\\n    address addr;\\n    /// @notice Whether the Governor is also a Member.\\n    bool isMember;\\n  }\\n\\n  /**\\n   * @notice Member level details.\\n   * @dev This struct shouldn't be used in internal storage.\\n   */\\n  struct MemberDetails {\\n    /// @notice The Member's address.\\n    address addr;\\n    /// @notice The Member's balance.\\n    uint256 balance;\\n    /// @notice Whether the Member is also a Governor.\\n    bool isGovernor;\\n  }\\n\\n  /// Emitters.\\n\\n  /**\\n   * @notice Called by diamond facets, signals that FAST details may have changed.\\n   * \\n   * Business logic:\\n   * - Modifiers:\\n   *   - Requires the caller to be another facet of the diamond.\\n   * Emits `DetailsChanged`, see `IFastEvents.DetailsChanged`\\n   */\\n  function emitDetailsChanged()\\n      external onlyDiamondFacet {\\n    LibFastToken.Data storage tokenData = LibFastToken.data();\\n    emit DetailsChanged({\\n      transfersDisabled: LibFast.data().transfersDisabled,\\n      memberCount: LibHasMembers.data().memberSet.values.length,\\n      governorCount: LibHasGovernors.data().governorSet.values.length,\\n      totalSupply: tokenData.totalSupply,\\n      reserveBalance: tokenData.balances[LibHelpers.ZERO_ADDRESS]\\n    });\\n  }\\n\\n  /// Public functions.\\n\\n  /**\\n   * @notice Gets the details of a FAST.\\n   * @return The details for the current FAST, see `Details`.\\n   */\\n  function details()\\n      public view returns(Details memory) {\\n    LibFast.Data storage topStorage = LibFast.data();\\n    LibFastToken.Data storage tokenStorage = LibFastToken.data();\\n    return Details({\\n      addr: address(this),\\n      name: tokenStorage.name,\\n      symbol: tokenStorage.symbol,\\n      decimals: tokenStorage.decimals,\\n      totalSupply: tokenStorage.totalSupply,\\n      isSemiPublic: topStorage.isSemiPublic,\\n      hasFixedSupply: topStorage.hasFixedSupply,\\n      transfersDisabled: topStorage.transfersDisabled,\\n      reserveBalance: tokenStorage.balances[LibHelpers.ZERO_ADDRESS],\\n      memberCount: AHasMembers(address(this)).memberCount(),\\n      governorCount: LibHasGovernors.data().governorSet.values.length\\n    });\\n  }\\n\\n  /**\\n   * @notice Gets detailed governor details.\\n   * @return GovernorDetails See: `GovernorDetails`.\\n   */\\n  function detailedGovernor(address governor)\\n      public view returns(GovernorDetails memory) {\\n    return GovernorDetails({\\n      addr: governor,\\n      isMember: AHasMembers(address(this)).isMember(governor)\\n    });\\n  }\\n\\n  function paginateDetailedGovernors(uint256 index, uint256 perPage)\\n      external view returns(GovernorDetails[] memory, uint256) {\\n    (address[] memory governors, uint256 nextCursor) =\\n      LibPaginate.addresses(LibHasGovernors.data().governorSet.values, index, perPage);\\n    GovernorDetails[] memory values = new GovernorDetails[](governors.length);\\n    uint256 length =  governors.length;\\n    for (uint256 i = 0; i < length;) {\\n      values[i] = detailedGovernor(governors[i]);\\n      unchecked { ++i; }\\n    }\\n    return (values, nextCursor);\\n  }\\n\\n  /**\\n   * @notice Gets detailed member details.\\n   * @return A FAST member's details, see `MemberDetails`.\\n   */\\n  function detailedMember(address member)\\n      public view returns(MemberDetails memory) {\\n    return MemberDetails({\\n      addr: member,\\n      balance: LibFastToken.data().balances[member],\\n      isGovernor: LibHasGovernors.data().governorSet.contains(member)\\n    });\\n  }\\n\\n  function paginateDetailedMembers(uint256 index, uint256 perPage)\\n      external view returns(MemberDetails[] memory, uint256) {\\n    LibHasMembers.Data storage membersData = LibHasMembers.data();\\n    (address[] memory members, uint256 nextCursor) =\\n      LibPaginate.addresses(membersData.memberSet.values, index, perPage);\\n    MemberDetails[] memory values = new MemberDetails[](members.length);\\n    uint256 length = members.length;\\n    for (uint256 i = 0; i < length;) {\\n      values[i] = detailedMember(members[i]);\\n      unchecked { ++i; }\\n    }\\n    return (values, nextCursor);\\n  }\\n}\\n\",\"keccak256\":\"0x583bc2b0d84dedef08b2e7e9fbd38b18aba7f0ec88acee5f63411872754a2f33\",\"license\":\"MIT\"},\"contracts/fast/FastHistoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibPaginate.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFastHistory.sol';\\n\\n\\n/**\\n * @notice Although past events could be scrapped from the chain, we want to\\n * the frontend to be capable of listing past transfers and minting / burning events.\\n * This facet is in charge of performing archival of these things.\\n */\\ncontract FastHistoryFacet is AFastFacet {\\n  /// Minting history-keeping methods.\\n\\n  /**\\n   * @notice This method is a callback for other facets to signal whenever new tokens are minted.\\n   * \\n   * Business logic:\\n   * - Requires that the caller must be another facet.\\n   * - Adds a supply proof item of type `LibFastHistory.SupplyOp.Mint` on top of the stack.\\n   */\\n  function minted(uint256 amount, string calldata ref)\\n      external onlyDiamondFacet() {\\n    // Keep track of the mint.\\n    LibFastHistory.data().supplyProofs.push(\\n      LibFastHistory.SupplyProof({\\n        op: LibFastHistory.SupplyOp.Mint,\\n        amount: amount,\\n        blockNumber: block.number,\\n        ref: ref\\n      })\\n    );\\n  }\\n\\n  /**\\n   * @notice This method is a callback for other facets to signal whenever new tokens are burnt.\\n   * \\n   * Business logic:\\n   * - Requires that the caller must be another facet.\\n   * - Adds a supply proof item of type `LibFastHistory.SupplyOp.Burn` on top of the stack.\\n   */\\n  function burnt(uint256 amount, string calldata ref)\\n      external onlyDiamondFacet() {\\n    // Keep track of the unmint.\\n    LibFastHistory.data().supplyProofs.push(\\n      LibFastHistory.SupplyProof({\\n        op: LibFastHistory.SupplyOp.Burn,\\n        amount: amount,\\n        blockNumber: block.number,\\n        ref: ref\\n      })\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the number of supply proofs (minting and burning together) ever created.\\n   * @return A `uint256`.\\n   */\\n  function supplyProofCount()\\n      external view returns(uint256) {\\n    return LibFastHistory.data().supplyProofs.length;\\n  }\\n\\n  /**\\n   * @notice Returns a page of supply proofs (minting and burning together).\\n   * @param cursor is the zero-based index where to start fetching records.\\n   * @param perPage is the number of items to return.\\n   * @return A `(LibFastHistory.SupplyProof[], uint256)` tuple containing a page of data and the cursor to the next page.\\n   */\\n  function paginateSupplyProofs(uint256 cursor, uint256 perPage)\\n      external view returns(LibFastHistory.SupplyProof[] memory, uint256) {\\n    return LibPaginate.supplyProofs(LibFastHistory.data().supplyProofs, cursor, perPage);\\n  }\\n\\n  /// Transfer history-keeping methods.\\n\\n  /**\\n   * @notice This method is a callback for other facets to signal whenever a transfer has completed successfuly.\\n   * \\n   * Business logic:\\n   * - Requires that the caller must be another facet.\\n   * - Keeps track of the operation in various tracking structures, so that it can be queried later by `sender` and `recipient`.\\n   * - Pushes a transfer proof to the main transfer proof tracking stack.\\n   */\\n  function transfered(address spender, address from, address to, uint256 amount, string calldata ref)\\n      external onlyDiamondFacet() {\\n    LibFastHistory.Data storage s = LibFastHistory.data();\\n    // Keep track of the transfer proof ID for the sender and for the recipient.\\n    s.transferProofInvolvements[from].push(s.transferProofs.length);\\n    s.transferProofInvolvements[to].push(s.transferProofs.length);\\n    // Keep track of the transfer proof globally.\\n    s.transferProofs.push(\\n      LibFastHistory.TransferProof({\\n        spender: spender,\\n        from: from,\\n        to: to,\\n        amount: amount,\\n        blockNumber: block.number,\\n        ref: ref\\n      })\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the number of transfer proofs ever created.\\n   * @return A `uint256`.\\n   */\\n  function transferProofCount()\\n      external view returns(uint256) {\\n    return LibFastHistory.data().transferProofs.length;\\n  }\\n\\n  /**\\n   * @notice Returns a page of transfer proofs.\\n   * @param cursor is the zero-based index where to start fetching records.\\n   * @param perPage is the number of items to return.\\n   * @return A `(LibFastHistory.TransferProof[], uint256)` tuple containing a page of data and the cursor to the next page.\\n   */\\n  function paginateTransferProofs(uint256 cursor, uint256 perPage)\\n      external view returns(LibFastHistory.TransferProof[] memory, uint256) {\\n    return LibPaginate.transferProofs(LibFastHistory.data().transferProofs, cursor, perPage);\\n  }\\n\\n  /**\\n   * @notice Counts all past inbound and outbound transfers involving a given address.\\n   * @param involvee is the address for which to get the transfer proofs.\\n   */\\n  function transferProofByInvolveeCount(address involvee)\\n      external view returns(uint256) {\\n    return LibFastHistory.data().transferProofInvolvements[involvee].length;\\n  }\\n\\n  /**\\n   * @notice Returns pages of indices of past inbound and outbound transfer proofs by involvee.\\n   * @dev This function is reading from an indexing data structure. Each index points to a record\\n   * in the main transfer proof storage, and can then be found in `transferProofs` at returned indices.\\n   * @param involvee is the address for which to retrieve a page of data.\\n   * @param cursor is where to start.\\n   * @param perPage is how many records at most should be returned.\\n  */\\n  function paginateTransferProofIndicesByInvolvee(address involvee, uint256 cursor, uint256 perPage)\\n      external view returns(uint256[] memory, uint256) {\\n    return LibPaginate.uint256s(LibFastHistory.data().transferProofInvolvements[involvee], cursor, perPage);\\n  }\\n\\n  /**\\n   * @notice Returns a page of inbound and outbound transfer proofs based on an involvee.#\\n   * @param involvee is the address for which to fetch the data.\\n   * @param cursor is where to start.\\n   * @param perPage is how many items at most to return.\\n   * @return A `(LibFastHistory.TransferProof[], uint256)` tuple containing the results and the cursor to the next page.\\n   */\\n  function paginateTransferProofsByInvolvee(address involvee, uint256 cursor, uint256 perPage)\\n      external view returns(LibFastHistory.TransferProof[] memory, uint256) {\\n    LibFastHistory.Data storage s = LibFastHistory.data();\\n    uint256[] storage collection  = s.transferProofInvolvements[involvee];\\n    uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n    LibFastHistory.TransferProof[] memory values = new LibFastHistory.TransferProof[](length);\\n    for (uint256 i = 0; i < length;) {\\n      values[i] = s.transferProofs[collection[cursor + i]];\\n      unchecked { ++i; }\\n    }\\n    return (values, cursor + length);\\n  }\\n}\\n\",\"keccak256\":\"0x62822d72ec1fe8073dca0c1853a4fd2e5709c91875fd30416d229c80f5f9de28\",\"license\":\"MIT\"},\"contracts/fast/FastTokenFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../interfaces/IERC20.sol';\\nimport '../interfaces/ICustomErrors.sol';\\nimport '../common/AHasMembers.sol';\\nimport '../lib/LibDiamond.sol';\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFastToken.sol';\\nimport '../marketplace/MarketplaceTokenHoldersFacet.sol';\\nimport './FastTopFacet.sol';\\nimport './FastAccessFacet.sol';\\nimport './FastHistoryFacet.sol';\\nimport './FastFrontendFacet.sol';\\n\\n\\ncontract FastTokenFacet is AFastFacet, IERC20 {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Constants.\\n\\n  string internal constant DEAD_TOKENS_RETRIEVAL = 'Dead tokens retrieval';\\n\\n  /// Minting methods.\\n\\n  /**\\n   * @notice Mints an amount of FAST tokens.\\n   *  A reference can be passed to identify why this happened for example.\\n   *\\n   * Business logic:\\n   * - Modifiers:\\n   *   - Requires the caller to be a member of the Issuer contract.\\n   * - Requires that either the token has continuous supply, or that no tokens have been minted yet.\\n   * - Increases the reserve balance by `amount`.\\n   * - Calls `FastHistoryFacet.minted`.\\n   * - Calls `FastFrontendFacet.emitDetailsChanged`.\\n   * - Emits a `Minted(amount, ref)` event.\\n   * @param amount The number of FAST tokens to mint.\\n   * @param ref A reference for this minting operation.\\n   */\\n  function mint(uint256 amount, string calldata ref)\\n      external\\n      onlyIssuerMember {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n    // We want to make sure that either of these two is true:\\n    // - The token doesn't have fixed supply.\\n    // - The token has fixed supply but has no tokens yet (First and only mint).\\n    if (FastTopFacet(address(this)).hasFixedSupply() && (s.totalSupply != 0 || this.balanceOf(address(0)) != 0))\\n      revert ICustomErrors.RequiresContinuousSupply();\\n\\n    // Prepare the minted amount on the zero address.\\n    s.balances[address(0)] += amount;\\n\\n    // Keep track of the minting operation.\\n    FastHistoryFacet(address(this)).minted(amount, ref);\\n\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n    emit Minted(amount, ref, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Burns an amount of FAST tokens.\\n   *  A reference can be passed to identify why this happened for example.\\n   *\\n   * Business logic.\\n   * - Modifiers:\\n   *   - Requires the caller to be a member of the Issuer contract.\\n   * - Requires that the token has continuous supply.\\n   * - Requires that there are enough funds in the reserve to cover for `amount` being burnt.\\n   * - Decreases the reserve balance by `amount`.\\n   * - Calls `FastHistoryFacet.burnt(amount, ref)`.\\n   * - Calls `FastFrontendFacet.emitDetailsChanged`.\\n   * - Emits a `Burnt(amount, ref)`.\\n   * @param amount The number of FAST tokens to mint.\\n   * @param ref A reference for this minting operation.\\n   */\\n  function burn(uint256 amount, string calldata ref)\\n      external\\n      onlyIssuerMember {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n\\n    if (FastTopFacet(address(this)).hasFixedSupply())\\n      revert ICustomErrors.RequiresContinuousSupply();\\n\\n    // Remove the minted amount from the zero address.\\n    s.balances[address(0)] -= amount;\\n\\n    // Keep track of the minting operation.\\n    FastHistoryFacet(address(this)).burnt(amount, ref);\\n\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n    emit Burnt(amount, ref, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Allows an Issuer member to move an arbitrary account's holdings back to the reserve,\\n   * as per regulatory requirements.\\n   *\\n   * Business logic:\\n   * - Modifiers:\\n   *   - Requires that the caller is a member of the Issuer contract.\\n   * - If the amount held by `holder` is not zero\\n   *   - The balance of `holder` should be set to zero.\\n   *   - The reserve's balance should be increased by how much was on the holder's account.\\n   *   - Total supply should be decreased by that amount too.\\n   * - The `holder`'s address should not be tracked as a token holder in this FAST anymore.\\n   * - The `holder`'s address should not be tracked as a token holder in the Marketplace anymore.\\n   * - A `Transfer(holder, reserve, amount)` event should be emited.\\n   * - If the amount previously held by `holder` was not zero,\\n   *   - Since the reserve balance and total supply have changed, the `FastFrontendFacet.emitDetailsChanged()` function should be called.\\n   * @param holder is the address for which to move the tokens from.\\n   */\\n  function retrieveDeadTokens(address holder)\\n      external\\n      onlyIssuerMember {\\n    // Cache how many tokens the holder has.\\n    uint256 amount = balanceOf(holder);\\n    // Note: The amount **can** be zero in this function.\\n\\n    // Grab a pointer to the token storage.\\n    LibFastToken.Data storage s = LibFastToken.data();\\n\\n    // These should only run if the amount is zero, as they result in a no-op.\\n    if (amount > 0) {\\n      // Set the holder balance to zero.\\n      s.balances[holder] = 0;\\n      // Increment the reserve's balance.\\n      s.balances[address(0)] += amount;\\n      // The tokens aren't in circulation anymore - decrease total supply.\\n      s.totalSupply -= amount;\\n    }\\n\\n    // Since the holder's account is now empty, make sure to keep track of it both\\n    // in this FAST and in the marketplace.\\n    s.tokenHolders.remove(holder, true);\\n    MarketplaceTokenHoldersFacet(LibFast.data().marketplace).fastBalanceChanged(holder, 0);\\n\\n    // Keep track of this transfer in history facet.\\n    FastHistoryFacet(address(this)).transfered(msg.sender, holder, address(0), amount, DEAD_TOKENS_RETRIEVAL);\\n\\n    // This operation can be seen as a regular transfer between holder and reserve. Emit.\\n    emit FastTransfer(msg.sender, holder, address(0), amount, DEAD_TOKENS_RETRIEVAL);\\n    emit Transfer(holder, address(0), amount);\\n\\n    // If amount wasn't zero, total supply and reserve balance have changed - emit.\\n    if (amount > 0)\\n      FastFrontendFacet(address(this)).emitDetailsChanged();\\n  }\\n\\n  // ERC20 implementation and transfer related methods.\\n\\n  /**\\n   * @notice The name of this FAST (ERC20 standard).\\n   * @return string Name of the FAST.\\n   */\\n  function name()\\n      external view returns(string memory) {\\n    return LibFastToken.data().name;\\n  }\\n\\n  /**\\n   * @notice The symbol of this FAST (ERC20 standard).\\n   * @return string Symbol of the FAST.\\n   */\\n  function symbol()\\n      external view returns(string memory) {\\n    return LibFastToken.data().symbol;\\n  }\\n\\n  /**\\n   * @notice The `decimals` of this FAST (ERC20 standard).\\n   * @return uint256 Number of decimals the FAST has.\\n   */\\n  function decimals()\\n      external view returns(uint256) {\\n    return LibFastToken.data().decimals;\\n  }\\n\\n  /**\\n   * @notice The total supply of the FAST (ERC20 standard).\\n   * @return uint256 Total supply of the FAST.\\n   */\\n  function totalSupply()\\n      external override(IERC20) view returns(uint256) {\\n    return LibFastToken.data().totalSupply;\\n  }\\n\\n  /**\\n   * @notice The balance of the passed owner (ERC20 standard).\\n   * @param owner The owners address to get the balance of.\\n   * @return uint256 The current balance of this owner's account.\\n   */\\n  function balanceOf(address owner)\\n      public view override(IERC20) returns(uint256) {\\n    return LibFastToken.data().balances[owner];\\n  }\\n\\n  /**\\n   * @notice See `performTransfer`, the spender will be equal to the `owner`, and the `ref` will be defauted. */\\n  function transfer(address to, uint256 amount)\\n      external override(IERC20) returns(bool) {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performTransfer(\\n      TransferArgs({\\n        spender: msg.sender,\\n        from: msg.sender,\\n        to: to,\\n        amount: amount,\\n        ref: LibFastToken.DEFAULT_TRANSFER_REFERENCE\\n      })\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @notice See `performTransfer`, the spender will be equal to the `owner`. */\\n  function transferWithRef(address to, uint256 amount, string calldata ref)\\n      external returns(bool) {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performTransfer(\\n      TransferArgs({\\n        spender: msg.sender,\\n        from: msg.sender,\\n        to: to,\\n        amount: amount,\\n        ref: ref\\n      })\\n    );\\n    return true;\\n  }\\n\\n  function allowance(address owner, address spender)\\n      public view override(IERC20) returns(uint256) {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n    // If the allowance being queried is owned by the reserve, and `spender` is\\n    // an Issuer member, `spender` owns the full balance of `owner`. If they are\\n    // not an Issuer member then their allowance is zero. Otherwise, the regular given\\n    // allowance for `spender` over `owner` applies.\\n    if (owner == address(0))\\n      return AHasMembers(LibFast.data().issuer).isMember(spender)\\n        ? s.balances[owner]\\n        : 0;\\n    else\\n      return s.allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @notice This method directly calls `performApproval`, setting its `from` paramter to the sender of\\n   * the transaction.\\n   * @param spender is the address to allow spending from the caller's wallet.\\n   * @param amount is how much to **increase** the allowance.\\n   */\\n  function approve(address spender, uint256 amount)\\n      external override(IERC20) returns(bool) {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performApproval(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice This method directly calls `performDisapproval`, setting its `from` parameter to the sender of\\n   * the transaction.\\n   * @param spender is the address to disallow spending from the caller's wallet.\\n   * @param amount is how much to **decrease** the allowance.\\n   */\\n  function disapprove(address spender, uint256 amount)\\n      external\\n      onlyMember(msg.sender)\\n      returns(bool) {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performDisapproval(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  /// @notice See `performTransfer`, the `ref` will be defaulted.\\n  function transferFrom(address from, address to, uint256 amount)\\n      external override(IERC20) returns(bool) {\\n    transferFromWithRef(from, to, amount, LibFastToken.DEFAULT_TRANSFER_REFERENCE);\\n    return true;\\n  }\\n\\n  /// @notice See `performTransfer`.\\n  function transferFromWithRef(address from, address to, uint256 amount, string memory ref)\\n      public returns(bool) {\\n    // Make sure the call is performed externally so that we can mock.\\n    this.performTransfer(\\n      TransferArgs({\\n        spender: msg.sender,\\n        from: from,\\n        to: to,\\n        amount: amount,\\n        ref: ref\\n      })\\n    );\\n    return true;\\n  }\\n\\n  // Allowances query operations.\\n\\n  function givenAllowanceCount(address owner)\\n      external view returns(uint256) {\\n    return LibFastToken.data().allowancesByOwner[owner].values.length;\\n  }\\n\\n  function paginateAllowancesByOwner(address owner, uint256 index, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(\\n      LibFastToken.data().allowancesByOwner[owner].values,\\n      index,\\n      perPage\\n    );\\n  }\\n\\n  function receivedAllowanceCount(address spender)\\n      external view returns(uint256) {\\n    return LibFastToken.data().allowancesBySpender[spender].values.length;\\n  }\\n\\n  function paginateAllowancesBySpender(address spender, uint256 index, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(\\n      LibFastToken.data().allowancesBySpender[spender].values,\\n      index,\\n      perPage\\n    );\\n  }\\n\\n  // These functions would be internal / private if we weren't using the diamond pattern.\\n  // Instead, they're `onlyDiamondFacet` - eg can only be called by facets of the current\\n  // FAST.\\n\\n  struct TransferArgs {\\n    address spender;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    string ref;\\n  }\\n\\n  /**\\n   * @notice This is the internal method that gets called whenever a transfer is initiated. Both `transfer`,\\n   * `transferWithRef`, and their variants internally call this function.\\n   *\\n   * Business logic:\\n   * - Modifiers:\\n   *   - Only facets of the current diamond should be able to call this.\\n   * - Requires that transfers are enabled for this FAST.\\n   * - Requires that `from` and `to` are different addresses.\\n   * - Requires that `from` membership is active in the marketplace.\\n   * - If `from` is not the reserve, requires that `from` is a valid token holder.\\n   * - If `from` is the reserve, requires that the message sender is an issuer member.\\n   * - Requires that `to` is a valid token holder.\\n   * - Requires that the amount is a positive value.\\n   * - If the transfer is an allowance - e.g. the `spender` is not the same as the `from` address,\\n   *   - The allowance given by the `from` address to the `spender` covers for the `amount`.\\n   *     - If we are **not** transfering **from** the reserve,\\n   *       - Decreases the allowance given by `from` to `spender`.\\n   *         - If the new allowance reaches zero,\\n   *           - Stop tracking the allowance in the allowance lookup tables for both spending and receiving directions.\\n   * - Decreases the balance of the `owner` address.\\n   * - Increases the balance of the `to` address by `amount`.\\n   * - If we are **not** transfering **from** the reserve,\\n   *   - Requires that there are enough transfer credits to cover for `amount`.\\n   *   - Decreases the transfer credits by `amount`.\\n   * - If the `to` address is the reserve,\\n   *   - Decreases the total supply by `amount`.\\n   *   - Calls `FastFrontendFacet.emitDetailsChanged`.\\n   * - Else, if the `from` address is the reserve,\\n   *   - Increases the total supply by `amount`.\\n   *   - Calls `FastFrontendFacet.emitDetailsChanged`.\\n   * - Calls `FastHistoryFacet.transfered`.\\n   * - Emits a `Transfer(from, to, amount)` event.\\n   */\\n  function performTransfer(TransferArgs calldata p)\\n      external onlyDiamondFacet {\\n    // TODO: Make this function return instead of raising errors.\\n\\n    // Grab a pointer to our top-level storage.\\n    LibFast.Data storage topData = LibFast.data();\\n\\n    // Requires that transfers are enabled for this FAST.\\n    if (FastTopFacet(address(this)).transfersDisabled())\\n      revert ICustomErrors.RequiresTransfersEnabled();\\n    // Requires that `from` and `to` are different addresses.\\n    else if (p.from == p.to)\\n      revert ICustomErrors.RequiresDifferentSenderAndRecipient(p.from);\\n    // Requires that allowance transfers from the reserve are performed by issuer members only.\\n    else if (p.from == address(0) && !AHasMembers(topData.issuer).isMember(p.spender))\\n      revert ICustomErrors.RequiresIssuerMembership(p.spender);\\n\\n    // Requires that the `from` address can hold tokens.\\n    else if (!canHoldTokens(p.from))\\n      revert ICustomErrors.RequiresValidTokenHolder(p.from);\\n    // Requires that the `from` address marketplace membership is active if not the reserve.\\n    else if (p.from != address(0) && !IHasActiveMembers(LibFast.data().marketplace).isActiveMember(p.from))\\n      revert ICustomErrors.RequiresMarketplaceActiveMembership(p.from);\\n\\n    // Requires that the `to` address can hold tokens.\\n    else if (!canHoldTokens(p.to))\\n      revert ICustomErrors.RequiresValidTokenHolder(p.to);\\n\\n    // For any non-zero amount, update balances and allowances, notify other contracts, etc.\\n    if (p.amount != 0) {\\n      // Grab a pointer to our token storage.\\n      LibFastToken.Data storage tokenData = LibFastToken.data();\\n\\n      // If this is an allowance transfer and if the `from` account is not the reserve...\\n      if (p.spender != p.from && p.from != address(0)) {\\n        // Decrease allowance.\\n        uint256 newAllowance = tokenData.allowances[p.from][p.spender] -= p.amount;\\n        // If the allowance reached zero, we want to remove that allowance from\\n        // the various other places where we keep track of it.\\n        if (newAllowance == 0) {\\n          tokenData.allowancesByOwner[p.from].remove(p.spender, true);\\n          tokenData.allowancesBySpender[p.spender].remove(p.from, true);\\n        }\\n      }\\n\\n      // Keep track of the balances - `from` spends (decrease), `to` receives (increase).\\n      uint256 fromBalance = (tokenData.balances[p.from] -= p.amount);\\n      uint256 toBalance = (tokenData.balances[p.to] += p.amount);\\n\\n      // Keep track of who has what FAST.\\n      MarketplaceTokenHoldersFacet(topData.marketplace).fastBalanceChanged(p.from, fromBalance);\\n      MarketplaceTokenHoldersFacet(topData.marketplace).fastBalanceChanged(p.to, toBalance);\\n\\n      // Keep track of who holds this token.\\n      balanceChanged(p.from, fromBalance);\\n      balanceChanged(p.to, toBalance);\\n\\n      // If the funds are going to the reserve...\\n      if (p.to == address(0)) {\\n        // Decrease total supply.\\n        tokenData.totalSupply -= p.amount;\\n        // Emit a top-level details change event.\\n        FastFrontendFacet(address(this)).emitDetailsChanged();\\n      }\\n      // If the funds are moving from the zero address...\\n      else if (p.from == address(0)) {\\n        // Increase total supply.\\n        tokenData.totalSupply += p.amount;\\n        // Emit a top-level details change event.\\n        FastFrontendFacet(address(this)).emitDetailsChanged();\\n      }\\n    }\\n\\n    // Keep track of the transfer in the history facet.\\n    FastHistoryFacet(address(this)).transfered(p.spender, p.from, p.to, p.amount, p.ref);\\n\\n    // Emit!\\n    emit FastTransfer(p.spender, p.from, p.to, p.amount, p.ref);\\n    emit Transfer(p.from, p.to, p.amount);\\n  }\\n\\n  /**\\n   * @notice Increases the allowance given by `from` to `spender` by `amount`.\\n   * Note that this function should run and emit even if the amount passed is zero.\\n   * Business logic:\\n   * - Modifiers:\\n   *   - Only facets of the current diamond should be able to call this.\\n   *   - Requires that `onlyTokenHolder` passes for the `from` address.\\n   * - Requires that the `amount` is positive number.\\n   * - Increases the allowance given by `from` to `spender` by `amount`.\\n   * - Update the allowance lookup tables in both directions.\\n   * - Emits an `Approval(from, spender, amount)`.\\n   * @param from is the wallet from which to give the allowance.\\n   * @param spender is the receiver of the allowance.\\n   * @param amount is how much to **increase** the current allowance by.\\n   * \\n   * Note: This function runs when amount is zero, and will emit.\\n   */\\n  function performApproval(address from, address spender, uint256 amount)\\n      external\\n      onlyDiamondFacet {\\n    // Allowance cannot be given over the reserve.\\n    if (from == address(0))\\n      revert ICustomErrors.UnsupportedOperation();\\n    // Require that the `from` address can hold tokens.\\n    else if (!canHoldTokens(from))\\n      revert ICustomErrors.RequiresValidTokenHolder(from);\\n    \\n    if (amount > 0) {\\n      LibFastToken.Data storage s = LibFastToken.data();\\n      // Note that we are not exactly following ERC20 here - we don't want to **set** the allowance to `amount`\\n      // to mitigate a possible attack.\\n      // See https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit#heading=h.gmr6zdg47087.\\n      s.allowances[from][spender] += amount;\\n    // Keep track of given and received allowances.\\n      s.allowancesByOwner[from].add(spender, true);\\n      s.allowancesBySpender[spender].add(from, true);\\n    }\\n\\n    // Emit!\\n    emit Approval(from, spender, amount);\\n  }\\n\\n  /**\\n   * @notice Decreases allowance given by `from` to `spender` by `amount`.\\n   *\\n   * Business logic:\\n   * - Modifiers:\\n   *   - Only facets of the current diamond should be able to call this.\\n   * - The allowance given by `from` to `spender` is decreased by `amount`.\\n   * - Whether the allowance reached zero, stop tracking it by owner and by spender.\\n   * - Emit a `Disapproval(from, spender, amount)` event.\\n   * \\n   * Note: This function runs when amount is zero, and will emit.\\n   */\\n  function performDisapproval(address from, address spender, uint256 amount)\\n      external\\n      onlyDiamondFacet {\\n    if (amount != 0) {\\n      LibFastToken.Data storage s = LibFastToken.data();\\n\\n      // Remove allowance.\\n      s.allowances[from][spender] -= amount;\\n\\n      // Whenever the allowance reaches zero, stop tracking it by owner and spender.\\n      if (s.allowances[from][spender] == 0) {\\n        s.allowancesByOwner[from].remove(spender, true);\\n        s.allowancesBySpender[spender].remove(from, true);\\n      }\\n    }\\n\\n    // Emit!\\n    emit Disapproval(from, spender, amount);\\n  }\\n\\n  // WARNING: This method contains two loops. We know that this should never\\n  // happen in solidity. However:\\n  // - In the context of our private chain, gas is cheap.\\n  // - It can only be called by a governor.\\n  function beforeRemovingMember(address member)\\n      external onlyDiamondFacet() {\\n    if (balanceOf(member) != 0)\\n      revert ICustomErrors.RequiresPositiveBalance(member);\\n\\n    LibFastToken.Data storage s = LibFastToken.data();\\n\\n    // Remove all given allowances.\\n    {\\n      address[] storage gaData = s.allowancesByOwner[member].values;\\n      while (gaData.length > 0) {\\n        // Make sure the call is performed externally so that we can mock.\\n        address spender = gaData[0];\\n        this.performDisapproval(member, spender, s.allowances[member][spender]);\\n      }\\n    }\\n\\n    // Remove all received allowances.\\n    {\\n      address[] storage raData = s.allowancesBySpender[member].values;\\n      while (raData.length > 0) {\\n        // Make sure the call is performed externally so that we can mock.\\n        address owner = raData[0];\\n        this.performDisapproval(owner, member, s.allowances[owner][member]);\\n      }\\n    }\\n  }\\n\\n  function holders()\\n      external view\\n      returns(address[] memory) {\\n    LibFastToken.Data storage s = LibFastToken.data();\\n    return s.tokenHolders.values;\\n  }\\n\\n  function balanceChanged(address holder, uint256 balance)\\n      private {\\n    // Return early if this is the zero address.\\n    if (holder == address(0))\\n      return;\\n\\n    LibFastToken.Data storage s = LibFastToken.data();\\n\\n    // If this is a positive balance and it doesn't already exist in the set, add address.\\n    if (balance > 0 && !s.tokenHolders.contains(holder))\\n      s.tokenHolders.add(holder, false);\\n    // If the balance is 0 and it exists in the set, remove it.\\n    else if (balance == 0 && s.tokenHolders.contains(holder))\\n      s.tokenHolders.remove(holder, false);\\n  }\\n\\n  // Private and helper methods.\\n\\n  /**\\n   * @notice Ensures that the given address is a member of the current FAST or the Zero Address.\\n   *\\n   * Business logic:\\n   *   - If the candidate is the reserve, it is a valid token holder.\\n   *   - If the FAST is semi-public,\\n   *     - We require that candidate is a member of the Marketplace contract and is active in it.\\n   *   - Otherwise,\\n   *     - Require that the candidate is a member of the FAST.\\n   * @param candidate The address to check.\\n   * @return A boolean set to `true` if `candidate` can hold tokens, `false` otherwise.\\n   */\\n  function canHoldTokens(address candidate)\\n      private view returns(bool) {\\n    // Zero address can hold tokens, in any cases.\\n    if (candidate == address(0))\\n      return true;\\n    // If the FAST is semi public, any member of the marketplace can hold tokens.\\n    else if (FastTopFacet(address(this)).isSemiPublic()) {\\n      return AHasMembers(LibFast.data().marketplace).isMember(candidate);\\n    }\\n    // FAST is private, only members of the fast can hold tokens.\\n    else {\\n      return AHasMembers(address(this)).isMember(candidate);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5b2eda3ed2e86968070f171acc9b521e26c349121a609717c872b6757bffaef3\",\"license\":\"MIT\"},\"contracts/fast/FastTopFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibHelpers.sol';\\nimport './lib/AFastFacet.sol';\\nimport './lib/LibFast.sol';\\nimport './lib/IFastEvents.sol';\\nimport './FastFrontendFacet.sol';\\nimport './FastTokenFacet.sol';\\n\\n\\ncontract FastTopFacet is AFastFacet {\\n  // Getters and setters for global flags.\\n\\n  /**\\n   * @notice Get the Issuer address.\\n   * @return Address of Issuer.\\n   */\\n  function issuerAddress()\\n      external view returns(address) {\\n    return LibFast.data().issuer;\\n  }\\n\\n  /**\\n   * @notice Get the Marketplace address.\\n   * @return address Address of Marketplace.\\n   */\\n  function marketplaceAddress()\\n      external view returns(address) {\\n    return LibFast.data().marketplace;\\n  }\\n\\n  /**\\n   * @notice Is this FAST a semi public FAST?\\n   * @return bool Yes/no semi public.\\n   */\\n  function isSemiPublic()\\n      external view returns(bool) {\\n    return LibFast.data().isSemiPublic;\\n  }\\n\\n  /**\\n   * @notice Is this FAST a fixed supply FAST?\\n   * @return bool Yes/no fixed supply.\\n   */\\n  function hasFixedSupply()\\n      external view returns(bool) {\\n    return LibFast.data().hasFixedSupply;\\n  }\\n\\n  /**\\n   * @notice Are transfers enabled across this FAST?\\n   * @return `true` if transfers are disabled, `false` if transfers are enabled.\\n   */\\n  function transfersDisabled()\\n      external view returns(bool) {\\n    return LibFast.data().transfersDisabled;\\n  }\\n\\n  // Setters for global flags.\\n\\n  /**\\n   * @notice Allows to switch from a private scheme to a semi-public scheme,\\n   *  but not the other way around, unless the total supply is zero.\\n   * @param flag Set the semi public flag to true/false.\\n   */\\n  function setIsSemiPublic(bool flag)\\n      external\\n      onlyIssuerMember {\\n    // Someone is trying to toggle back to private?... No can do!\\n    if (this.isSemiPublic() && FastTokenFacet(address(this)).totalSupply() != 0) {\\n      revert ICustomErrors.UnsupportedOperation();\\n    }\\n    LibFast.data().isSemiPublic = flag;\\n    // Emit!\\n    FastFrontendFacet(address(this)).emitDetailsChanged();\\n  }\\n\\n  /**\\n   * @notice Allows an issuer member to enable or disable all transfers within this FAST.\\n   * @param flag Set the transfer capability to active or not.\\n   */\\n  function setTransfersDisabled(bool flag)\\n      external\\n      onlyIssuerMember {\\n    LibFast.Data storage d = LibFast.data();\\n    // Only make changes and emit if the new flag is different than the old one.\\n    if (d.transfersDisabled != flag) {\\n      // Set flag.\\n      d.transfersDisabled = flag;\\n      // Emit!\\n      FastFrontendFacet(address(this)).emitDetailsChanged();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x95f2946ce5fd8a5d448bef5b20df4316cc6839f52b30f5f1ed3bb8a8a77eadcb\",\"license\":\"MIT\"},\"contracts/fast/lib/AFastFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibHelpers.sol';\\nimport '../../lib/LibAddressSet.sol';\\nimport '../../common/AHasGovernors.sol';\\nimport '../../common/AHasMembers.sol';\\nimport '../../common/AHasAutomatons.sol';\\nimport '../../interfaces/IHasActiveMembers.sol';\\nimport '../lib/LibFast.sol';\\nimport './IFastEvents.sol';\\n\\n\\n/**\\n * @title Abstract FAST helper contract.\\n * @notice This abstract contract encapsulates modifiers allowing inheriting facets to guard against\\n * certain permissions.\\n */\\nabstract contract AFastFacet is IFastEvents {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Internal ACL functions.\\n\\n  function _isMarketplaceMember(address who)\\n      internal view returns(bool) {\\n    return AHasMembers(LibFast.data().marketplace).isMember(who);\\n  }\\n\\n  function _isMarketplaceActiveMember(address who)\\n      internal view returns(bool) {\\n    return IHasActiveMembers(LibFast.data().marketplace).isActiveMember(who);\\n  }\\n\\n  function _isIssuerMember(address who)\\n      internal view returns(bool) {\\n    return AHasMembers(LibFast.data().issuer).isMember(who);\\n  }\\n\\n  /// Modifiers.\\n\\n  /// @notice Ensures that a method can only be called by another facet of the same diamond.\\n  modifier onlyDiamondFacet() {\\n    if (!LibHelpers._isDiamondFacet(msg.sender))\\n      revert ICustomErrors.InternalMethod();\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the owner of this diamond.\\n  modifier onlyDiamondOwner() {\\n    if (!LibHelpers._isDiamondOwner(msg.sender))\\n      revert ICustomErrors.RequiresDiamondOwnership(msg.sender);\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier onlyDeployer() {\\n    if (!LibHelpers._isDeployer(msg.sender))\\n      revert ICustomErrors.InternalMethod();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a member of the Marketplace.\\n   * @param who The address to check.\\n   */\\n  modifier onlyMarketplaceMember(address who) {\\n    if (!_isMarketplaceMember(who))\\n      revert ICustomErrors.RequiresMarketplaceMembership(who);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures a who is an active member of the Marketplace.\\n   * @param who The address to check.\\n   */\\n  modifier onlyMarketplaceActiveMember(address who) {\\n    if (!_isMarketplaceActiveMember(who))\\n      revert ICustomErrors.RequiresMarketplaceActiveMembership(who);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the message sender is a member of the Issuer.\\n   */\\n  modifier onlyIssuerMember() {\\n    if (!_isIssuerMember(msg.sender))\\n      revert ICustomErrors.RequiresIssuerMembership(msg.sender);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a governor of the FAST.\\n   * @param who The address to check.\\n   */\\n  modifier onlyGovernor(address who) {\\n    if (!AHasGovernors(address(this)).isGovernor(who))\\n      revert ICustomErrors.RequiresFastGovernorship(who);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a member of the FAST.\\n   * @param who The address to check.\\n   */\\n  modifier onlyMember(address who) {\\n    if (!AHasMembers(address(this)).isMember(who))\\n      revert ICustomErrors.RequiresFastMembership(who);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures address `a` and `b` are different.\\n   * @param a Address a\\n   * @param b Address b\\n   */\\n  modifier differentAddresses(address a, address b) {\\n    if (a == b)\\n      revert ICustomErrors.RequiresDifferentSenderAndRecipient(a);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x65d3de91cdbe5ddbd9440fa08b0974534cc138d60451329d78a8affeef082403\",\"license\":\"MIT\"},\"contracts/fast/lib/IFastEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../fast/Distribution.sol';\\nimport '../../fast/Crowdfund.sol';\\n\\n\\n/**\\n * @title FAST events inventory.\\n * @notice An interface allowing to use events within the Diamond pattern without name colisions.\\n * @dev The idea is that as several facets can emit the same events, we don't want to have to re-declare\\n * the same event several time. This interface is a per-diamond central place for such event declaration.\\n */\\ninterface IFastEvents {\\n  /// Issuance related events.\\n  \\n  /**\\n   * @notice Emited whenever an issuance happens in a FAST.\\n   * @param amount is the amount of tokens that have been minted.\\n   * @param ref is the reference associated with the minting operation.\\n   * @param who is the account from which the minting operation originated.\\n   */\\n  event Minted(uint256 indexed amount, string indexed ref, address indexed who);\\n  /**\\n   * @notice Emited whenever an burning happens in a FAST.\\n   * @param amount is the amount of tokens that have been burnt.\\n   * @param ref is the reference associated with the burning operation.\\n   * @param who is the account from which the burning operation originated.\\n   */\\n  event Burnt(uint256 indexed amount, string indexed ref, address indexed who);\\n\\n  /// Transfer and ERC20 stuff.\\n\\n  /// @notice See `ERC20.Transfer`.\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  /// @notice See `ERC20.Approval`.\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  /// @notice See `ERC20.Disapproval`.\\n  event Disapproval(address indexed owner, address indexed spender, uint256 value);\\n  /**\\n   * @notice As we augmented the ERC20 standard with a few concepts, we emit our custom events\\n   * in addition to the ERC20 ones.\\n   * @param spender is the account who performed the transfer.\\n   * @param from is the account from which the tokens will be debited from.\\n   * @param to is the account to which the tokens will be credited to.\\n   * @param value is the amount of tokens transfered.\\n   * @param ref is the optional reference associated with the transfer.\\n   */\\n  event FastTransfer(address indexed spender, address indexed from, address indexed to, uint256 value, string ref);\\n\\n  /// Distribution related events.\\n\\n  event DistributionDeployed(Distribution indexed distribution);\\n\\n  /// Crowdfund related events.\\n\\n  event CrowdfundDeployed(Crowdfund indexed crowdfund);\\n\\n  /// General events.\\n\\n  /**\\n   * @notice This is an event that is fired whenever any of some of the FAST parameters\\n   * change, so that the frontend can react to it and refresh the general header\\n   * for that fast as well as the baseball cards in the FASTs list.\\n   * @param transfersDisabled marks whether or not transfers are disabled by an issuer member at FAST level.\\n   * @param memberCount is the number of members in the FAST.\\n   * @param governorCount is the number of governors in the FAST.\\n   * @param totalSupply is the amount of tokens in circulation in the FAST.\\n   * @param reserveBalance is the balance of the zero-address (aka reserve) for the FAST.\\n   */\\n  event DetailsChanged(\\n    bool transfersDisabled,\\n    uint256 memberCount,\\n    uint256 governorCount,\\n    uint256 totalSupply,\\n    uint256 reserveBalance\\n  );\\n}\\n\",\"keccak256\":\"0xf8faa1c56158eac59b1272f8db185a440d5a1057e8f739327d53f62a2e1fff33\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/**\\n * @notice Top-level shared functionality for FAST diamonds.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFast {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0x80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705;\\n\\n  // Data structures.\\n\\n  /**\\n   * @notice The top-level data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice The internal pointer to the Issuer contract.\\n    address issuer;\\n    /// @notice The internal pointer to the Marketplace contract.\\n    address marketplace;\\n    /// @notice We have to track whether the token facet provides continuous minting or fixed supply.\\n    bool hasFixedSupply;\\n    /// @notice Whether or not this FAST requires to be a member to hold tokens.\\n    bool isSemiPublic;\\n    /// @notice A flag which when toggled to `true` disables all transfers across this FAST.\\n    bool transfersDisabled;\\n  }\\n\\n  /**\\n   * @notice Returns the top-level storage for the calling FAST.\\n   * @return s a struct pointer for top-level FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xf97ea4e8187984eb5209dc6d4d455eaa1c2e46bdb8d1cf72cf88b5f5b9f7c174\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastHistory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/**\\n * @notice This library centralises shared functionality between FAST diamonds facets that have to do with transfer\\n * history tracking.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFastHistory {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage.History'):\\n  bytes32 internal constant STORAGE_SLOT = 0x6bc8b61a9dd5fc049ea98027492a801d74e35fdf4d80d7fecd551a16e88fdbb4;\\n\\n  // Storage structures.\\n\\n  /**\\n   * @notice The history data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice All minting proofs are kept here.\\n    SupplyProof[] supplyProofs;\\n    /// @notice All transfer proofs are kept here.\\n    TransferProof[] transferProofs;\\n    /// @notice All transfers indices involving a given address are kept here.\\n    mapping(address => uint256[]) transferProofInvolvements;\\n  }\\n\\n  // Other structures.\\n\\n  /// @notice A minting operation could either be to mint or burn tokens.\\n  enum SupplyOp { Mint, Burn }\\n\\n  /// @notice Minting operations are recorded for papertrail. This is the structure that keeps track of them.\\n  struct SupplyProof {\\n    /// @notice How...\\n    SupplyOp op;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /// @notice Every transfer in is recorded. This is the structure that keeps track of them.\\n  struct TransferProof {\\n    /// @notice Who spent...\\n    address spender;\\n    /// @notice Who performed the transfer...\\n    address from;\\n    /// @notice Who received...\\n    address to;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /**\\n   * @notice Returns the history storage for the calling FAST.\\n   * @return s a struct pointer for history FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x39b21b41198e6fa219cd8eec59124cda25395bf19174aa809c0c41d650765d73\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\n/**\\n * @notice This library centralises shared functionality between FAST diamonds facets that have to do with token related logic.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable. \\n */\\nlibrary LibFastToken {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage.Token'):\\n  bytes32 internal constant STORAGE_SLOT = 0xb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261;\\n\\n  // Constants.\\n\\n  string internal constant DEFAULT_TRANSFER_REFERENCE = 'Unspecified - via ERC20';\\n\\n  // Data structures.\\n\\n  /**\\n   * @notice The token data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    // ERC20 related properties for this FAST Token.\\n    /// @notice The name of the FAST.\\n    string name;\\n    /// @notice The symbol for this FAST.\\n    string symbol;\\n    /// @notice The decimal points used by this FAST.\\n    uint8 decimals;\\n    /// @notice The amount of tokens in circulation.\\n    uint256 totalSupply;\\n    /// @notice Legacy variable.\\n    uint256 LEGACY_transferCredits;\\n    /// @notice Our members balances are held here.\\n    mapping(address => uint256) balances;\\n    // Allowances are stored here.\\n    /// @notice Allowance amounts are stored in here, via mapping of `owner.spender.amount`\\n    mapping(address => mapping(address => uint256)) allowances;\\n    /// @notice A reverse lookup table allowing to retrieve allowances given by owner.\\n    mapping(address => LibAddressSet.Data) allowancesByOwner;\\n    /// @notice A reverse lookup table allowing to retrieve allowances given by spender.\\n    mapping(address => LibAddressSet.Data) allowancesBySpender;\\n    /// @notice All of this FAST token holders.\\n    LibAddressSet.Data tokenHolders;\\n  }\\n\\n  /**\\n   * @notice Returns the token storage for the calling FAST.\\n   * @return s a struct pointer for token FAST data storage.\\n   */\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x03817dcb731b24b60f2b72aa220c33b137c43dcc15cf34475e9b0652335ab657\",\"license\":\"MIT\"},\"contracts/interfaces/ICustomErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\ninterface ICustomErrors {\\n  error AlreadyInitialized();\\n  error InternalMethod();\\n  error RequiresDiamondOwnership(address who);\\n  error RequiresFastContractCaller();\\n\\n  error RequiresTransfersEnabled();\\n  error RequiresIssuerMembership(address who);\\n  error RequiresMarketplaceMembership(address who);\\n  error RequiresMarketplaceActiveMembership(address who);\\n  error RequiresMarketplaceDeactivatedMember(address who);\\n\\n  error RequiresValidTokenHolder(address who);\\n  error RequiresFastGovernorship(address who);\\n  error RequiresFastMembership(address who);\\n  error RequiresNoFastMemberships(address who);\\n\\n  error RequiresOwner(address who);\\n\\n  error InsufficientFunds(uint256 missing);\\n\\n  error DuplicateEntry();\\n  error NonExistentEntry();\\n  error UnsupportedOperation();\\n  error CannotSelfRemove(address who);\\n  error ReentrancyError();\\n\\n  error RequiresContinuousSupply();\\n  error RequiresPositiveBalance(address holder);\\n  error RequiresDifferentSenderAndRecipient(address a);\\n}\\n\",\"keccak256\":\"0x488da257b5263041fb65c72b8f87b6dcf941749d82e232c88a3246b89c7e730f\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n/// @title A facet providing diamond cut mechanisms.\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    /// a method with `delegatecall`.\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    /// _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x027d86defbac7ad01db7074bf8c62b16493ffc552fcd9d841fe20d282117ed3c\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title ERC173 Contract Ownership Standard\\n * @dev The ERC165 identifier for this interface is 0x7f5828d0.\\n */\\ninterface IERC173 {\\n    /// @notice This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @notice Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xdb5140cc2b82a3fa14aec9b29d77705e66a7b4ca5ea6ba6f4cd7364c636344df\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title ERC20 standard as defined in the EIP.\\ninterface IERC20 {\\n  /**\\n   * @notice Allows to query the total number of tokens in circulation.\\n   * @return An `uint256` representing how many tokens are currently in circulation.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Allows to query the balance of a given address.\\n   * @param account is the address for which the balance shall be queried.\\n   * @return An `uint256` - the balance for the given address.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @notice Moves `amount` tokens from the caller's account to `recipient`.\\n   * @param recipient is the address to which the funds should be sent to, if successful.\\n   * @param amount is the amount of tokens to transfef.\\n   * @return A `bool` which value is `true` when the operation was successful.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @notice Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner`\\n   * through `transferFrom`. This is zero by default.\\n   * @dev This value changes when `approve`, `disapprove` and `transferFrom` / `transferFromWithRef` are called.\\n   * @param owner is the owner of the funds.\\n   * @param spender is the address for which the allowance should be queried.\\n   * @return A `uint256` representing the remaining allowance of `spender` over `owner`'s funds.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @notice Increases the allowance of `spender` by `amount`.\\n   * @param spender is the address towards which the allowance should be given.\\n   * @return A `bool` set to `true` when the operation was successful.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @notice Attempts to transfer `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's allowance.\\n   * @return A `bool` set to `true` when the operation was successful.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x79731c983219a24087d3bb925b9dd5c3cb3c85ebfdcd45afce5826bc2d53710f\",\"license\":\"MIT\"},\"contracts/interfaces/IHasActiveMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n/// @title An interface signifying that the inheriting contract implements the concept of active memberships.\\ninterface IHasActiveMembers {\\n  /**\\n   * @notice Queries whether a given account is a member of the marketplace and flagged as active.\\n   * @param member is the address to query.\\n   * @return A `bool` set to `true` if the candidate is an active member.\\n   */\\n  function isActiveMember(address member) external view returns(bool);\\n\\n  /**\\n   * @notice Deactivates a given member address.\\n   * @param member is the address to deactivate.\\n   */\\n  function deactivateMember(address payable member) external;\\n\\n  /**\\n   * @notice Activates a given member address.\\n   * @param member is the address to activate.\\n   */\\n  function activateMember(address member) external;\\n}\\n\",\"keccak256\":\"0xd6e4d8a9c09973877ab59d155dfd99c881b0e19fdf428aa9d5bf78d292f44234\",\"license\":\"MIT\"},\"contracts/issuer/IssuerAccessFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../lib/LibHelpers.sol';\\nimport '../common/AHasMembers.sol';\\nimport '../interfaces/ICustomErrors.sol';\\nimport '../fast/FastTopFacet.sol';\\nimport '../fast/FastTokenFacet.sol';\\nimport './lib/AIssuerFacet.sol';\\nimport './lib/LibIssuerAccess.sol';\\nimport './lib/IIssuerEvents.sol';\\nimport '../issuer/IssuerTopFacet.sol';\\n\\n\\ncontract IssuerAccessFacet is AIssuerFacet, AHasMembers {\\n  using LibAddressSet for LibAddressSet.Data;\\n  /// AHasMembers implementation.\\n\\n  function isMembersManager(address who)\\n      internal view override(AHasMembers) returns(bool) {\\n    return AHasMembers(address(this)).isMember(who);\\n  }\\n\\n  function isValidMember(address who)\\n      internal pure override(AHasMembers) returns(bool) {\\n    return who != LibHelpers.ZERO_ADDRESS;\\n  }\\n\\n  /// Membership management.\\n\\n  /** @notice Callback from FAST contracts allowing the Issuer contract to keep track of governorships.\\n   * @param governor The governor added to a FAST.\\n   */\\n  function governorAddedToFast(address governor)\\n      external {\\n    // Verify that the given address is in fact a registered FAST contract.\\n    if (!IssuerTopFacet(address(this)).isFastRegistered(msg.sender)) {\\n      revert ICustomErrors.RequiresFastContractCaller();\\n    }\\n    // Keep track of the governorship.\\n    LibIssuerAccess.data().fastGovernorships[governor].add(msg.sender, false);\\n\\n    emit GovernorshipAdded(msg.sender, governor);\\n  }\\n\\n  /** @notice Callback from FAST contracts allowing the Issuer contract to keep track of governorships.\\n   * @param governor The governor removed from a FAST.\\n   */\\n  function governorRemovedFromFast(address governor)\\n      external {\\n    // Verify that the given address is in fact a registered FAST contract.\\n    if (!IssuerTopFacet(address(this)).isFastRegistered(msg.sender)) {\\n      revert ICustomErrors.RequiresFastContractCaller();\\n    }\\n    // Remove the tracked governorship.\\n    LibIssuerAccess.data().fastGovernorships[governor].remove(msg.sender, false);\\n\\n    emit GovernorshipRemoved(msg.sender, governor);\\n  }\\n\\n  /** @notice Returns a list of FASTs that the passed address is a governor of.\\n   * @param governor is the address to check governorships of.\\n   * @param cursor is the index at which to start.\\n   * @param perPage is how many records should be returned at most.\\n   * @return A `address[]` list of values at most `perPage` big.\\n   * @return A `uint256` index to the next page.\\n   */\\n  function paginateGovernorships(address governor, uint256 cursor, uint256 perPage)\\n      external view\\n      returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibIssuerAccess.data().fastGovernorships[governor].values, cursor, perPage);\\n  }\\n}\\n\",\"keccak256\":\"0xc36a324bd72efb0c882dba16a69c1bd9b4cbdb12dd1835f0b7d2d647edc2fa26\",\"license\":\"MIT\"},\"contracts/issuer/IssuerTopFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../interfaces/ICustomErrors.sol';\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../lib/LibHelpers.sol';\\nimport '../fast/FastTopFacet.sol';\\nimport '../fast/FastTokenFacet.sol';\\nimport './lib/AIssuerFacet.sol';\\nimport './lib/LibIssuer.sol';\\n\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\n\\n\\ncontract IssuerTopFacet is AIssuerFacet {\\n  using LibAddressSet for LibAddressSet.Data;\\n  // FAST management related methods.\\n\\n  /**\\n   * @notice Queries whether a given address is a known and registered FAST contract.\\n   * @param fast The address of the contract to check.\\n   * @return A boolean.\\n   */\\n  function isFastRegistered(address fast)\\n      external view returns(bool) {\\n    return LibIssuer.data().fastSet.contains(fast);\\n  }\\n\\n  /**\\n   * @notice Allows to retrieve the address of a FAST diamond given its symbol.\\n   * @param symbol The symbol of the FAST diamond to get the address of.\\n   * @return The address of the corresponding FAST diamond, or the Zero Address if not found.\\n   */\\n  function fastBySymbol(string calldata symbol)\\n      external view returns(address) {\\n    return LibIssuer.data().fastSymbols[symbol];\\n  }\\n\\n  /**\\n   * @notice Allows the registration of a given FAST diamond with this Issuer.\\n   * @param fast The address of the FAST diamond to be registered.\\n   * @notice Requires that the caller is a member of this Issuer.\\n   * @notice Emits a `FastRegistered` event.\\n   */\\n  function registerFast(address fast)\\n      external\\n      onlyMember(msg.sender) {\\n    LibIssuer.Data storage s = LibIssuer.data();\\n    string memory symbol = FastTokenFacet(fast).symbol();\\n    if (s.fastSymbols[symbol] != address(0)) {\\n      revert ICustomErrors.DuplicateEntry();\\n    }\\n\\n    // Add the FAST to our list.\\n    s.fastSet.add(fast, false);\\n    // Add the fast symbol to our list.\\n    s.fastSymbols[symbol] = fast;\\n\\n    // Emit!\\n    emit FastRegistered(fast);\\n  }\\n\\n  /**\\n   * @notice Allows the unregistration of a given FAST diamond with this Issuer.\\n   * @param fast The address of the FAST diamond to be unregistered.\\n   * @notice Requires that the caller is a member of this Issuer.\\n   * @notice Emits a `FastUnregistered` event.\\n   */\\n  function unregisterFast(address fast)\\n    external\\n    onlyMember(msg.sender) {\\n      LibIssuer.Data storage s = LibIssuer.data();\\n      string memory symbol = FastTokenFacet(fast).symbol();\\n\\n      // Disable transfers in the FAST.\\n      FastTopFacet(fast).setTransfersDisabled(true);\\n\\n      // Remove the FAST from our lists.\\n      s.fastSet.remove(fast, false);\\n      delete s.fastSymbols[symbol];\\n\\n      // Emit!\\n      emit FastUnregistered(fast);\\n    }\\n\\n  /**\\n   * @notice Counts the number of FAST diamonds registered with this Issuer.\\n   * @return The number of FAST diamonds registered with this Issuer.\\n   */\\n  function fastCount()\\n      external view returns(uint256) {\\n    return LibIssuer.data().fastSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Paginates the FAST diamonds registered with this Issuer based on a starting cursor and a number of records per page.\\n   * @param cursor The index at which to start.\\n   * @param perPage How many records should be returned at most.\\n   * @return A `address[]` list of values at most `perPage` big.\\n   * @return A `uint256` index to the next page.\\n   */\\n  function paginateFasts(uint256 cursor, uint256 perPage)\\n      external view\\n      returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibIssuer.data().fastSet.values, cursor, perPage);\\n  }\\n\\n  /**\\n   * @notice Allows an issuer member to move collected ERC20 fees from this contract\\n   * to an arbitrary address.\\n   * @param token is the address of the ERC20 to be collected.\\n   * @param amount is how much should be moved from the ERC20 to the collection address.\\n   * @param to is the collection address - eg the address that will receive the ERC20 tokens.\\n   */\\n  function transferERC20Tokens (IERC20 token, uint256 amount, address to)\\n      public\\n      onlyMember(msg.sender) {\\n    require(token.transfer(to, amount));\\n  }\\n}\\n\",\"keccak256\":\"0x3e15205ec98f75620df118dd2790566f1d9527145501dec22a61ee3d95f3765e\",\"license\":\"MIT\"},\"contracts/issuer/lib/AIssuerFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibHelpers.sol';\\nimport '../../common/AHasMembers.sol';\\nimport '../../interfaces/ICustomErrors.sol';\\nimport './IIssuerEvents.sol';\\n\\n\\n/**\\n* @notice This abstract contract encapsulates modifiers allowing inheriting facets to guard against\\n* certain permissions.\\n*/\\nabstract contract AIssuerFacet is IIssuerEvents {\\n  /// Modifiers.\\n\\n  /// @notice Ensures that a method can only be called by another facet of the same diamond.\\n  modifier onlyDiamondFacet() {\\n    if (!LibHelpers._isDiamondFacet(msg.sender))\\n      revert ICustomErrors.InternalMethod();\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the owner of this diamond.\\n  modifier onlyDiamondOwner() {\\n    if (!LibHelpers._isDiamondOwner(msg.sender))\\n      revert ICustomErrors.RequiresDiamondOwnership(msg.sender);\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier onlyDeployer() {\\n    if (!LibHelpers._isDeployer(msg.sender))\\n      revert ICustomErrors.InternalMethod();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a member of the FAST.\\n   * @param who The address to check.\\n   */\\n  modifier onlyMember(address who) {\\n    if (!AHasMembers(address(this)).isMember(who))\\n      revert ICustomErrors.RequiresIssuerMembership(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x758f6b3cbd8a8aeadf7bd70915b4dbde203d94488d1ca4f84e2c571459739fe9\",\"license\":\"MIT\"},\"contracts/issuer/lib/IIssuerEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n// WARNING: These events must be maintained 1:1 with LibIssuerEvents!\\n// They also should never be emitted directly, they only help us defining\\n// typescript types!\\ninterface IIssuerEvents {\\n  // Fast registration events.\\n\\n  /**\\n   * @notice Emited when a new FAST is registered.\\n   * @param fast The address of the newly registered FAST diamond.\\n   */\\n  event FastRegistered(address indexed fast);\\n  /**\\n   * @notice Emited when a FAST is removed from the Issuer contract.\\n   * @param fast The address of the unregistered FAST.\\n   */\\n  event FastUnregistered(address indexed fast);\\n\\n  // Governors.\\n\\n  event GovernorshipRemoved(address indexed fast, address indexed governor);\\n  event GovernorshipAdded(address indexed fast, address indexed governor);\\n}\\n\",\"keccak256\":\"0x2ce9dc37a03a9f59fe8ec59a921df87d9d9a5e372824a24148702bb0ea763123\",\"license\":\"MIT\"},\"contracts/issuer/lib/LibIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibIssuer {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Issuer.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0xd681d5f1de7bc4b7442c088939dc202585e09699e92a94c9717ace8d0f4fcaa5;\\n\\n  // Data structures.\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    // This is where we keep our list of deployed fast FASTs.\\n    LibAddressSet.Data fastSet;\\n    // We keep track of the FAST symbols that were already used.\\n    mapping(string => address) fastSymbols;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x9a8c697e32b3f8640cff2559aa286583b3f8e80f77a6048e525cd78c0e203135\",\"license\":\"MIT\"},\"contracts/issuer/lib/LibIssuerAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibIssuerAccess {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Issuer.storage.Access'):\\n  bytes32 internal constant STORAGE_SLOT = 0x3ceaa4d5edf9c96fbd56140abe6389d65a87143d4f11819874ff2fe0ae9574db;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    // For a given address we store list of FASTs where that address is a governor.\\n    mapping(address => LibAddressSet.Data) fastGovernorships;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0x20241810ce259530e52f3a8e8e65e0df263dfad8b597e48915cb9ea2d802773f\",\"license\":\"MIT\"},\"contracts/lib/LibAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\nlibrary LibAddressSet {\\n  /// @notice Represents a list of addresses.\\n  struct Data {\\n    mapping(address => uint256) indices;\\n    address[] values;\\n  }\\n\\n  /**\\n   * @notice Adds an item into the storage set. If the address already exists in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be added.\\n   */\\n  function add(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && exists) { return; }\\n    require(!exists, 'Address already in set');\\n    d.indices[key] = d.values.length;\\n    d.values.push(key);\\n  }\\n\\n  /**\\n   * @notice Removes an item from the storage set. If the address does not exist in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be removed.\\n   */\\n  function remove(Data storage d, address key, bool noThrow)\\n      internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && !exists) { return; }\\n    require(exists, 'Address does not exist in set');\\n    address keyToMove = d.values[d.values.length - 1];\\n    uint256 idxToReplace = d.indices[key];\\n    d.indices[keyToMove] = idxToReplace;\\n    d.values[idxToReplace] = keyToMove;\\n\\n    delete d.indices[key];\\n    d.values.pop();\\n  }\\n\\n  /**\\n   * @notice Tests whether or not a given item already exists in the set.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to test.\\n   * @return a boolean.\\n   */\\n  function contains(Data storage d, address key)\\n      internal view returns(bool) {\\n    return d.values.length == 0\\n      ? false\\n      : d.values[d.indices[key]] == key;\\n  }\\n}\\n\",\"keccak256\":\"0x7411b83b6853f77fd7b0fef32c5367edad2396ec83f82c45c81297e1d1376e50\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xb66c6dde5d24195adad7492253be1f4ebd580563d3f8847fec9ad8e6555498f4\",\"license\":\"MIT\"},\"contracts/lib/LibHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport './LibHelpers.sol';\\nimport '../interfaces/IERC173.sol';\\n\\nlibrary LibHelpers {\\n  address internal constant ZERO_ADDRESS = address(0);\\n  address internal constant DEPLOYER_CONTRACT = 0x6DF2D25d8C6FD680730ee658b530A05a99BB769a;\\n\\n  function _isDiamondFacet(address who)\\n      internal view returns(bool) {\\n    return who == address(this);\\n  }\\n  \\n  function _isDiamondOwner(address who)\\n      internal view returns(bool) {\\n    return who == IERC173(address(this)).owner();\\n  }\\n\\n  function _isDeployer(address who)\\n      internal pure returns(bool) {\\n    return who == LibHelpers.DEPLOYER_CONTRACT;\\n  }\\n}\\n\",\"keccak256\":\"0xe49c0442da7b7cce1940847f70bc6c77e85f97b5ae8e580e612b4f027d2c7dc4\",\"license\":\"MIT\"},\"contracts/lib/LibPaginate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../fast/lib/LibFastHistory.sol';\\n\\n\\nlibrary LibPaginate {\\n  function addresses(address[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(address[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      address[] memory values = new address[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function uint256s(uint256[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(uint256[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      uint256[] memory values = new uint256[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function supplyProofs(LibFastHistory.SupplyProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.SupplyProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.SupplyProof[] memory values = new LibFastHistory.SupplyProof[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n\\n  function transferProofs(LibFastHistory.TransferProof[] storage collection, uint256 cursor, uint256 perPage)\\n    internal view returns(LibFastHistory.TransferProof[] memory, uint256) {\\n      uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n      LibFastHistory.TransferProof[] memory values = new LibFastHistory.TransferProof[](length);\\n      for (uint256 i = 0; i < length;) {\\n        values[i] = collection[cursor + i];\\n        unchecked { ++i; }\\n      }\\n      return (values, cursor + length);\\n  }\\n}\",\"keccak256\":\"0xb1c624707faa2688853bce5e4ad8e073bb67968a9de5134dfa80bb29fb73c8f4\",\"license\":\"MIT\"},\"contracts/marketplace/MarketplaceAccessFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../lib/LibAddressSet.sol';\\nimport '../lib/LibPaginate.sol';\\nimport '../common/AHasMembers.sol';\\nimport '../issuer/IssuerTopFacet.sol';\\nimport '../interfaces/ICustomErrors.sol';\\nimport '../interfaces/IHasActiveMembers.sol';\\nimport './lib/LibMarketplaceAccess.sol';\\nimport './lib/AMarketplaceFacet.sol';\\nimport './MarketplaceAutomatonsFacet.sol';\\n\\n\\n/**\\n * @title The Marketplace Smart Contract.\\n * @notice The Marketplace Access facet is in charge of keeping track of marketplace members.\\n */\\ncontract MarketplaceAccessFacet is AMarketplaceFacet, AHasMembers, IHasActiveMembers {\\n  using LibAddressSet for LibAddressSet.Data;\\n  /// AHasMembers implementation.\\n\\n  function isMembersManager(address who)\\n      internal view override(AHasMembers) returns(bool) {\\n    return\\n      _isIssuerMember(who) ||\\n      AHasAutomatons(address(this)).automatonCan(who, MARKETPLACE_PRIVILEGE_MANAGE_MEMBERS);\\n  }\\n\\n  function isValidMember(address who)\\n      internal pure override(AHasMembers) returns(bool) {\\n    return who != LibHelpers.ZERO_ADDRESS;\\n  }\\n\\n  function onMemberRemoved(address member)\\n      internal view override(AHasMembers) {\\n    LibMarketplaceAccess.Data storage s = LibMarketplaceAccess.data();\\n    // Ensure that member doesn't have any FAST membership.\\n    if (s.fastMemberships[member].values.length != 0)\\n      revert ICustomErrors.RequiresNoFastMemberships(member);\\n  }\\n\\n  /// FAST memberships functions.\\n\\n  /**\\n   * @notice Allows to query FAST memberships for a given member address.\\n   * @param member Is the address to check.\\n   * @param cursor The index at which to start.\\n   * @param perPage How many records should be returned at most.\\n   */\\n  function fastMemberships(address member, uint256 cursor, uint256 perPage)\\n      external view returns(address[] memory, uint256) {\\n    return LibPaginate.addresses(LibMarketplaceAccess.data().fastMemberships[member].values, cursor, perPage);\\n  }\\n\\n  /**\\n   * @notice Callback from FAST contracts allowing the Marketplace contract to keep track of FAST memberships.\\n   * @param member The member for which a new FAST membership has been added.\\n   */\\n  function memberAddedToFast(address member) \\n      external {\\n    // Verify that the given address is in fact a registered FAST contract.\\n    if (!IssuerTopFacet(LibMarketplace.data().issuer).isFastRegistered(msg.sender)) {\\n      revert ICustomErrors.RequiresFastContractCaller();\\n    }\\n    // Keep track of the member's FAST membership.\\n    LibMarketplaceAccess.data().fastMemberships[member].add(msg.sender, false);\\n  }\\n\\n  /**\\n   * @notice Callback from FAST contracts allowing the Marketplace contract to keep track of FAST memberships.\\n   * @param member The member for which a FAST membership has been removed.\\n   */\\n  function memberRemovedFromFast(address member)\\n      external {\\n    if (!IssuerTopFacet(LibMarketplace.data().issuer).isFastRegistered(msg.sender)) {\\n      revert ICustomErrors.RequiresFastContractCaller();\\n    }\\n    // Remove the tracked membership.\\n    LibMarketplaceAccess.data().fastMemberships[member].remove(msg.sender, false);\\n  }\\n\\n  /// IHasActiveMembers implementation.\\n\\n  /**\\n   * @notice Given a member returns it's activation status.\\n   * @param candidate The address to check activation status on.\\n   */\\n  function isActiveMember(address candidate) external override(IHasActiveMembers) view returns(bool) {\\n    return AHasMembers(address(this)).isMember(candidate) &&\\n           !LibMarketplaceAccess.data().deactivatedMemberSet.contains(candidate);\\n  }\\n\\n  /**\\n   * @notice Activates a member at the Marketplace level.\\n   * @param member The member to remove from the deactivation member set.\\n   */\\n  function activateMember(address member)\\n    external override(IHasActiveMembers)\\n    onlyIssuerMember onlyMember(member) {\\n    // Guard against attempting to activate an already active member.\\n    if (this.isActiveMember(member))\\n      revert ICustomErrors.RequiresMarketplaceDeactivatedMember(member);\\n    // Remove the member from the deactivated members list.\\n    LibMarketplaceAccess.data().deactivatedMemberSet.remove(member, false);\\n    // Emit!\\n    emit MemberActivated(member);\\n  }\\n\\n  /**\\n   * @notice Deactivates a member at the Marketplace level.\\n   * @param member The member to add to the deactivation member set.\\n   */\\n  function deactivateMember(address payable member)\\n    external override(IHasActiveMembers)\\n    onlyIssuerMember onlyMember(member) {\\n    // Guard against attempting to deactivate an already deactivated member.\\n    if (!this.isActiveMember(member))\\n      revert ICustomErrors.RequiresMarketplaceActiveMembership(member);\\n    // Add the member to the deactivated members list.\\n    LibMarketplaceAccess.data().deactivatedMemberSet.add(member, false);\\n    // Emit!\\n    emit MemberDeactivated(member);\\n  }\\n}\\n\",\"keccak256\":\"0x1830eb0a149726988bd69fabc659eed7d95e8aebaa169c7b1afa2ed22b8d50b4\",\"license\":\"MIT\"},\"contracts/marketplace/MarketplaceAutomatonsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport './lib/AMarketplaceFacet.sol';\\nimport '../common/AHasAutomatons.sol';\\n\\n\\n// Privileges bits.\\nuint32 constant MARKETPLACE_PRIVILEGE_MANAGE_MEMBERS = 1;\\n\\n/**\\n * @title The Marketplace Smart Contract.\\n * @notice The Marketplace Automatons facet is in charge of keeping track of automaton accounts.\\n */\\ncontract MarketplaceAutomatonsFacet is AMarketplaceFacet, AHasAutomatons {\\n  /// Automatons management.\\n\\n  function isAutomatonsManager(address who)\\n      internal view override(AHasAutomatons)\\n      returns(bool) {\\n    return _isIssuerMember(who);\\n  }\\n}\\n\",\"keccak256\":\"0x3ea65149b8f82fa95e1efdfc22e9d1e05ed404d595b408dc4cd7c42df190d303\",\"license\":\"MIT\"},\"contracts/marketplace/MarketplaceTokenHoldersFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport './lib/AMarketplaceFacet.sol';\\nimport './lib/LibMarketplaceTokenHolders.sol';\\nimport '../issuer/IssuerTopFacet.sol';\\nimport '../interfaces/IERC20.sol';\\nimport '../interfaces/ICustomErrors.sol';\\n\\n/** @dev The Marketplace FAST balances facet.\\n */\\ncontract MarketplaceTokenHoldersFacet is AMarketplaceFacet {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /** @dev The callback used when a balance changes on a FAST.\\n   */\\n  function fastBalanceChanged(address account, uint256 balance)\\n    external {\\n    // Return early if this is the zero address.\\n    if (account == address(0)) {\\n      return;\\n    }\\n\\n    // Verify that the given address is in fact a registered FAST contract.\\n    if (!IssuerTopFacet(LibMarketplace.data().issuer).isFastRegistered(msg.sender)) {\\n      revert ICustomErrors.RequiresFastContractCaller();\\n    }\\n\\n    // Get the storage pointer and balance of the token holder.\\n    LibMarketplaceTokenHolders.Data storage s = LibMarketplaceTokenHolders.data();\\n\\n    // If this is a positive balance and it doesn't already exist in the set, add address.\\n    if (balance > 0 && !s.fastHoldings[account].contains(msg.sender)) {\\n      s.fastHoldings[account].add(msg.sender, false);\\n    }\\n    // If the balance is 0 and it exists in the set, remove it.\\n    else if (balance == 0 && s.fastHoldings[account].contains(msg.sender)) {\\n      s.fastHoldings[account].remove(msg.sender, false);\\n    }\\n  }\\n\\n  /** @dev A way to get a list of FASTs for an account.\\n   *  @return list of FAST addresses.\\n   */\\n  function holdings(address account)\\n    external view\\n    returns(address[] memory) {\\n    LibMarketplaceTokenHolders.Data storage s = LibMarketplaceTokenHolders.data();\\n    return s.fastHoldings[account].values;\\n  }\\n}\\n\",\"keccak256\":\"0x30acbf3f2be497c90d7f5904a734689c60abed7e9d347009953aeb500b88c0dd\",\"license\":\"MIT\"},\"contracts/marketplace/lib/AMarketplaceFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibHelpers.sol';\\nimport '../../common/AHasMembers.sol';\\nimport '../../interfaces/ICustomErrors.sol';\\nimport '../lib/LibMarketplace.sol';\\nimport './IMarketplaceEvents.sol';\\n\\n\\n/**\\n* @notice This contract is a group of modifiers that can be used by any Marketplace facets to guard against\\n*       certain permissions.\\n*/\\nabstract contract AMarketplaceFacet is IMarketplaceEvents {\\n  /// Internal ACL functions.\\n\\n  function _isIssuerMember(address who)\\n      internal view returns(bool) {\\n    return AHasMembers(LibMarketplace.data().issuer).isMember(who);\\n  }\\n\\n  // Modifiers.\\n\\n  /// @notice Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier onlyDeployer()\\n      virtual {\\n    if (!LibHelpers._isDeployer(msg.sender))\\n      revert ICustomErrors.InternalMethod();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Requires that the message sender is a member of the linked Issuer.\\n   */\\n  modifier onlyIssuerMember()\\n      virtual {\\n    if (!_isIssuerMember(msg.sender))\\n      revert ICustomErrors.RequiresIssuerMembership(msg.sender);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Requires that the given address is a member of the marketplace.\\n   * @param who is the address to be checked.\\n   */\\n  modifier onlyMember(address who)\\n      virtual {\\n    if (!AHasMembers(address(this)).isMember(who))\\n      revert ICustomErrors.RequiresMarketplaceMembership(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xae9b36ca73eede418eb23a646696e37f381546665671b8e498db5cc8657ad2af\",\"license\":\"MIT\"},\"contracts/marketplace/lib/IMarketplaceEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\ninterface IMarketplaceEvents {\\n  /// @dev See `IHasActiveMembers`.\\n  event MemberActivated(address indexed member);\\n  /// @dev See `IHasActiveMembers`.\\n  event MemberDeactivated(address indexed member);\\n}\\n\",\"keccak256\":\"0x0ba156d29699cc3499e8b2acbd2b0bf0a0654b80958c6dde678858fc45e979cb\",\"license\":\"MIT\"},\"contracts/marketplace/lib/LibMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibMarketplace {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Marketplace.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0xb59ec141376cee83f618e10e881bbb4789cdeee27e0d441a8c37ead3cb8b93c1;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice The internal pointer to the Issuer contract.\\n    address issuer;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xc1e77e5ff5f05952b5928fcef4327355dedf57623ca3f7d72fea54021aaa9ed3\",\"license\":\"MIT\"},\"contracts/marketplace/lib/LibMarketplaceAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibMarketplaceAccess {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Marketplace.storage.Access'):\\n  bytes32 internal constant STORAGE_SLOT = 0xecb992c7a1185ca18ac50bc1672192fb67e7c3e74465887a8fcaab265dab37bd;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we keep track of our member FAST memberships.\\n    mapping(address => LibAddressSet.Data) fastMemberships;\\n    /// @notice This is where we keep track of our deactivated memberships.\\n    LibAddressSet.Data deactivatedMemberSet;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xff5c30b26344149a4e076f2a0d42056fb2a147243d62a56b1dadebc201cee8ea\",\"license\":\"MIT\"},\"contracts/marketplace/lib/LibMarketplaceTokenHolders.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../../lib/LibAddressSet.sol';\\n\\n\\nlibrary LibMarketplaceTokenHolders {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Marketplace.TokenHolders.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0xecf50453542504034bd40d376fb1408ada3025f2fe86ca1b9b4b1440b8d4a2f4;\\n\\n  struct Data {\\n    /// @dev The latest intializer version that was called.\\n    uint16 version;\\n    /// @dev The tracked FAST holdings of a user.\\n    mapping(address => LibAddressSet.Data) fastHoldings;\\n  }\\n\\n  function data()\\n      internal pure returns(Data storage s) {\\n    assembly {s.slot := STORAGE_SLOT}\\n  }\\n}\\n\",\"keccak256\":\"0xbf26680c8a06a75be462cf155feb163863762646239ec5ad26ca91abc52ae10c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613882806100206000396000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c806370a08231116100e35780639c999d901161008c578063dd62ed3e11610066578063dd62ed3e1461044f578063e8edd0e314610462578063fbabdb061461047557600080fd5b80639c999d9014610416578063a9059cbb14610429578063c485bb961461043c57600080fd5b80638188f71c116100bd5780638188f71c146103a157806381a8f243146103b657806395d89b411461040e57600080fd5b806370a08231146103265780637641e6f31461037b57806377097fc81461038e57600080fd5b8063313ce567116101455780635480699a1161011f5780635480699a146102ed5780635d7b590f146103005780636bd7bd251461031357600080fd5b8063313ce5671461029b5780633a868224146102c557806344890ae0146102da57600080fd5b806318160ddd1161017657806318160ddd146102405780631fe02e531461026757806323b872dd1461028857600080fd5b806306675ba71461019d57806306fdde0314610208578063095ea7b31461021d575b600080fd5b6101f56101ab3660046130bc565b73ffffffffffffffffffffffffffffffffffffffff1660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8269602052604090206001015490565b6040519081526020015b60405180910390f35b610210610488565b6040516101ff9190613142565b61023061022b366004613155565b61053c565b60405190151581526020016101ff565b7fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8265546101f5565b61027a61027536600461317f565b6105d7565b6040516101ff929190613203565b610230610296366004613225565b610639565b7fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb82645460ff166101f5565b6102d86102d33660046130bc565b610687565b005b6102d86102e8366004613261565b610a40565b6102d86102fb366004613225565b6116dd565b6102d861030e3660046130bc565b61191e565b6102d8610321366004613225565b611c3f565b6101f56103343660046130bc565b73ffffffffffffffffffffffffffffffffffffffff1660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8267602052604090205490565b6102d86103893660046132e5565b611e08565b6102d861039c3660046132e5565b612055565b6103a9612332565b6040516101ff9190613331565b6101f56103c43660046130bc565b73ffffffffffffffffffffffffffffffffffffffff1660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826a602052604090206001015490565b6102106123c4565b61027a61042436600461317f565b6123f5565b610230610437366004613155565b61244b565b61023061044a366004613373565b6124f8565b6101f561045d36600461346d565b6125af565b6102306104703660046134a0565b612721565b610230610483366004613155565b612815565b60607fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826160010180546104b9906134fa565b80601f01602080910402602001604051908101604052809291908181526020018280546104e5906134fa565b80156105325780601f1061050757610100808354040283529160200191610532565b820191906000526020600020905b81548152906001019060200180831161051557829003601f168201915b5050505050905090565b6040517f5480699a00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526000903090635480699a906064015b600060405180830381600087803b1580156105b457600080fd5b505af11580156105c8573d6000803e3d6000fd5b50505050600190505b92915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8269602052604081206060919061062d906001018585612976565b91509150935093915050565b600061067c8484846040518060400160405280601781526020017f556e737065636966696564202d207669612045524332300000000000000000008152506124f8565b506001949350505050565b61069033612a97565b6106cd576040517f1dd41c4d0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826760205260409020547fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261811561079a5773ffffffffffffffffffffffffffffffffffffffff831660009081526006820160205260408082208290558180528120805484929061077990849061357d565b92505081905550818160040160008282546107949190613595565b90915550505b6107a9600a8201846001612b52565b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705600101546040517fc2a11fb300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152600060248301529091169063c2a11fb390604401600060405180830381600087803b15801561083f57600080fd5b505af1158015610853573d6000803e3d6000fd5b5050604080518082018252601581527f4465616420746f6b656e732072657472696576616c0000000000000000000000602082015290517feee2dcc300000000000000000000000000000000000000000000000000000000815230935063eee2dcc392506108cd91339188916000918991906004016135ac565b600060405180830381600087803b1580156108e757600080fd5b505af11580156108fb573d6000803e3d6000fd5b5050604080518082018252601581527f4465616420746f6b656e732072657472696576616c0000000000000000000000602082015290516000935073ffffffffffffffffffffffffffffffffffffffff8716925033917fd890e39fdd8907232d28ae76e6ece0a56e47c6ef82d597baf26787fef211d8d59161097e9188916135fe565b60405180910390a460405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a38115610a3b573073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a2257600080fd5b505af1158015610a36573d6000803e3d6000fd5b505050505b505050565b303314610a79576040517f12e9ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e70590503073ffffffffffffffffffffffffffffffffffffffff1663034cd7256040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0d919061361f565b15610b44576040517f5bcaa04c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b5460608301604084016130bc565b73ffffffffffffffffffffffffffffffffffffffff16610b7a60408401602085016130bc565b73ffffffffffffffffffffffffffffffffffffffff161415610bf157610ba660408301602084016130bc565b6040517f6b3dcdc100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016106c4565b6000610c0360408401602085016130bc565b73ffffffffffffffffffffffffffffffffffffffff16148015610ce05750805462010000900473ffffffffffffffffffffffffffffffffffffffff1663a230c524610c5160208501856130bc565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa158015610cba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cde919061361f565b155b15610d3d57610cf260208301836130bc565b6040517f1dd41c4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016106c4565b610d55610d5060408401602085016130bc565b612d2a565b610db457610d6960408301602084016130bc565b6040517fe4104ebc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016106c4565b6000610dc660408401602085016130bc565b73ffffffffffffffffffffffffffffffffffffffff1614158015610ec157507f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e7065473ffffffffffffffffffffffffffffffffffffffff166345ecd02f610e3260408501602086016130bc565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebf919061361f565b155b15610f2157610ed660408301602084016130bc565b6040517f14c469d300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016106c4565b610f34610d5060608401604085016130bc565b610f4857610d6960608301604084016130bc565b6060820135156114fe577fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261610f8360408401602085016130bc565b73ffffffffffffffffffffffffffffffffffffffff16610fa660208501856130bc565b73ffffffffffffffffffffffffffffffffffffffff1614158015610ff057506000610fd760408501602086016130bc565b73ffffffffffffffffffffffffffffffffffffffff1614155b1561111c5760006060840135600783018261101160408801602089016130bc565b73ffffffffffffffffffffffffffffffffffffffff168152602080820192909252604001600090812091611047908801886130bc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110909190613595565b91829055509150508061111a576110f26110ad60208601866130bc565b60016008850160006110c560408a0160208b016130bc565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000209190612b52565b61111a61110560408601602087016130bc565b60016009850160006110c560208a018a6130bc565b505b60006060840135600683018261113860408801602089016130bc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111819190613595565b9250508190559050600084606001358360060160008760400160208101906111a991906130bc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111f2919061357d565b9182905550600186015490925073ffffffffffffffffffffffffffffffffffffffff16905063c2a11fb361122c60408801602089016130bc565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101859052604401600060405180830381600087803b15801561129957600080fd5b505af11580156112ad573d6000803e3d6000fd5b50505050600184015473ffffffffffffffffffffffffffffffffffffffff1663c2a11fb36112e160608801604089016130bc565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101849052604401600060405180830381600087803b15801561134e57600080fd5b505af1158015611362573d6000803e3d6000fd5b50611381925061137b91505060408701602088016130bc565b83612e91565b61139a61139460608701604088016130bc565b82612e91565b60006113ac60608701604088016130bc565b73ffffffffffffffffffffffffffffffffffffffff16141561144c5784606001358360040160008282546113e09190613595565b925050819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561142f57600080fd5b505af1158015611443573d6000803e3d6000fd5b505050506114fa565b600061145e60408701602088016130bc565b73ffffffffffffffffffffffffffffffffffffffff1614156114fa578460600135836004016000828254611492919061357d565b925050819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156114e157600080fd5b505af11580156114f5573d6000803e3d6000fd5b505050505b5050505b3063eee2dcc361151160208501856130bc565b61152160408601602087016130bc565b61153160608701604088016130bc565b60608701356115436080890189613641565b6040518763ffffffff1660e01b8152600401611564969594939291906136ef565b600060405180830381600087803b15801561157e57600080fd5b505af1158015611592573d6000803e3d6000fd5b506115a79250505060608301604084016130bc565b73ffffffffffffffffffffffffffffffffffffffff166115cd60408401602085016130bc565b73ffffffffffffffffffffffffffffffffffffffff166115f060208501856130bc565b73ffffffffffffffffffffffffffffffffffffffff167fd890e39fdd8907232d28ae76e6ece0a56e47c6ef82d597baf26787fef211d8d560608601356116396080880188613641565b60405161164893929190613743565b60405180910390a461166060608301604084016130bc565b73ffffffffffffffffffffffffffffffffffffffff1661168660408401602085016130bc565b73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84606001356040516116d191815260200190565b60405180910390a35050565b303314611716576040517f12e9ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316611763576040517f9ba6061b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61176c83612d2a565b6117ba576040517fe4104ebc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016106c4565b80156118b25773ffffffffffffffffffffffffffffffffffffffff83811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826860209081526040808320938616835292905290812080547fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb82619284929161184590849061357d565b909155505073ffffffffffffffffffffffffffffffffffffffff84166000908152600882016020526040902061187d90846001612f28565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260098201602052604090206118b090856001612f28565b505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161191191815260200190565b60405180910390a3505050565b303314611957576040517f12e9ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb82676020526040902054156119eb576040517fd90c787400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016106c4565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8269602052604090207fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261906001015b805415611b3557600081600081548110611a7157611a71613766565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff87811680855260078801845260408086209290931680865291909352928190205490517f6bd7bd2500000000000000000000000000000000000000000000000000000000815260048101929092526024820183905260448201529091503090636bd7bd2590606401600060405180830381600087803b158015611b1757600080fd5b505af1158015611b2b573d6000803e3d6000fd5b5050505050611a55565b5073ffffffffffffffffffffffffffffffffffffffff8216600090815260098201602052604090206001015b805415610a3b57600081600081548110611b7d57611b7d613766565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff9081168084526007870183526040808520928916808652929093528284205483517f6bd7bd25000000000000000000000000000000000000000000000000000000008152600481018390526024810193909352604483015291519193503092636bd7bd259260648084019382900301818387803b158015611c2157600080fd5b505af1158015611c35573d6000803e3d6000fd5b5050505050611b61565b303314611c78576040517f12e9ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015611da95773ffffffffffffffffffffffffffffffffffffffff83811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826860209081526040808320938616835292905290812080547fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826192849291611d03908490613595565b909155505073ffffffffffffffffffffffffffffffffffffffff8085166000908152600783016020908152604080832093871683529290522054611da75773ffffffffffffffffffffffffffffffffffffffff841660009081526008820160205260409020611d7490846001612b52565b73ffffffffffffffffffffffffffffffffffffffff831660009081526009820160205260409020611da790856001612b52565b505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f94f4f5b45267f5e7454476505db5fe3cbb2ad25868e26303b8fc7c5074ba58908360405161191191815260200190565b611e1133612a97565b611e49576040517f1dd41c4d0000000000000000000000000000000000000000000000000000000081523360048201526024016106c4565b60007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826190503073ffffffffffffffffffffffffffffffffffffffff1663ddb2d22b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edd919061361f565b15611f14576040517f12aebbbc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080805260068201602052604081208054869290611f34908490613595565b90915550506040517ff4c1210c000000000000000000000000000000000000000000000000000000008152309063f4c1210c90611f7990879087908790600401613743565b600060405180830381600087803b158015611f9357600080fd5b505af1158015611fa7573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611ff357600080fd5b505af1158015612007573d6000803e3d6000fd5b505060405133925061201d915085908590613795565b6040519081900381209086907f5ff47d76c9322f177ff7059963be58d30339f275e98dc74e464d2070a8138acd90600090a450505050565b61205e33612a97565b612096576040517f1dd41c4d0000000000000000000000000000000000000000000000000000000081523360048201526024016106c4565b60007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826190503073ffffffffffffffffffffffffffffffffffffffff1663ddb2d22b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212a919061361f565b80156121ba575060048101541515806121ba57506040517f70a082310000000000000000000000000000000000000000000000000000000081526000600482015230906370a0823190602401602060405180830381865afa158015612193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b791906137a5565b15155b156121f1576040517f12aebbbc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080526006820160205260408120805486929061221190849061357d565b90915550506040517faf2e757b000000000000000000000000000000000000000000000000000000008152309063af2e757b9061225690879087908790600401613743565b600060405180830381600087803b15801561227057600080fd5b505af1158015612284573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156122d057600080fd5b505af11580156122e4573d6000803e3d6000fd5b50506040513392506122fa915085908590613795565b6040519081900381209086907fc1177815a22ab58cdf6e40a80dfe322e9d00b7977bd78634869752fed8082f5690600090a450505050565b606060007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261600b81018054604080516020808402820181019092528281529394508301828280156123b957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161238e575b505050505091505090565b60607fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826160020180546104b9906134fa565b73ffffffffffffffffffffffffffffffffffffffff831660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826a602052604081206060919061062d906001018585612976565b6040805160a0810182523380825260208083019190915273ffffffffffffffffffffffffffffffffffffffff8516828401526060820184905282518084018452601781527f556e737065636966696564202d2076696120455243323000000000000000000091810191909152608082015290517f44890ae000000000000000000000000000000000000000000000000000000000815260009130916344890ae09161059a916004016137be565b6040805160a08101825233815273ffffffffffffffffffffffffffffffffffffffff8681166020830152851681830152606081018490526080810183905290517f44890ae000000000000000000000000000000000000000000000000000000000815260009130916344890ae091612572916004016137be565b600060405180830381600087803b15801561258c57600080fd5b505af11580156125a0573d6000803e3d6000fd5b50600198975050505050505050565b60007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826173ffffffffffffffffffffffffffffffffffffffff84166126e3577f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705546040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152620100009092049091169063a230c52490602401602060405180830381865afa158015612683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a7919061361f565b6126b25760006126db565b73ffffffffffffffffffffffffffffffffffffffff841660009081526006820160205260409020545b9150506105d1565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600790920160209081526040808420928616845291905290205490506105d1565b60003073ffffffffffffffffffffffffffffffffffffffff166344890ae06040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815261257291906004016137be565b6040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201819052600091309063a230c52490602401602060405180830381865afa15801561286e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612892919061361f565b6128e0576040517fb8c6719e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016106c4565b6040517f6bd7bd2500000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff85166024820152604481018490523090636bd7bd2590606401600060405180830381600087803b15801561295457600080fd5b505af1158015612968573d6000803e3d6000fd5b506001979650505050505050565b606060008084868054905061298b9190613595565b841161299757836129a4565b85546129a4908690613595565b905060008167ffffffffffffffff8111156129c1576129c1613344565b6040519080825280602002602001820160405280156129ea578160200160208202803683370190505b50905060005b82811015612a7d5787612a03828961357d565b81548110612a1357612a13613766565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110612a5057612a50613766565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016129f0565b5080612a89838861357d565b935093505050935093915050565b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705546040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152600092620100009004169063a230c524906024015b602060405180830381865afa158015612b2e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d1919061361f565b6000612b5e848461301c565b9050818015612b6b575080155b15612b765750505050565b80612bdd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4164647265737320646f6573206e6f7420657869737420696e2073657400000060448201526064016106c4565b60018085018054600092612bf091613595565b81548110612c0057612c00613766565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff878116845291889052604080842054929091168084529220819055600187018054929350909183919083908110612c5c57612c5c613766565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff948516179055918716815290879052604081205560018601805480612cca57612cca61381d565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8216612d4f57506001919050565b3073ffffffffffffffffffffffffffffffffffffffff166311e549336040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dbe919061361f565b15612e3a577f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e706546040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529091169063a230c52490602401612b11565b6040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152309063a230c52490602401612b11565b919050565b73ffffffffffffffffffffffffffffffffffffffff8216612eb0575050565b7fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb82618115801590612eea5750612ee8600a82018461301c565b155b15612efe57610a3b600a8201846000612f28565b81158015612f145750612f14600a82018461301c565b15610a3b57610a3b600a8201846000612b52565b6000612f34848461301c565b9050818015612f405750805b15612f4b5750505050565b8015612fb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4164647265737320616c726561647920696e207365740000000000000000000060448201526064016106c4565b50506001808301805473ffffffffffffffffffffffffffffffffffffffff909316600081815260209586526040812085905592840182559082529290200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b60018201546000901561308e5773ffffffffffffffffffffffffffffffffffffffff8216600081815260208590526040902054600185018054909190811061306657613066613766565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614613091565b60005b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114612e8c57600080fd5b6000602082840312156130ce57600080fd5b61309182613098565b6000815180845260005b818110156130fd576020818501810151868301820152016130e1565b8181111561310f576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061309160208301846130d7565b6000806040838503121561316857600080fd5b61317183613098565b946020939093013593505050565b60008060006060848603121561319457600080fd5b61319d84613098565b95602085013595506040909401359392505050565b600081518084526020808501945080840160005b838110156131f857815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016131c6565b509495945050505050565b60408152600061321660408301856131b2565b90508260208301529392505050565b60008060006060848603121561323a57600080fd5b61324384613098565b925061325160208501613098565b9150604084013590509250925092565b60006020828403121561327357600080fd5b813567ffffffffffffffff81111561328a57600080fd5b820160a0818503121561309157600080fd5b60008083601f8401126132ae57600080fd5b50813567ffffffffffffffff8111156132c657600080fd5b6020830191508360208285010111156132de57600080fd5b9250929050565b6000806000604084860312156132fa57600080fd5b83359250602084013567ffffffffffffffff81111561331857600080fd5b6133248682870161329c565b9497909650939450505050565b60208152600061309160208301846131b2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000806080858703121561338957600080fd5b61339285613098565b93506133a060208601613098565b925060408501359150606085013567ffffffffffffffff808211156133c457600080fd5b818701915087601f8301126133d857600080fd5b8135818111156133ea576133ea613344565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561343057613430613344565b816040528281528a602084870101111561344957600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561348057600080fd5b61348983613098565b915061349760208401613098565b90509250929050565b600080600080606085870312156134b657600080fd5b6134bf85613098565b935060208501359250604085013567ffffffffffffffff8111156134e257600080fd5b6134ee8782880161329c565b95989497509550505050565b600181811c9082168061350e57607f821691505b60208210811415613548577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156135905761359061354e565b500190565b6000828210156135a7576135a761354e565b500390565b600073ffffffffffffffffffffffffffffffffffffffff8088168352808716602084015280861660408401525083606083015260a060808301526135f360a08301846130d7565b979650505050505050565b82815260406020820152600061361760408301846130d7565b949350505050565b60006020828403121561363157600080fd5b8151801515811461309157600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261367657600080fd5b83018035915067ffffffffffffffff82111561369157600080fd5b6020019150368190038213156132de57600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600073ffffffffffffffffffffffffffffffffffffffff8089168352808816602084015280871660408401525084606083015260a0608083015261373760a0830184866136a6565b98975050505050505050565b83815260406020820152600061375d6040830184866136a6565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8183823760009101908152919050565b6000602082840312156137b757600080fd5b5051919050565b60208152600073ffffffffffffffffffffffffffffffffffffffff8084511660208401528060208501511660408401528060408501511660608401525060608301516080830152608083015160a08084015261361760c08401826130d7565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122098153887a71676bbcdc9275a6759d997d4d99f2d1e66ffd1631150e2d0e5477264736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101985760003560e01c806370a08231116100e35780639c999d901161008c578063dd62ed3e11610066578063dd62ed3e1461044f578063e8edd0e314610462578063fbabdb061461047557600080fd5b80639c999d9014610416578063a9059cbb14610429578063c485bb961461043c57600080fd5b80638188f71c116100bd5780638188f71c146103a157806381a8f243146103b657806395d89b411461040e57600080fd5b806370a08231146103265780637641e6f31461037b57806377097fc81461038e57600080fd5b8063313ce567116101455780635480699a1161011f5780635480699a146102ed5780635d7b590f146103005780636bd7bd251461031357600080fd5b8063313ce5671461029b5780633a868224146102c557806344890ae0146102da57600080fd5b806318160ddd1161017657806318160ddd146102405780631fe02e531461026757806323b872dd1461028857600080fd5b806306675ba71461019d57806306fdde0314610208578063095ea7b31461021d575b600080fd5b6101f56101ab3660046130bc565b73ffffffffffffffffffffffffffffffffffffffff1660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8269602052604090206001015490565b6040519081526020015b60405180910390f35b610210610488565b6040516101ff9190613142565b61023061022b366004613155565b61053c565b60405190151581526020016101ff565b7fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8265546101f5565b61027a61027536600461317f565b6105d7565b6040516101ff929190613203565b610230610296366004613225565b610639565b7fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb82645460ff166101f5565b6102d86102d33660046130bc565b610687565b005b6102d86102e8366004613261565b610a40565b6102d86102fb366004613225565b6116dd565b6102d861030e3660046130bc565b61191e565b6102d8610321366004613225565b611c3f565b6101f56103343660046130bc565b73ffffffffffffffffffffffffffffffffffffffff1660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8267602052604090205490565b6102d86103893660046132e5565b611e08565b6102d861039c3660046132e5565b612055565b6103a9612332565b6040516101ff9190613331565b6101f56103c43660046130bc565b73ffffffffffffffffffffffffffffffffffffffff1660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826a602052604090206001015490565b6102106123c4565b61027a61042436600461317f565b6123f5565b610230610437366004613155565b61244b565b61023061044a366004613373565b6124f8565b6101f561045d36600461346d565b6125af565b6102306104703660046134a0565b612721565b610230610483366004613155565b612815565b60607fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826160010180546104b9906134fa565b80601f01602080910402602001604051908101604052809291908181526020018280546104e5906134fa565b80156105325780601f1061050757610100808354040283529160200191610532565b820191906000526020600020905b81548152906001019060200180831161051557829003601f168201915b5050505050905090565b6040517f5480699a00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526000903090635480699a906064015b600060405180830381600087803b1580156105b457600080fd5b505af11580156105c8573d6000803e3d6000fd5b50505050600190505b92915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8269602052604081206060919061062d906001018585612976565b91509150935093915050565b600061067c8484846040518060400160405280601781526020017f556e737065636966696564202d207669612045524332300000000000000000008152506124f8565b506001949350505050565b61069033612a97565b6106cd576040517f1dd41c4d0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826760205260409020547fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261811561079a5773ffffffffffffffffffffffffffffffffffffffff831660009081526006820160205260408082208290558180528120805484929061077990849061357d565b92505081905550818160040160008282546107949190613595565b90915550505b6107a9600a8201846001612b52565b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705600101546040517fc2a11fb300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152600060248301529091169063c2a11fb390604401600060405180830381600087803b15801561083f57600080fd5b505af1158015610853573d6000803e3d6000fd5b5050604080518082018252601581527f4465616420746f6b656e732072657472696576616c0000000000000000000000602082015290517feee2dcc300000000000000000000000000000000000000000000000000000000815230935063eee2dcc392506108cd91339188916000918991906004016135ac565b600060405180830381600087803b1580156108e757600080fd5b505af11580156108fb573d6000803e3d6000fd5b5050604080518082018252601581527f4465616420746f6b656e732072657472696576616c0000000000000000000000602082015290516000935073ffffffffffffffffffffffffffffffffffffffff8716925033917fd890e39fdd8907232d28ae76e6ece0a56e47c6ef82d597baf26787fef211d8d59161097e9188916135fe565b60405180910390a460405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a38115610a3b573073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a2257600080fd5b505af1158015610a36573d6000803e3d6000fd5b505050505b505050565b303314610a79576040517f12e9ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e70590503073ffffffffffffffffffffffffffffffffffffffff1663034cd7256040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0d919061361f565b15610b44576040517f5bcaa04c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b5460608301604084016130bc565b73ffffffffffffffffffffffffffffffffffffffff16610b7a60408401602085016130bc565b73ffffffffffffffffffffffffffffffffffffffff161415610bf157610ba660408301602084016130bc565b6040517f6b3dcdc100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016106c4565b6000610c0360408401602085016130bc565b73ffffffffffffffffffffffffffffffffffffffff16148015610ce05750805462010000900473ffffffffffffffffffffffffffffffffffffffff1663a230c524610c5160208501856130bc565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa158015610cba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cde919061361f565b155b15610d3d57610cf260208301836130bc565b6040517f1dd41c4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016106c4565b610d55610d5060408401602085016130bc565b612d2a565b610db457610d6960408301602084016130bc565b6040517fe4104ebc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016106c4565b6000610dc660408401602085016130bc565b73ffffffffffffffffffffffffffffffffffffffff1614158015610ec157507f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e7065473ffffffffffffffffffffffffffffffffffffffff166345ecd02f610e3260408501602086016130bc565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebf919061361f565b155b15610f2157610ed660408301602084016130bc565b6040517f14c469d300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016106c4565b610f34610d5060608401604085016130bc565b610f4857610d6960608301604084016130bc565b6060820135156114fe577fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261610f8360408401602085016130bc565b73ffffffffffffffffffffffffffffffffffffffff16610fa660208501856130bc565b73ffffffffffffffffffffffffffffffffffffffff1614158015610ff057506000610fd760408501602086016130bc565b73ffffffffffffffffffffffffffffffffffffffff1614155b1561111c5760006060840135600783018261101160408801602089016130bc565b73ffffffffffffffffffffffffffffffffffffffff168152602080820192909252604001600090812091611047908801886130bc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110909190613595565b91829055509150508061111a576110f26110ad60208601866130bc565b60016008850160006110c560408a0160208b016130bc565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000209190612b52565b61111a61110560408601602087016130bc565b60016009850160006110c560208a018a6130bc565b505b60006060840135600683018261113860408801602089016130bc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111819190613595565b9250508190559050600084606001358360060160008760400160208101906111a991906130bc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111f2919061357d565b9182905550600186015490925073ffffffffffffffffffffffffffffffffffffffff16905063c2a11fb361122c60408801602089016130bc565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101859052604401600060405180830381600087803b15801561129957600080fd5b505af11580156112ad573d6000803e3d6000fd5b50505050600184015473ffffffffffffffffffffffffffffffffffffffff1663c2a11fb36112e160608801604089016130bc565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101849052604401600060405180830381600087803b15801561134e57600080fd5b505af1158015611362573d6000803e3d6000fd5b50611381925061137b91505060408701602088016130bc565b83612e91565b61139a61139460608701604088016130bc565b82612e91565b60006113ac60608701604088016130bc565b73ffffffffffffffffffffffffffffffffffffffff16141561144c5784606001358360040160008282546113e09190613595565b925050819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561142f57600080fd5b505af1158015611443573d6000803e3d6000fd5b505050506114fa565b600061145e60408701602088016130bc565b73ffffffffffffffffffffffffffffffffffffffff1614156114fa578460600135836004016000828254611492919061357d565b925050819055503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156114e157600080fd5b505af11580156114f5573d6000803e3d6000fd5b505050505b5050505b3063eee2dcc361151160208501856130bc565b61152160408601602087016130bc565b61153160608701604088016130bc565b60608701356115436080890189613641565b6040518763ffffffff1660e01b8152600401611564969594939291906136ef565b600060405180830381600087803b15801561157e57600080fd5b505af1158015611592573d6000803e3d6000fd5b506115a79250505060608301604084016130bc565b73ffffffffffffffffffffffffffffffffffffffff166115cd60408401602085016130bc565b73ffffffffffffffffffffffffffffffffffffffff166115f060208501856130bc565b73ffffffffffffffffffffffffffffffffffffffff167fd890e39fdd8907232d28ae76e6ece0a56e47c6ef82d597baf26787fef211d8d560608601356116396080880188613641565b60405161164893929190613743565b60405180910390a461166060608301604084016130bc565b73ffffffffffffffffffffffffffffffffffffffff1661168660408401602085016130bc565b73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84606001356040516116d191815260200190565b60405180910390a35050565b303314611716576040517f12e9ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316611763576040517f9ba6061b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61176c83612d2a565b6117ba576040517fe4104ebc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016106c4565b80156118b25773ffffffffffffffffffffffffffffffffffffffff83811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826860209081526040808320938616835292905290812080547fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb82619284929161184590849061357d565b909155505073ffffffffffffffffffffffffffffffffffffffff84166000908152600882016020526040902061187d90846001612f28565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260098201602052604090206118b090856001612f28565b505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161191191815260200190565b60405180910390a3505050565b303314611957576040517f12e9ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb82676020526040902054156119eb576040517fd90c787400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016106c4565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8269602052604090207fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261906001015b805415611b3557600081600081548110611a7157611a71613766565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff87811680855260078801845260408086209290931680865291909352928190205490517f6bd7bd2500000000000000000000000000000000000000000000000000000000815260048101929092526024820183905260448201529091503090636bd7bd2590606401600060405180830381600087803b158015611b1757600080fd5b505af1158015611b2b573d6000803e3d6000fd5b5050505050611a55565b5073ffffffffffffffffffffffffffffffffffffffff8216600090815260098201602052604090206001015b805415610a3b57600081600081548110611b7d57611b7d613766565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff9081168084526007870183526040808520928916808652929093528284205483517f6bd7bd25000000000000000000000000000000000000000000000000000000008152600481018390526024810193909352604483015291519193503092636bd7bd259260648084019382900301818387803b158015611c2157600080fd5b505af1158015611c35573d6000803e3d6000fd5b5050505050611b61565b303314611c78576040517f12e9ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015611da95773ffffffffffffffffffffffffffffffffffffffff83811660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826860209081526040808320938616835292905290812080547fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826192849291611d03908490613595565b909155505073ffffffffffffffffffffffffffffffffffffffff8085166000908152600783016020908152604080832093871683529290522054611da75773ffffffffffffffffffffffffffffffffffffffff841660009081526008820160205260409020611d7490846001612b52565b73ffffffffffffffffffffffffffffffffffffffff831660009081526009820160205260409020611da790856001612b52565b505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f94f4f5b45267f5e7454476505db5fe3cbb2ad25868e26303b8fc7c5074ba58908360405161191191815260200190565b611e1133612a97565b611e49576040517f1dd41c4d0000000000000000000000000000000000000000000000000000000081523360048201526024016106c4565b60007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826190503073ffffffffffffffffffffffffffffffffffffffff1663ddb2d22b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edd919061361f565b15611f14576040517f12aebbbc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080805260068201602052604081208054869290611f34908490613595565b90915550506040517ff4c1210c000000000000000000000000000000000000000000000000000000008152309063f4c1210c90611f7990879087908790600401613743565b600060405180830381600087803b158015611f9357600080fd5b505af1158015611fa7573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611ff357600080fd5b505af1158015612007573d6000803e3d6000fd5b505060405133925061201d915085908590613795565b6040519081900381209086907f5ff47d76c9322f177ff7059963be58d30339f275e98dc74e464d2070a8138acd90600090a450505050565b61205e33612a97565b612096576040517f1dd41c4d0000000000000000000000000000000000000000000000000000000081523360048201526024016106c4565b60007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826190503073ffffffffffffffffffffffffffffffffffffffff1663ddb2d22b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212a919061361f565b80156121ba575060048101541515806121ba57506040517f70a082310000000000000000000000000000000000000000000000000000000081526000600482015230906370a0823190602401602060405180830381865afa158015612193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b791906137a5565b15155b156121f1576040517f12aebbbc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080526006820160205260408120805486929061221190849061357d565b90915550506040517faf2e757b000000000000000000000000000000000000000000000000000000008152309063af2e757b9061225690879087908790600401613743565b600060405180830381600087803b15801561227057600080fd5b505af1158015612284573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff16634f2274c06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156122d057600080fd5b505af11580156122e4573d6000803e3d6000fd5b50506040513392506122fa915085908590613795565b6040519081900381209086907fc1177815a22ab58cdf6e40a80dfe322e9d00b7977bd78634869752fed8082f5690600090a450505050565b606060007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb8261600b81018054604080516020808402820181019092528281529394508301828280156123b957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161238e575b505050505091505090565b60607fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826160020180546104b9906134fa565b73ffffffffffffffffffffffffffffffffffffffff831660009081527fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826a602052604081206060919061062d906001018585612976565b6040805160a0810182523380825260208083019190915273ffffffffffffffffffffffffffffffffffffffff8516828401526060820184905282518084018452601781527f556e737065636966696564202d2076696120455243323000000000000000000091810191909152608082015290517f44890ae000000000000000000000000000000000000000000000000000000000815260009130916344890ae09161059a916004016137be565b6040805160a08101825233815273ffffffffffffffffffffffffffffffffffffffff8681166020830152851681830152606081018490526080810183905290517f44890ae000000000000000000000000000000000000000000000000000000000815260009130916344890ae091612572916004016137be565b600060405180830381600087803b15801561258c57600080fd5b505af11580156125a0573d6000803e3d6000fd5b50600198975050505050505050565b60007fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb826173ffffffffffffffffffffffffffffffffffffffff84166126e3577f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705546040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152620100009092049091169063a230c52490602401602060405180830381865afa158015612683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a7919061361f565b6126b25760006126db565b73ffffffffffffffffffffffffffffffffffffffff841660009081526006820160205260409020545b9150506105d1565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600790920160209081526040808420928616845291905290205490506105d1565b60003073ffffffffffffffffffffffffffffffffffffffff166344890ae06040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815261257291906004016137be565b6040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201819052600091309063a230c52490602401602060405180830381865afa15801561286e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612892919061361f565b6128e0576040517fb8c6719e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016106c4565b6040517f6bd7bd2500000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff85166024820152604481018490523090636bd7bd2590606401600060405180830381600087803b15801561295457600080fd5b505af1158015612968573d6000803e3d6000fd5b506001979650505050505050565b606060008084868054905061298b9190613595565b841161299757836129a4565b85546129a4908690613595565b905060008167ffffffffffffffff8111156129c1576129c1613344565b6040519080825280602002602001820160405280156129ea578160200160208202803683370190505b50905060005b82811015612a7d5787612a03828961357d565b81548110612a1357612a13613766565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110612a5057612a50613766565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016129f0565b5080612a89838861357d565b935093505050935093915050565b7f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e705546040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152600092620100009004169063a230c524906024015b602060405180830381865afa158015612b2e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d1919061361f565b6000612b5e848461301c565b9050818015612b6b575080155b15612b765750505050565b80612bdd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4164647265737320646f6573206e6f7420657869737420696e2073657400000060448201526064016106c4565b60018085018054600092612bf091613595565b81548110612c0057612c00613766565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff878116845291889052604080842054929091168084529220819055600187018054929350909183919083908110612c5c57612c5c613766565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff948516179055918716815290879052604081205560018601805480612cca57612cca61381d565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8216612d4f57506001919050565b3073ffffffffffffffffffffffffffffffffffffffff166311e549336040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dbe919061361f565b15612e3a577f80c187ea6f955fd624c41fb7a18011cc87d98c6f4c06d897b59142f65707e706546040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529091169063a230c52490602401612b11565b6040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152309063a230c52490602401612b11565b919050565b73ffffffffffffffffffffffffffffffffffffffff8216612eb0575050565b7fb098747b87c5c0e2a32eb9b06725e9bad4263809bcda628ceadc1a686bcb82618115801590612eea5750612ee8600a82018461301c565b155b15612efe57610a3b600a8201846000612f28565b81158015612f145750612f14600a82018461301c565b15610a3b57610a3b600a8201846000612b52565b6000612f34848461301c565b9050818015612f405750805b15612f4b5750505050565b8015612fb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4164647265737320616c726561647920696e207365740000000000000000000060448201526064016106c4565b50506001808301805473ffffffffffffffffffffffffffffffffffffffff909316600081815260209586526040812085905592840182559082529290200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b60018201546000901561308e5773ffffffffffffffffffffffffffffffffffffffff8216600081815260208590526040902054600185018054909190811061306657613066613766565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614613091565b60005b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114612e8c57600080fd5b6000602082840312156130ce57600080fd5b61309182613098565b6000815180845260005b818110156130fd576020818501810151868301820152016130e1565b8181111561310f576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061309160208301846130d7565b6000806040838503121561316857600080fd5b61317183613098565b946020939093013593505050565b60008060006060848603121561319457600080fd5b61319d84613098565b95602085013595506040909401359392505050565b600081518084526020808501945080840160005b838110156131f857815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016131c6565b509495945050505050565b60408152600061321660408301856131b2565b90508260208301529392505050565b60008060006060848603121561323a57600080fd5b61324384613098565b925061325160208501613098565b9150604084013590509250925092565b60006020828403121561327357600080fd5b813567ffffffffffffffff81111561328a57600080fd5b820160a0818503121561309157600080fd5b60008083601f8401126132ae57600080fd5b50813567ffffffffffffffff8111156132c657600080fd5b6020830191508360208285010111156132de57600080fd5b9250929050565b6000806000604084860312156132fa57600080fd5b83359250602084013567ffffffffffffffff81111561331857600080fd5b6133248682870161329c565b9497909650939450505050565b60208152600061309160208301846131b2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000806080858703121561338957600080fd5b61339285613098565b93506133a060208601613098565b925060408501359150606085013567ffffffffffffffff808211156133c457600080fd5b818701915087601f8301126133d857600080fd5b8135818111156133ea576133ea613344565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561343057613430613344565b816040528281528a602084870101111561344957600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561348057600080fd5b61348983613098565b915061349760208401613098565b90509250929050565b600080600080606085870312156134b657600080fd5b6134bf85613098565b935060208501359250604085013567ffffffffffffffff8111156134e257600080fd5b6134ee8782880161329c565b95989497509550505050565b600181811c9082168061350e57607f821691505b60208210811415613548577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156135905761359061354e565b500190565b6000828210156135a7576135a761354e565b500390565b600073ffffffffffffffffffffffffffffffffffffffff8088168352808716602084015280861660408401525083606083015260a060808301526135f360a08301846130d7565b979650505050505050565b82815260406020820152600061361760408301846130d7565b949350505050565b60006020828403121561363157600080fd5b8151801515811461309157600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261367657600080fd5b83018035915067ffffffffffffffff82111561369157600080fd5b6020019150368190038213156132de57600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600073ffffffffffffffffffffffffffffffffffffffff8089168352808816602084015280871660408401525084606083015260a0608083015261373760a0830184866136a6565b98975050505050505050565b83815260406020820152600061375d6040830184866136a6565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8183823760009101908152919050565b6000602082840312156137b757600080fd5b5051919050565b60208152600073ffffffffffffffffffffffffffffffffffffffff8084511660208401528060208501511660408401528060408501511660608401525060608301516080830152608083015160a08084015261361760c08401826130d7565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122098153887a71676bbcdc9275a6759d997d4d99f2d1e66ffd1631150e2d0e5477264736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "This value changes when `approve`, `disapprove` and `transferFrom` / `transferFromWithRef` are called.",
        "params": {
          "owner": "is the owner of the funds.",
          "spender": "is the address for which the allowance should be queried."
        },
        "returns": {
          "_0": "A `uint256` representing the remaining allowance of `spender` over `owner`'s funds."
        }
      },
      "approve(address,uint256)": {
        "params": {
          "amount": "is how much to **increase** the allowance.",
          "spender": "is the address to allow spending from the caller's wallet."
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The owners address to get the balance of."
        },
        "returns": {
          "_0": "uint256 The current balance of this owner's account."
        }
      },
      "burn(uint256,string)": {
        "params": {
          "amount": "The number of FAST tokens to mint.",
          "ref": "A reference for this minting operation."
        }
      },
      "decimals()": {
        "returns": {
          "_0": "uint256 Number of decimals the FAST has."
        }
      },
      "disapprove(address,uint256)": {
        "params": {
          "amount": "is how much to **decrease** the allowance.",
          "spender": "is the address to disallow spending from the caller's wallet."
        }
      },
      "mint(uint256,string)": {
        "params": {
          "amount": "The number of FAST tokens to mint.",
          "ref": "A reference for this minting operation."
        }
      },
      "name()": {
        "returns": {
          "_0": "string Name of the FAST."
        }
      },
      "performApproval(address,address,uint256)": {
        "params": {
          "amount": "is how much to **increase** the current allowance by.  Note: This function runs when amount is zero, and will emit.",
          "from": "is the wallet from which to give the allowance.",
          "spender": "is the receiver of the allowance."
        }
      },
      "retrieveDeadTokens(address)": {
        "params": {
          "holder": "is the address for which to move the tokens from."
        }
      },
      "symbol()": {
        "returns": {
          "_0": "string Symbol of the FAST."
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "uint256 Total supply of the FAST."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "See `ERC20.Approval`."
      },
      "Burnt(uint256,string,address)": {
        "notice": "Emited whenever an burning happens in a FAST."
      },
      "CrowdfundDeployed(address)": {
        "notice": "Crowdfund related events."
      },
      "DetailsChanged(bool,uint256,uint256,uint256,uint256)": {
        "notice": "This is an event that is fired whenever any of some of the FAST parameters change, so that the frontend can react to it and refresh the general header for that fast as well as the baseball cards in the FASTs list."
      },
      "Disapproval(address,address,uint256)": {
        "notice": "See `ERC20.Disapproval`."
      },
      "DistributionDeployed(address)": {
        "notice": "Distribution related events."
      },
      "FastTransfer(address,address,address,uint256,string)": {
        "notice": "As we augmented the ERC20 standard with a few concepts, we emit our custom events in addition to the ERC20 ones."
      },
      "Minted(uint256,string,address)": {
        "notice": "Emited whenever an issuance happens in a FAST."
      },
      "Transfer(address,address,uint256)": {
        "notice": "See `ERC20.Transfer`."
      }
    },
    "kind": "user",
    "methods": {
      "allowance(address,address)": {
        "notice": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through `transferFrom`. This is zero by default."
      },
      "approve(address,uint256)": {
        "notice": "This method directly calls `performApproval`, setting its `from` paramter to the sender of the transaction."
      },
      "balanceOf(address)": {
        "notice": "The balance of the passed owner (ERC20 standard)."
      },
      "burn(uint256,string)": {
        "notice": "Burns an amount of FAST tokens.  A reference can be passed to identify why this happened for example. Business logic. - Modifiers:   - Requires the caller to be a member of the Issuer contract. - Requires that the token has continuous supply. - Requires that there are enough funds in the reserve to cover for `amount` being burnt. - Decreases the reserve balance by `amount`. - Calls `FastHistoryFacet.burnt(amount, ref)`. - Calls `FastFrontendFacet.emitDetailsChanged`. - Emits a `Burnt(amount, ref)`."
      },
      "decimals()": {
        "notice": "The `decimals` of this FAST (ERC20 standard)."
      },
      "disapprove(address,uint256)": {
        "notice": "This method directly calls `performDisapproval`, setting its `from` parameter to the sender of the transaction."
      },
      "mint(uint256,string)": {
        "notice": "Mints an amount of FAST tokens.  A reference can be passed to identify why this happened for example. Business logic: - Modifiers:   - Requires the caller to be a member of the Issuer contract. - Requires that either the token has continuous supply, or that no tokens have been minted yet. - Increases the reserve balance by `amount`. - Calls `FastHistoryFacet.minted`. - Calls `FastFrontendFacet.emitDetailsChanged`. - Emits a `Minted(amount, ref)` event."
      },
      "name()": {
        "notice": "The name of this FAST (ERC20 standard)."
      },
      "performApproval(address,address,uint256)": {
        "notice": "Increases the allowance given by `from` to `spender` by `amount`. Note that this function should run and emit even if the amount passed is zero. Business logic: - Modifiers:   - Only facets of the current diamond should be able to call this.   - Requires that `onlyTokenHolder` passes for the `from` address. - Requires that the `amount` is positive number. - Increases the allowance given by `from` to `spender` by `amount`. - Update the allowance lookup tables in both directions. - Emits an `Approval(from, spender, amount)`."
      },
      "performDisapproval(address,address,uint256)": {
        "notice": "Decreases allowance given by `from` to `spender` by `amount`. Business logic: - Modifiers:   - Only facets of the current diamond should be able to call this. - The allowance given by `from` to `spender` is decreased by `amount`. - Whether the allowance reached zero, stop tracking it by owner and by spender. - Emit a `Disapproval(from, spender, amount)` event.  Note: This function runs when amount is zero, and will emit."
      },
      "performTransfer((address,address,address,uint256,string))": {
        "notice": "This is the internal method that gets called whenever a transfer is initiated. Both `transfer`, `transferWithRef`, and their variants internally call this function. Business logic: - Modifiers:   - Only facets of the current diamond should be able to call this. - Requires that transfers are enabled for this FAST. - Requires that `from` and `to` are different addresses. - Requires that `from` membership is active in the marketplace. - If `from` is not the reserve, requires that `from` is a valid token holder. - If `from` is the reserve, requires that the message sender is an issuer member. - Requires that `to` is a valid token holder. - Requires that the amount is a positive value. - If the transfer is an allowance - e.g. the `spender` is not the same as the `from` address,   - The allowance given by the `from` address to the `spender` covers for the `amount`.     - If we are **not** transfering **from** the reserve,       - Decreases the allowance given by `from` to `spender`.         - If the new allowance reaches zero,           - Stop tracking the allowance in the allowance lookup tables for both spending and receiving directions. - Decreases the balance of the `owner` address. - Increases the balance of the `to` address by `amount`. - If we are **not** transfering **from** the reserve,   - Requires that there are enough transfer credits to cover for `amount`.   - Decreases the transfer credits by `amount`. - If the `to` address is the reserve,   - Decreases the total supply by `amount`.   - Calls `FastFrontendFacet.emitDetailsChanged`. - Else, if the `from` address is the reserve,   - Increases the total supply by `amount`.   - Calls `FastFrontendFacet.emitDetailsChanged`. - Calls `FastHistoryFacet.transfered`. - Emits a `Transfer(from, to, amount)` event."
      },
      "retrieveDeadTokens(address)": {
        "notice": "Allows an Issuer member to move an arbitrary account's holdings back to the reserve, as per regulatory requirements. Business logic: - Modifiers:   - Requires that the caller is a member of the Issuer contract. - If the amount held by `holder` is not zero   - The balance of `holder` should be set to zero.   - The reserve's balance should be increased by how much was on the holder's account.   - Total supply should be decreased by that amount too. - The `holder`'s address should not be tracked as a token holder in this FAST anymore. - The `holder`'s address should not be tracked as a token holder in the Marketplace anymore. - A `Transfer(holder, reserve, amount)` event should be emited. - If the amount previously held by `holder` was not zero,   - Since the reserve balance and total supply have changed, the `FastFrontendFacet.emitDetailsChanged()` function should be called."
      },
      "symbol()": {
        "notice": "The symbol of this FAST (ERC20 standard)."
      },
      "totalSupply()": {
        "notice": "The total supply of the FAST (ERC20 standard)."
      },
      "transfer(address,uint256)": {
        "notice": "See `performTransfer`, the spender will be equal to the `owner`, and the `ref` will be defauted. "
      },
      "transferFrom(address,address,uint256)": {
        "notice": "See `performTransfer`, the `ref` will be defaulted."
      },
      "transferFromWithRef(address,address,uint256,string)": {
        "notice": "See `performTransfer`."
      },
      "transferWithRef(address,uint256,string)": {
        "notice": "See `performTransfer`, the spender will be equal to the `owner`. "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}