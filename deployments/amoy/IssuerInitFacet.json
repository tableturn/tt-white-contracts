{
  "address": "0x30D166E1fED1A16eE79016cb9c0f750fc879D42c",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresDiamondOwnership",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fast",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "oldGroup",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "newGroup",
          "type": "string"
        }
      ],
      "name": "FastGroupChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fast",
          "type": "address"
        }
      ],
      "name": "FastRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fast",
          "type": "address"
        }
      ],
      "name": "FastUnregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fast",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "GovernorshipAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fast",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "GovernorshipRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "member",
              "type": "address"
            }
          ],
          "internalType": "struct IssuerInitFacet.InitializerParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x762282671f03d2f379db15c11879ce89ce4766ec61fc61835461e8f8df7368e2",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0x717634cfe06FFAB2CEAA7fcf1b9019813f4B25FE",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "407348",
    "logsBloom": "0x
    "blockHash": "0xe7336e3adf6106dad9fa0239da24a8e36db3382f5cee26abb2dfb0bb6d903952",
    "transactionHash": "0x762282671f03d2f379db15c11879ce89ce4766ec61fc61835461e8f8df7368e2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5152194,
        "transactionHash": "0x762282671f03d2f379db15c11879ce89ce4766ec61fc61835461e8f8df7368e2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000717634cfe06ffab2ceaa7fcf1b9019813f4b25fe",
          "0x0000000000000000000000006c095a53250dd250797ff915a716cca690ad8842"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000090b815b3ff200000000000000000000000000000000000000000000000000008220a30b152babd0000000000000000000000000000000000000000000000066b95af873a8b417b0000000000000000000000000000000000000000000000000791521afd539abd0000000000000000000000000000000000000000000000066c26679cee8a617b",
        "logIndex": 0,
        "blockHash": "0xe7336e3adf6106dad9fa0239da24a8e36db3382f5cee26abb2dfb0bb6d903952"
      }
    ],
    "blockNumber": 5152194,
    "cumulativeGasUsed": "407348",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c2c86c4488a50dc9c880be0e80e5f441",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresDiamondOwnership\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fast\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"oldGroup\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newGroup\",\"type\":\"string\"}],\"name\":\"FastGroupChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fast\",\"type\":\"address\"}],\"name\":\"FastRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fast\",\"type\":\"address\"}],\"name\":\"FastUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fast\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"GovernorshipAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fast\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"GovernorshipRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"internalType\":\"struct IssuerInitFacet.InitializerParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The Issuer Smart Contract.\",\"version\":1},\"userdoc\":{\"events\":{\"FastGroupChanged(address,string,string)\":{\"notice\":\"FAST groupping events.\"},\"FastRegistered(address)\":{\"notice\":\"Emited when a new FAST is registered.\"},\"FastUnregistered(address)\":{\"notice\":\"Emited when a FAST is removed from the Issuer contract.\"},\"GovernorshipRemoved(address,address)\":{\"notice\":\"Governors.\"},\"MemberAdded(address)\":{\"notice\":\"Events.\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"The marketplace contract is in charge of keeping track of marketplace members and has logic related to trading. It requires an Issuer contract instance at construct-time, as it relies on Issuer membership to permission governance functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/issuer/IssuerInitFacet.sol\":\"IssuerInitFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/common/AHasAutomatons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../lib/LibAddressSet.sol\\\";\\nimport \\\"../lib/LibPaginate.sol\\\";\\nimport \\\"../common/lib/LibHasAutomatons.sol\\\";\\n\\n/**\\n * @title The Fast Smart Contract.\\n * @notice The Fast Automatons abstract contract is in charge of keeping track of automaton accounts.\\n */\\nabstract contract AHasAutomatons {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Errors.\\n\\n  error RequiresAutomatonsManager(address who);\\n\\n  /// Events.\\n\\n  /**\\n   * @notice Emited when an automaton is added or changed.\\n   * @param automaton is the address of the automaton.\\n   * @param privileges is the new bitfield assigned to this automaton.\\n   */\\n  event AutomatonPrivilegesSet(address indexed automaton, uint32 indexed privileges);\\n\\n  /**\\n   * @notice Emited when an automaton is removed.\\n   * @param automaton is the address of the removed automaton.\\n   */\\n  event AutomatonRemoved(address indexed automaton);\\n\\n  // Must be overriden.\\n  function isAutomatonsManager(address who) internal view virtual returns (bool);\\n\\n  // May be overriden.\\n  function onAutomatonAdded(address member) internal virtual {}\\n\\n  // May be overriden.\\n  function onAutomatonRemoved(address member) internal virtual {}\\n\\n  /// Automatons management.\\n\\n  /**\\n   * @notice Queries whether a given address is an automaton for this Fast or not.\\n   * @param candidate is the address to test.\\n   * @return A `boolean` flag.\\n   */\\n  function isAutomaton(address candidate) external view returns (bool) {\\n    return LibHasAutomatons.data().automatonSet.contains(candidate);\\n  }\\n\\n  /**\\n   * @notice Returns the privileges for a given automaton address, or zero if no privileges exist.\\n   * @param automaton is the address to test.\\n   * @return An `uint256` bitfield.\\n   */\\n  function automatonPrivileges(address automaton) external view returns (uint32) {\\n    return LibHasAutomatons.data().automatonPrivileges[automaton];\\n  }\\n\\n  function automatonCan(address automaton, uint32 privilege) external view returns (bool) {\\n    return (LibHasAutomatons.data().automatonPrivileges[automaton] & privilege) != 0;\\n  }\\n\\n  /**\\n   * @notice Counts the numbers of automatons present in this Fast.\\n   * @return The number of automatons in this marketplace.\\n   */\\n  function automatonCount() external view returns (uint256) {\\n    return LibHasAutomatons.data().automatonSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Paginates the automatons of this Fast based on a starting cursor and a number of records per page.\\n   * @param cursor is the index at which to start.\\n   * @param perPage is how many records should be returned at most.\\n   * @return A `address[]` list of values at most `perPage` big.\\n   * @return A `uint256` index to the next page.\\n   */\\n  function paginateAutomatons(uint256 cursor, uint256 perPage) external view returns (address[] memory, uint256) {\\n    return LibPaginate.addresses(LibHasAutomatons.data().automatonSet.values, cursor, perPage);\\n  }\\n\\n  /**\\n   * @notice Sets privileges for a given automaton address.\\n   * @param candidate is the automaton address to which the privileges should be assigned.\\n   * @param privileges is a bitfield of privileges to apply.\\n   */\\n  function setAutomatonPrivileges(address candidate, uint32 privileges) external onlyAutomatonManager(msg.sender) {\\n    LibHasAutomatons.Data storage ds = LibHasAutomatons.data();\\n    ds.automatonSet.add(candidate, true);\\n    ds.automatonPrivileges[candidate] = privileges;\\n    emit AutomatonPrivilegesSet(candidate, privileges);\\n  }\\n\\n  /**\\n   * @notice Removes an automaton completely.\\n   * @param candidate is the automaton to remove.\\n   */\\n  function removeAutomaton(address candidate) external onlyAutomatonManager(msg.sender) {\\n    LibHasAutomatons.Data storage ds = LibHasAutomatons.data();\\n    ds.automatonSet.remove(candidate, false);\\n    delete ds.automatonPrivileges[candidate];\\n    emit AutomatonRemoved(candidate);\\n  }\\n\\n  /// Modifiers.\\n\\n  modifier onlyAutomatonManager(address who) {\\n    if (!isAutomatonsManager(who)) revert RequiresAutomatonsManager(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x953780331b801357c0324bc901c9d11733823f3e424fde528eb9524f704499e0\",\"license\":\"MIT\"},\"contracts/common/AHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../lib/LibAddressSet.sol\\\";\\nimport \\\"../lib/LibPaginate.sol\\\";\\nimport \\\"../common/lib/LibHasMembers.sol\\\";\\nimport \\\"../interfaces/ICustomErrors.sol\\\";\\n\\n/**\\n * @title The Fast Smart Contract.\\n * @notice The Fast Members abstract contract is in charge of keeping track of automaton accounts.\\n */\\nabstract contract AHasMembers {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Errors.\\n\\n  /// @notice Happens when a function is called by an address that is not a members manager.\\n  error RequiresMembersManager(address who);\\n  /// @notice Happens when an address is used as a member but is not valid.\\n  error RequiresValidMember(address who);\\n\\n  /// Events.\\n\\n  /**\\n   * @notice Emited when a member is added to the implementing contract.\\n   * @param member is the address of the added member.\\n   */\\n  event MemberAdded(address indexed member);\\n  /**\\n   * @notice Emited when a member is removed to the implementing contract.\\n   * @param member is the address of the removed member.\\n   */\\n  event MemberRemoved(address indexed member);\\n\\n  /**\\n   * @notice Checks whether the given address is a members manager or not.\\n   * @dev Must be implemented by the inheriting contract.\\n   * @param who is the address to test.\\n   */\\n  function isMembersManager(address who) internal view virtual returns (bool);\\n\\n  /**\\n   * @notice Checks whether the given address can be added as a member or not.\\n   * @dev Must be implemented by the inheriting contract.\\n   * @param who is the address to test.\\n   */\\n  function isValidMember(address who) internal view virtual returns (bool);\\n\\n  /**\\n   * @notice This callback is called when a member is added to the contract.\\n   * @dev May be overriden by the inheriting contract.\\n   * @param member is the address which was added.\\n   */\\n  function onMemberAdded(address member) internal virtual {}\\n\\n  /**\\n   * @notice This callback is called when a member is removed to the contract.\\n   * @dev May be overriden by the inheriting contract.\\n   * @param member is the address which was removed.\\n   */\\n  function onMemberRemoved(address member) internal virtual {}\\n\\n  // Members management.\\n\\n  /**\\n   * @notice Queries whether a given address is a member or not.\\n   * @param who is the address to test.\\n   * @return A `bool` equal to `true` when `candidate` is a member.\\n   */\\n  function isMember(address who) external view returns (bool) {\\n    return LibHasMembers.data().memberSet.contains(who);\\n  }\\n\\n  /**\\n   * @notice Queries the number of members.\\n   * @return An `uint256`.\\n   */\\n  function memberCount() external view returns (uint256) {\\n    return LibHasMembers.data().memberSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Queries pages of members based on a start index and a page size.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginateMembers(uint256 index, uint256 perPage) external view returns (address[] memory, uint256) {\\n    return LibPaginate.addresses(LibHasMembers.data().memberSet.values, index, perPage);\\n  }\\n\\n  /**\\n   * @notice Adds a member to the list of known members.\\n   * @param who is the address to be added.\\n   */\\n  function addMember(address who) external onlyMemberManager(msg.sender) onlyValidMember(who) {\\n    // Add the member.\\n    LibHasMembers.data().memberSet.add(who, false);\\n    // Notify via callback.\\n    onMemberAdded(who);\\n    // Emit!\\n    emit MemberAdded(who);\\n  }\\n\\n  /**\\n   * @notice Removes a member from this contract.\\n   * @param member The address of the member to be removed.\\n   * @notice Requires that the caller is a member of this Issuer.\\n   * @notice Emits a `AHasMembers.MemberRemoved` event.\\n   */\\n  function removeMember(address member) external onlyMemberManager(msg.sender) {\\n    // Notify via callback.\\n    onMemberRemoved(member);\\n    // Remove member.\\n    LibHasMembers.data().memberSet.remove(member, false);\\n    // Emit!\\n    emit MemberRemoved(member);\\n  }\\n\\n  /// Modifiers.\\n\\n  modifier onlyMemberManager(address who) {\\n    if (!isMembersManager(who)) revert RequiresMembersManager(who);\\n    _;\\n  }\\n\\n  modifier onlyValidMember(address who) {\\n    if (!isValidMember(who)) revert RequiresValidMember(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xe9876fc4ec6dadc0d7e37e5562cb359b4b1dc6d188651893e73fc541be1e56a3\",\"license\":\"MIT\"},\"contracts/common/lib/LibHasAutomatons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../lib/LibAddressSet.sol\\\";\\n\\nlibrary LibHasAutomatons {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is `keccak256('HasAutomatons.storage.Main')`.\\n  bytes32 internal constant STORAGE_SLOT = 0x3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b9183;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we hold our automatons data.\\n    LibAddressSet.Data automatonSet;\\n    /// @notice This is where we store privileges for each of our automaton account.\\n    mapping(address => uint32) automatonPrivileges;\\n  }\\n\\n  function data() internal pure returns (Data storage s) {\\n    assembly {\\n      s.slot := STORAGE_SLOT\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4fea753864796a68c0b1ef3137fcc43c3707a426e5f4ef37b35711ed77be34d3\",\"license\":\"MIT\"},\"contracts/common/lib/LibHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../lib/LibAddressSet.sol\\\";\\n\\nlibrary LibHasMembers {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is `keccak256('HasMembers.storage.Main')`.\\n  bytes32 internal constant STORAGE_SLOT = 0xd56529bfa3ed57257eed4751494e1d0c0f212cfe38768380e006e3bee06ffb91;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we hold our automatons data.\\n    LibAddressSet.Data memberSet;\\n  }\\n\\n  function data() internal pure returns (Data storage s) {\\n    assembly {\\n      s.slot := STORAGE_SLOT\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x03ea8d9c47249e9456deba85130e859afd6eba800e330527bcb9bc3438adb6a4\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastHistory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @notice This library centralises shared functionality between FAST diamonds facets that have to do with transfer\\n * history tracking.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable.\\n */\\nlibrary LibFastHistory {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage.History'):\\n  bytes32 internal constant STORAGE_SLOT = 0x6bc8b61a9dd5fc049ea98027492a801d74e35fdf4d80d7fecd551a16e88fdbb4;\\n\\n  // Storage structures.\\n\\n  /**\\n   * @notice The history data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice All minting proofs are kept here.\\n    SupplyProof[] supplyProofs;\\n    /// @notice All transfer proofs are kept here.\\n    TransferProof[] transferProofs;\\n    /// @notice All transfers indices involving a given address are kept here.\\n    mapping(address => uint256[]) transferProofInvolvements;\\n  }\\n\\n  // Other structures.\\n\\n  /// @notice A minting operation could either be to mint or burn tokens.\\n  enum SupplyOp {\\n    Mint,\\n    Burn\\n  }\\n\\n  /// @notice Minting operations are recorded for papertrail. This is the structure that keeps track of them.\\n  struct SupplyProof {\\n    /// @notice How...\\n    SupplyOp op;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /// @notice Every transfer in is recorded. This is the structure that keeps track of them.\\n  struct TransferProof {\\n    /// @notice Who spent...\\n    address spender;\\n    /// @notice Who performed the transfer...\\n    address from;\\n    /// @notice Who received...\\n    address to;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /**\\n   * @notice Returns the history storage for the calling FAST.\\n   * @return s a struct pointer for history FAST data storage.\\n   */\\n  function data() internal pure returns (Data storage s) {\\n    assembly {\\n      s.slot := STORAGE_SLOT\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x21e2cb01ca5bc6109080cd9695296e4ae346a2936c8cae3b3c0b68cef9a90a5e\",\"license\":\"MIT\"},\"contracts/interfaces/ICustomErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface ICustomErrors {\\n  error AlreadyInitialized();\\n  error CannotSelfRemove(address who);\\n  error DuplicateEntry();\\n  error InconsistentParameter(string param);\\n  error InsufficientFunds(uint256 amount);\\n  error InternalMethod();\\n  error InvalidCrowdfundBasisPointsFee(uint32 fee);\\n  error InvalidPhase();\\n  error NonExistentEntry();\\n  error OutOfBounds();\\n  error Overfunded(uint256 amount);\\n  error ReentrancyError();\\n  error RequiresAutomatonsManager(address who);\\n  error RequiresContinuousSupply();\\n  error RequiresDiamondOwnership(address who);\\n  error RequiresDifferentSenderAndRecipient(address a);\\n  error RequiresFastCaller();\\n  error RequiresFastContractCaller();\\n  error RequiresFastGovernorship(address who);\\n  error RequiresFastMemberCaller();\\n  error RequiresFastMembership(address who);\\n  error RequiresGovernorsManager(address who);\\n  error RequiresIssuerMemberCaller();\\n  error RequiresIssuerMemberOrIssuerCaller();\\n  error RequiresIssuerMembership(address who);\\n  error RequiresManagerCaller();\\n  error RequiresMarketplaceActiveMembership(address who);\\n  error RequiresMarketplaceDeactivatedMember(address who);\\n  error RequiresMarketplaceMembership(address who);\\n  error RequiresMembersManager(address who);\\n  error RequiresNoFastMemberships(address who);\\n  error RequiresOwner(address who);\\n  error RequiresPositiveBalance(address holder);\\n  error RequiresTransfersEnabled();\\n  error RequiresValidGovernor(address who);\\n  error RequiresValidMember(address who);\\n  error RequiresValidTokenHolder(address who);\\n  error TokenContractError();\\n  error UnknownBeneficiary(address who);\\n  error UnknownPledger(address who);\\n  error UnsupportedOperation();\\n}\\n\",\"keccak256\":\"0x62cf23c6bccffebc753940b8f9260626f04455dd305736aee200d8d1545eb3e4\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n/// @title A facet providing diamond cut mechanisms.\\ninterface IDiamondCut {\\n  enum FacetCutAction {\\n    Add,\\n    Replace,\\n    Remove\\n  }\\n  // Add=0, Replace=1, Remove=2\\n\\n  struct FacetCut {\\n    address facetAddress;\\n    FacetCutAction action;\\n    bytes4[] functionSelectors;\\n  }\\n\\n  /// @notice Add/replace/remove any number of functions and optionally execute\\n  /// a method with `delegatecall`.\\n  /// @param _diamondCut Contains the facet addresses and function selectors\\n  /// @param _init The address of the contract or facet to execute _calldata\\n  /// @param _calldata A function call, including function selector and arguments\\n  /// _calldata is executed with delegatecall on _init\\n  function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n\\n  event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xf548f40da69f2c54f4e03f92dc31094f6825669314b87266cce22e0a8f1a4c47\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n/// @title A loupe facet is a small magnifying glass used to look at diamonds. These functions look at diamonds\\ninterface IDiamondLoupe {\\n  /// These functions are expected to be called frequently\\n  /// by tools.\\n\\n  struct Facet {\\n    address facetAddress;\\n    bytes4[] functionSelectors;\\n  }\\n\\n  /// @notice Gets all facet addresses and their four byte function selectors.\\n  /// @return facets_ All facets and their registered selectors.\\n  function facets() external view returns (Facet[] memory facets_);\\n\\n  /// @notice Gets all the function selectors supported by a specific facet.\\n  /// @param _facet The facet address.\\n  /// @return facetFunctionSelectors_ is the list of selectors for the given function.\\n  function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n  /// @notice Get all the facet addresses used by a diamond.\\n  /// @return facetAddresses_ are all facet addresses registered with this diamond.\\n  function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n  /// @notice Gets the facet that supports the given selector.\\n  /// @notice If facet is not found return address(0).\\n  /// @param _functionSelector The function selector.\\n  /// @return facetAddress_ The facet address.\\n  function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x6aaced2ec2356b0ea8546a2a6ca4a8ed6ace6b96791b92dccc97a3079bce6217\",\"license\":\"MIT\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title ERC165 definition - interface implementation queryability.\\ninterface IERC165 {\\n  /// @notice Queries if a contract implements an interface\\n  /// @param interfaceId The interface identifier, as specified in ERC165.\\n  /// @notice Interface identification is specified in ERC-165. This method uses less than 30,000 gas.\\n  /// @return A `bool` set to `true` if the contract implements `interfaceID` and\\n  /// `interfaceID` is not 0xffffffff.\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8630adf34624d2fee94edbc35569cfd1bb95235c00bf741658587ad65b992e1b\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title ERC173 Contract Ownership Standard\\n * @dev The ERC165 identifier for this interface is 0x7f5828d0.\\n */\\ninterface IERC173 {\\n  /// @notice This emits when ownership of a contract changes.\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /// @notice Get the address of the owner\\n  /// @return owner_ The address of the owner.\\n  function owner() external view returns (address owner_);\\n\\n  /// @notice Set the address of the new owner of the contract\\n  /// @notice Set _newOwner to address(0) to renounce any ownership.\\n  /// @param _newOwner The address of the new owner of the contract\\n  function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x797855e7870ec3c9f32dda93166bd12dc19fec66cc9a8a7a58f03339a31439c0\",\"license\":\"MIT\"},\"contracts/issuer/IssuerInitFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../common/AHasMembers.sol\\\";\\nimport \\\"../common/AHasAutomatons.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\"; // Interface Support.\\nimport \\\"../interfaces/IERC173.sol\\\"; // Ownership.\\nimport \\\"../interfaces/IDiamondCut.sol\\\"; // Facet management.\\nimport \\\"../interfaces/IDiamondLoupe.sol\\\"; // Facet introspection.\\nimport \\\"../interfaces/ICustomErrors.sol\\\";\\nimport \\\"../lib/LibDiamond.sol\\\";\\nimport \\\"../lib/LibAddressSet.sol\\\";\\nimport \\\"./lib/AIssuerFacet.sol\\\";\\nimport \\\"./lib/LibIssuer.sol\\\";\\nimport \\\"./lib/LibIssuerAccess.sol\\\";\\n\\n/**\\n * @title The Issuer Smart Contract.\\n * @notice The marketplace contract is in charge of keeping track of marketplace members and has logic\\n * related to trading.\\n * It requires an Issuer contract instance at construct-time, as it relies on Issuer membership\\n * to permission governance functions.\\n */\\ncontract IssuerInitFacet is AIssuerFacet {\\n  using LibAddressSet for LibAddressSet.Data;\\n  /// Events.\\n\\n  // Duplicated from AHasMembers.\\n  event MemberAdded(address indexed member);\\n\\n  /// Initializers.\\n\\n  struct InitializerParams {\\n    address member;\\n  }\\n\\n  function initialize(InitializerParams calldata params) external onlyDiamondOwner {\\n    // Make sure we haven't initialized yet.\\n    if (LibIssuer.data().version >= LibIssuer.STORAGE_VERSION) revert ICustomErrors.AlreadyInitialized();\\n\\n    // Register interfaces.\\n    LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n    ds.supportedInterfaces[type(IERC165).interfaceId] = true;\\n    ds.supportedInterfaces[type(IERC173).interfaceId] = true;\\n    ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\n    ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\\n\\n    // ------------------------------------- //\\n\\n    // Initialize top-level facet storage.\\n    LibIssuer.data().version = LibIssuer.STORAGE_VERSION;\\n\\n    // Initialize access facet storage.\\n    LibIssuerAccess.data().version = LibIssuerAccess.STORAGE_VERSION;\\n\\n    // ------------------------------------- //\\n\\n    // Initialize members storage.\\n    LibHasMembers.Data storage membersData = LibHasMembers.data();\\n    membersData.version = LibHasMembers.STORAGE_VERSION;\\n    // Add the member and emit.\\n    membersData.memberSet.add(params.member, false);\\n    // Emit!\\n    emit MemberAdded(params.member);\\n\\n    // Initialize automatons storage.\\n    LibHasAutomatons.data().version = LibHasAutomatons.STORAGE_VERSION;\\n  }\\n}\\n\",\"keccak256\":\"0x8508152a85ad35b1274d5e7ced2c059f1fe8208f071bb6e21593c3955cd56951\",\"license\":\"MIT\"},\"contracts/issuer/lib/AIssuerFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../lib/LibHelpers.sol\\\";\\nimport \\\"../../common/AHasMembers.sol\\\";\\nimport \\\"../../interfaces/ICustomErrors.sol\\\";\\nimport \\\"./IIssuerEvents.sol\\\";\\n\\n/**\\n * @notice This abstract contract encapsulates modifiers allowing inheriting facets to guard against\\n * certain permissions.\\n */\\nabstract contract AIssuerFacet is IIssuerEvents {\\n  /// Modifiers.\\n\\n  /// @notice Ensures that a method can only be called by another facet of the same diamond.\\n  modifier onlyDiamondFacet() {\\n    if (!LibHelpers._isDiamondFacet(msg.sender)) revert ICustomErrors.InternalMethod();\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the owner of this diamond.\\n  modifier onlyDiamondOwner() {\\n    if (!LibHelpers._isDiamondOwner(msg.sender)) revert ICustomErrors.RequiresDiamondOwnership(msg.sender);\\n    _;\\n  }\\n\\n  /// @notice Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier onlyDeployer() {\\n    if (!LibHelpers._isDeployer(msg.sender)) revert ICustomErrors.InternalMethod();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensures that the given address is a member of the FAST.\\n   * @param who The address to check.\\n   */\\n  modifier onlyMember(address who) {\\n    if (!AHasMembers(address(this)).isMember(who)) revert ICustomErrors.RequiresIssuerMembership(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x4ab53f3e2ce4e78f13c93f46c10c581c0b5ebc520979191d6092d2d7f7aa733c\",\"license\":\"MIT\"},\"contracts/issuer/lib/IIssuerEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n// WARNING: These events must be maintained 1:1 with LibIssuerEvents!\\n// They also should never be emitted directly, they only help us defining\\n// typescript types!\\ninterface IIssuerEvents {\\n  /// FAST registration events.\\n\\n  /**\\n   * @notice Emited when a new FAST is registered.\\n   * @param fast The address of the newly registered FAST diamond.\\n   */\\n  event FastRegistered(address indexed fast);\\n  /**\\n   * @notice Emited when a FAST is removed from the Issuer contract.\\n   * @param fast The address of the unregistered FAST.\\n   */\\n  event FastUnregistered(address indexed fast);\\n\\n  /// FAST groupping events.\\n\\n  event FastGroupChanged(address indexed fast, string indexed oldGroup, string indexed newGroup);\\n\\n  /// Governors.\\n\\n  event GovernorshipRemoved(address indexed fast, address indexed governor);\\n  event GovernorshipAdded(address indexed fast, address indexed governor);\\n}\\n\",\"keccak256\":\"0x7ab2611cedeaf69aba2461e083ce436cde93f53e0ebf7ae882bf1800a839f543\",\"license\":\"MIT\"},\"contracts/issuer/lib/LibIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../lib/LibAddressSet.sol\\\";\\n\\nlibrary LibIssuer {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Issuer.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0xd681d5f1de7bc4b7442c088939dc202585e09699e92a94c9717ace8d0f4fcaa5;\\n\\n  // Data structures.\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    // This is where we keep our list of deployed fast FASTs.\\n    LibAddressSet.Data fastSet;\\n    // We keep track of the FAST symbols that were already used - string to FAST address.\\n    mapping(string => address) fastSymbols;\\n    // We also keep track of the FAST groups here - slug to FAST address set.\\n    mapping(string => LibAddressSet.Data) fastGroups;\\n  }\\n\\n  function data() internal pure returns (Data storage s) {\\n    assembly {\\n      s.slot := STORAGE_SLOT\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x82972d98e290aa68b6fa14dee5e9f3e0ca3d80604e96435ea437e9f92891f7e9\",\"license\":\"MIT\"},\"contracts/issuer/lib/LibIssuerAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../lib/LibAddressSet.sol\\\";\\n\\nlibrary LibIssuerAccess {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Issuer.storage.Access'):\\n  bytes32 internal constant STORAGE_SLOT = 0x3ceaa4d5edf9c96fbd56140abe6389d65a87143d4f11819874ff2fe0ae9574db;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    // For a given address we store list of FASTs where that address is a governor.\\n    mapping(address => LibAddressSet.Data) fastGovernorships;\\n  }\\n\\n  function data() internal pure returns (Data storage s) {\\n    assembly {\\n      s.slot := STORAGE_SLOT\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x225043d709577f7c580aa46637ef2910336dc0ef75a508a1252484fa45558fca\",\"license\":\"MIT\"},\"contracts/lib/LibAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary LibAddressSet {\\n  /// @notice Represents a list of addresses.\\n  struct Data {\\n    mapping(address => uint256) indices;\\n    address[] values;\\n  }\\n\\n  /**\\n   * @notice Adds an item into the storage set. If the address already exists in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be added.\\n   */\\n  function add(Data storage d, address key, bool noThrow) internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && exists) {\\n      return;\\n    }\\n    require(!exists, \\\"Address already in set\\\");\\n    d.indices[key] = d.values.length;\\n    d.values.push(key);\\n  }\\n\\n  /**\\n   * @notice Removes an item from the storage set. If the address does not exist in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be removed.\\n   */\\n  function remove(Data storage d, address key, bool noThrow) internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && !exists) {\\n      return;\\n    }\\n    require(exists, \\\"Address does not exist in set\\\");\\n    address keyToMove = d.values[d.values.length - 1];\\n    uint256 idxToReplace = d.indices[key];\\n    d.indices[keyToMove] = idxToReplace;\\n    d.values[idxToReplace] = keyToMove;\\n\\n    delete d.indices[key];\\n    d.values.pop();\\n  }\\n\\n  /**\\n   * @notice Tests whether or not a given item already exists in the set.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to test.\\n   * @return a boolean.\\n   */\\n  function contains(Data storage d, address key) internal view returns (bool) {\\n    return d.values.length == 0 ? false : d.values[d.indices[key]] == key;\\n  }\\n}\\n\",\"keccak256\":\"0x47c911c8b83ffd42c9d6088104f3c2c5eac2899fdf200b3683d1de10ca96b1a8\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n  struct FacetAddressAndPosition {\\n    address facetAddress;\\n    uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n  }\\n\\n  struct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n  }\\n\\n  struct DiamondStorage {\\n    // maps function selector to the facet address and\\n    // the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    // facet addresses\\n    address[] facetAddresses;\\n    // Used to query if a contract implements an interface.\\n    // Used to implement ERC-165.\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    // owner of the contract\\n    address contractOwner;\\n  }\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  function setContractOwner(address _newOwner) internal {\\n    DiamondStorage storage ds = diamondStorage();\\n    address previousOwner = ds.contractOwner;\\n    ds.contractOwner = _newOwner;\\n    emit OwnershipTransferred(previousOwner, _newOwner);\\n  }\\n\\n  function contractOwner() internal view returns (address contractOwner_) {\\n    contractOwner_ = diamondStorage().contractOwner;\\n  }\\n\\n  function enforceIsContractOwner() internal view {\\n    require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n  }\\n\\n  event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  // Internal function version of diamondCut\\n  function diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n    for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n      IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n      if (action == IDiamondCut.FacetCutAction.Add) {\\n        addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n      } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n        replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n      } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n        removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n      } else {\\n        revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n      }\\n    }\\n    emit DiamondCut(_diamondCut, _init, _calldata);\\n    initializeDiamondCut(_init, _calldata);\\n  }\\n\\n  function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n    DiamondStorage storage ds = diamondStorage();\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n    uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n    // add new facet address if it does not exist\\n    if (selectorPosition == 0) {\\n      addFacet(ds, _facetAddress);\\n    }\\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n      addFunction(ds, selector, selectorPosition, _facetAddress);\\n      selectorPosition++;\\n    }\\n  }\\n\\n  function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n    DiamondStorage storage ds = diamondStorage();\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n    uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n    // add new facet address if it does not exist\\n    if (selectorPosition == 0) {\\n      addFacet(ds, _facetAddress);\\n    }\\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n      removeFunction(ds, oldFacetAddress, selector);\\n      addFunction(ds, selector, selectorPosition, _facetAddress);\\n      selectorPosition++;\\n    }\\n  }\\n\\n  function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n    DiamondStorage storage ds = diamondStorage();\\n    // if function does not exist then do nothing and return\\n    require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      removeFunction(ds, oldFacetAddress, selector);\\n    }\\n  }\\n\\n  function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n    enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n    ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n    ds.facetAddresses.push(_facetAddress);\\n  }\\n\\n  function addFunction(\\n    DiamondStorage storage ds,\\n    bytes4 _selector,\\n    uint96 _selectorPosition,\\n    address _facetAddress\\n  ) internal {\\n    ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n    ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n    ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n  }\\n\\n  function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n    // an immutable function is a function defined directly in a diamond\\n    require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n    // replace selector with last selector, then delete last selector\\n    uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n    uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n    // if not the same then replace _selector with lastSelector\\n    if (selectorPosition != lastSelectorPosition) {\\n      bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n      ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n    }\\n    // delete the last selector\\n    ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n    delete ds.selectorToFacetAndPosition[_selector];\\n\\n    // if no more selectors for facet address then delete the facet address\\n    if (lastSelectorPosition == 0) {\\n      // replace facet address with last facet address and delete last facet address\\n      uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n      uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n      if (facetAddressPosition != lastFacetAddressPosition) {\\n        address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n        ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n        ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n      }\\n      ds.facetAddresses.pop();\\n      delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n    }\\n  }\\n\\n  function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n    if (_init == address(0)) {\\n      require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n    } else {\\n      require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n      if (_init != address(this)) {\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n      }\\n      (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n      if (!success) {\\n        if (error.length > 0) {\\n          // bubble up the error\\n          revert(string(error));\\n        } else {\\n          revert(\\\"LibDiamondCut: _init function reverted\\\");\\n        }\\n      }\\n    }\\n  }\\n\\n  function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n    uint256 contractSize;\\n    assembly {\\n      contractSize := extcodesize(_contract)\\n    }\\n    require(contractSize > 0, _errorMessage);\\n  }\\n}\\n\",\"keccak256\":\"0x0e12d54c3afccb656312e8bc7c31d16feb3718a421d2ea732024f608ccb6aab4\",\"license\":\"MIT\"},\"contracts/lib/LibHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibHelpers.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\";\\n\\nlibrary LibHelpers {\\n  address internal constant ZERO_ADDRESS = address(0);\\n  address internal constant DEPLOYER_CONTRACT = 0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7;\\n\\n  function _isDiamondFacet(address who) internal view returns (bool) {\\n    return who == address(this);\\n  }\\n\\n  function _isDiamondOwner(address who) internal view returns (bool) {\\n    return who == IERC173(address(this)).owner();\\n  }\\n\\n  function _isDeployer(address who) internal pure returns (bool) {\\n    return who == LibHelpers.DEPLOYER_CONTRACT;\\n  }\\n}\\n\",\"keccak256\":\"0x68cdf87179f5ea101e0d9da04169fb72de37c99649cea169c0feadb59b3e5565\",\"license\":\"MIT\"},\"contracts/lib/LibPaginate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../fast/lib/LibFastHistory.sol\\\";\\n\\nlibrary LibPaginate {\\n  function addresses(\\n    address[] storage collection,\\n    uint256 cursor,\\n    uint256 perPage\\n  ) internal view returns (address[] memory, uint256) {\\n    uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n    address[] memory values = new address[](length);\\n    for (uint256 i = 0; i < length; ) {\\n      values[i] = collection[cursor + i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return (values, cursor + length);\\n  }\\n\\n  function uint256s(\\n    uint256[] storage collection,\\n    uint256 cursor,\\n    uint256 perPage\\n  ) internal view returns (uint256[] memory, uint256) {\\n    uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n    uint256[] memory values = new uint256[](length);\\n    for (uint256 i = 0; i < length; ) {\\n      values[i] = collection[cursor + i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return (values, cursor + length);\\n  }\\n\\n  function supplyProofs(\\n    LibFastHistory.SupplyProof[] storage collection,\\n    uint256 cursor,\\n    uint256 perPage\\n  ) internal view returns (LibFastHistory.SupplyProof[] memory, uint256) {\\n    uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n    LibFastHistory.SupplyProof[] memory values = new LibFastHistory.SupplyProof[](length);\\n    for (uint256 i = 0; i < length; ) {\\n      values[i] = collection[cursor + i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return (values, cursor + length);\\n  }\\n\\n  function transferProofs(\\n    LibFastHistory.TransferProof[] storage collection,\\n    uint256 cursor,\\n    uint256 perPage\\n  ) internal view returns (LibFastHistory.TransferProof[] memory, uint256) {\\n    uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n    LibFastHistory.TransferProof[] memory values = new LibFastHistory.TransferProof[](length);\\n    for (uint256 i = 0; i < length; ) {\\n      values[i] = collection[cursor + i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return (values, cursor + length);\\n  }\\n}\\n\",\"keccak256\":\"0xf2f7e33b965e27fa953f0b95922856f42b2563f9a037a17e1973af5a496899ca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061066c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638f09926d14610030575b600080fd5b61004361003e366004610590565b610045565b005b61004e3361037a565b61008b576040517ff7a81ea00000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b60017fd681d5f1de7bc4b7442c088939dc202585e09699e92a94c9717ace8d0f4fcaa55461ffff16106100ea576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f60209081527f699d9daa71b280d05a152715774afa0a81a312594b2d731d6b0b2552b7d6f69f805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091821681179092557f5622121b47b8cd0120c4efe45dd5483242f54a3d49bd7679be565d47694918c380548216831790557ff97e938d8af42f52387bb74b8b526fda8f184cc2aa534340a8d75a88fbecc77580548216831790557f48e2b093000000000000000000000000000000000000000000000000000000006000527f65d510a5d8f7ef134ec444f7f34ee808c8eeb5177cdfd16be0c40fe1ab4336958054909116821790557fd681d5f1de7bc4b7442c088939dc202585e09699e92a94c9717ace8d0f4fcaa580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090811683179091557f3ceaa4d5edf9c96fbd56140abe6389d65a87143d4f11819874ff2fe0ae9574db80548216831790557fd56529bfa3ed57257eed4751494e1d0c0f212cfe38768380e006e3bee06ffb91805490911690911781557fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c916102dc906102d0908501856105cd565b60018301906000610420565b6102e960208401846105cd565b73ffffffffffffffffffffffffffffffffffffffff167fb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd91460405160405180910390a250507f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b918380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016600117905550565b60003073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103eb91906105ea565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b600061042c8484610514565b90508180156104385750805b156104435750505050565b80156104ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4164647265737320616c726561647920696e20736574000000000000000000006044820152606401610082565b50506001808301805473ffffffffffffffffffffffffffffffffffffffff909316600081815260209586526040812085905592840182559082529290200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b6001820154600090156105865773ffffffffffffffffffffffffffffffffffffffff8216600081815260208590526040902054600185018054909190811061055e5761055e610607565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614610589565b60005b9392505050565b6000602082840312156105a257600080fd5b50919050565b73ffffffffffffffffffffffffffffffffffffffff811681146105ca57600080fd5b50565b6000602082840312156105df57600080fd5b8135610589816105a8565b6000602082840312156105fc57600080fd5b8151610589816105a8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212204ff5c50129892d91e8550986a6c8230eb92bc7e7c91e8984d355ae3ffb382d1c64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80638f09926d14610030575b600080fd5b61004361003e366004610590565b610045565b005b61004e3361037a565b61008b576040517ff7a81ea00000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b60017fd681d5f1de7bc4b7442c088939dc202585e09699e92a94c9717ace8d0f4fcaa55461ffff16106100ea576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f60209081527f699d9daa71b280d05a152715774afa0a81a312594b2d731d6b0b2552b7d6f69f805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091821681179092557f5622121b47b8cd0120c4efe45dd5483242f54a3d49bd7679be565d47694918c380548216831790557ff97e938d8af42f52387bb74b8b526fda8f184cc2aa534340a8d75a88fbecc77580548216831790557f48e2b093000000000000000000000000000000000000000000000000000000006000527f65d510a5d8f7ef134ec444f7f34ee808c8eeb5177cdfd16be0c40fe1ab4336958054909116821790557fd681d5f1de7bc4b7442c088939dc202585e09699e92a94c9717ace8d0f4fcaa580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090811683179091557f3ceaa4d5edf9c96fbd56140abe6389d65a87143d4f11819874ff2fe0ae9574db80548216831790557fd56529bfa3ed57257eed4751494e1d0c0f212cfe38768380e006e3bee06ffb91805490911690911781557fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c916102dc906102d0908501856105cd565b60018301906000610420565b6102e960208401846105cd565b73ffffffffffffffffffffffffffffffffffffffff167fb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd91460405160405180910390a250507f3dfe1f2f995ddddfe9572dcdd01e4fb472ed2fb10a125c3b0156e94d073b918380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016600117905550565b60003073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103eb91906105ea565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b600061042c8484610514565b90508180156104385750805b156104435750505050565b80156104ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4164647265737320616c726561647920696e20736574000000000000000000006044820152606401610082565b50506001808301805473ffffffffffffffffffffffffffffffffffffffff909316600081815260209586526040812085905592840182559082529290200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b6001820154600090156105865773ffffffffffffffffffffffffffffffffffffffff8216600081815260208590526040902054600185018054909190811061055e5761055e610607565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614610589565b60005b9392505050565b6000602082840312156105a257600080fd5b50919050565b73ffffffffffffffffffffffffffffffffffffffff811681146105ca57600080fd5b50565b6000602082840312156105df57600080fd5b8135610589816105a8565b6000602082840312156105fc57600080fd5b8151610589816105a8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212204ff5c50129892d91e8550986a6c8230eb92bc7e7c91e8984d355ae3ffb382d1c64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "The Issuer Smart Contract.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FastGroupChanged(address,string,string)": {
        "notice": "FAST groupping events."
      },
      "FastRegistered(address)": {
        "notice": "Emited when a new FAST is registered."
      },
      "FastUnregistered(address)": {
        "notice": "Emited when a FAST is removed from the Issuer contract."
      },
      "GovernorshipRemoved(address,address)": {
        "notice": "Governors."
      },
      "MemberAdded(address)": {
        "notice": "Events."
      }
    },
    "kind": "user",
    "methods": {},
    "notice": "The marketplace contract is in charge of keeping track of marketplace members and has logic related to trading. It requires an Issuer contract instance at construct-time, as it relies on Issuer membership to permission governance functions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}