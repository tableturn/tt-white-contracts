{
  "address": "0x9ceC9ae64B89D89C9faDEDfd29f362B246B37d15",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "InterfaceNotSupported",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "RequiresForwarderManager",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "FastDeploymentRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "forwarderAddress",
          "type": "address"
        }
      ],
      "name": "ForwarderChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberDeactivated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "forwarderAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_forwarderAddress",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_forwarderAddress",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9b32bd927b18806db35b918bad89c0e9b595d4b7f772ef9d222513b60720fa80",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0x717634cfe06FFAB2CEAA7fcf1b9019813f4B25FE",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "301358",
    "logsBloom": "0x
    "blockHash": "0xc918af491b092c2b485b51c2a9cd6a8252cda49b6fcb43150ca3edf7d9e70dad",
    "transactionHash": "0x9b32bd927b18806db35b918bad89c0e9b595d4b7f772ef9d222513b60720fa80",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5461226,
        "transactionHash": "0x9b32bd927b18806db35b918bad89c0e9b595d4b7f772ef9d222513b60720fa80",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000717634cfe06ffab2ceaa7fcf1b9019813f4b25fe",
          "0x00000000000000000000000009207a6efee346cb3e4a54ac18523e3715d38b3f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000ab4d5c566f8000000000000000000000000000000000000000000000000000125ab0125c8cee700000000000000000000000000000000000000000000003f0d2b7d5d63230046000000000000000000000000000000000000000000000000011af62b6061d6e700000000000000000000000000000000000000000000003f0d3632332889f846",
        "logIndex": 2,
        "blockHash": "0xc918af491b092c2b485b51c2a9cd6a8252cda49b6fcb43150ca3edf7d9e70dad"
      }
    ],
    "blockNumber": 5461226,
    "cumulativeGasUsed": "322358",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "db2959aae9c17321f9d88ad51d32de96",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"InterfaceNotSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequiresForwarderManager\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"FastDeploymentRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"forwarderAddress\",\"type\":\"address\"}],\"name\":\"ForwarderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberDeactivated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"forwarderAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarderAddress\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarderAddress\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"RequiresForwarderManager(address)\":[{\"params\":{\"who\":\"is the address that called the function.\"}}]},\"kind\":\"dev\",\"methods\":{\"getTrustedForwarder()\":{\"returns\":{\"forwarderAddress\":\"The address of the Forwarder contract that is being used.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"_forwarderAddress\":\"the forwarder address.\"},\"returns\":{\"_0\":\"bool if the forwarder is trusted.\"}},\"setTrustedForwarder(address)\":{\"params\":{\"_forwarderAddress\":\"the forwarder address.\"}}},\"title\":\"The Marketplace Smart Contract.\",\"version\":1},\"userdoc\":{\"errors\":{\"RequiresForwarderManager(address)\":[{\"notice\":\"Happens when a function is called by a non forwarder manager.\"}]},\"events\":{\"ForwarderChanged(address)\":{\"notice\":\"Emited when a forwarder is set on an implementing contract.\"}},\"kind\":\"user\",\"methods\":{\"getTrustedForwarder()\":{\"notice\":\"WARNING: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\"},\"isTrustedForwarder(address)\":{\"notice\":\"ERC2771Recipient implementation.\"},\"setTrustedForwarder(address)\":{\"notice\":\"ERC2771Recipient implementation.\"}},\"notice\":\"The Marketplace Forwardable facet is in charge of \\\"gasless transactions\\\".\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/marketplace/MarketplaceForwardableFacet.sol\":\"MarketplaceForwardableFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/forwarder/IForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\n/**\\n * @title The Forwarder Interface\\n * @notice The contracts implementing this interface take a role of authorization, authentication and replay protection\\n * for contracts that choose to trust a `Forwarder`, instead of relying on a mechanism built into the Ethereum protocol.\\n *\\n * @notice if the `Forwarder` contract decides that an incoming `ForwardRequest` is valid, it must append 20 bytes that\\n * represent the caller to the `data` field of the request and send this new data to the target address (the `to` field)\\n *\\n * :warning: **Warning** :warning: The Forwarder can have a full control over a `Recipient` contract.\\n * Any vulnerability in a `Forwarder` implementation can make all of its `Recipient` contracts susceptible!\\n * Recipient contracts should only trust forwarders that passed through security audit,\\n * otherwise they are susceptible to identity theft.\\n */\\ninterface IForwarder is IERC165 {\\n\\n    /**\\n     * @notice A representation of a request for a `Forwarder` to send `data` on behalf of a `from` to a target (`to`).\\n     */\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n        uint256 validUntilTime;\\n    }\\n\\n    event DomainRegistered(bytes32 indexed domainSeparator, bytes domainValue);\\n\\n    event RequestTypeRegistered(bytes32 indexed typeHash, string typeStr);\\n\\n    /**\\n     * @param from The address of a sender.\\n     * @return The nonce for this address.\\n     */\\n    function getNonce(address from)\\n    external view\\n    returns(uint256);\\n\\n    /**\\n     * @notice Verify the transaction is valid and can be executed.\\n     * Implementations must validate the signature and the nonce of the request are correct.\\n     * Does not revert and returns successfully if the input is valid.\\n     * Reverts if any validation has failed. For instance, if either signature or nonce are incorrect.\\n     * Reverts if `domainSeparator` or `requestTypeHash` are not registered as well.\\n     */\\n    function verify(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    ) external view;\\n\\n    /**\\n     * @notice Executes a transaction specified by the `ForwardRequest`.\\n     * The transaction is first verified and then executed.\\n     * The success flag and returned bytes array of the `CALL` are returned as-is.\\n     *\\n     * This method would revert only in case of a verification error.\\n     *\\n     * All the target errors are reported using the returned success flag and returned bytes array.\\n     *\\n     * @param forwardRequest All requested transaction parameters.\\n     * @param domainSeparator The domain used when signing this request.\\n     * @param requestTypeHash The request type used when signing this request.\\n     * @param suffixData The ABI-encoded extension data for the current `RequestType` used when signing this request.\\n     * @param signature The client signature to be validated.\\n     *\\n     * @return success The success flag of the underlying `CALL` to the target address.\\n     * @return ret The byte array returned by the underlying `CALL` to the target address.\\n     */\\n    function execute(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    )\\n    external payable\\n    returns (bool success, bytes memory ret);\\n\\n    /**\\n     * @notice Register a new Request typehash.\\n     *\\n     * @notice This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\\n     *\\n     * @param typeName The name of the request type.\\n     * @param typeSuffix Any extra data after the generic params. Must contain add at least one param.\\n     * The generic ForwardRequest type is always registered by the constructor.\\n     */\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external;\\n\\n    /**\\n     * @notice Register a new domain separator.\\n     *\\n     * @notice This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\\n     *\\n     * @notice The domain separator must have the following fields: `name`, `version`, `chainId`, `verifyingContract`.\\n     * The `chainId` is the current network's `chainId`, and the `verifyingContract` is this Forwarder's address.\\n     * This method accepts the domain name and version to create and register the domain separator value.\\n     * @param name The domain's display name.\\n     * @param version The domain/protocol version.\\n     */\\n    function registerDomainSeparator(string calldata name, string calldata version) external;\\n}\\n\",\"keccak256\":\"0x28669953bd3dcc98a5f959fa3cac97444584b6fbe59341681b9a59f11a83b171\",\"license\":\"GPL-3.0-only\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/common/AHasForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./lib/LibHasForwarder.sol\\\";\\nimport \\\"../interfaces/ICustomErrors.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\"; // Interface Support.\\n\\nimport \\\"@opengsn/contracts/src/forwarder/IForwarder.sol\\\";\\n\\n/**\\n * @title The Forwarder behaviour abstract contract.\\n * @notice The AHasForwarder abstract contract is in charge of adding the Forwarder\\n *         functionality to any contract inheriting from it.\\n */\\nabstract contract AHasForwarder {\\n  /// Errors.\\n\\n  /**\\n   * @notice Happens when a function is called by a non forwarder manager.\\n   * @param who is the address that called the function.\\n   */\\n  error RequiresForwarderManager(address who);\\n\\n  /// Events.\\n\\n  /**\\n   * @notice Emited when a forwarder is set on an implementing contract.\\n   * @param forwarderAddress is the address of the trusted forwarder.\\n   */\\n  event ForwarderChanged(address forwarderAddress);\\n\\n  // SEE: https://github.com/opengsn/gsn/blob/v3.0.0-beta.10/packages/contracts/src/ERC2771Recipient.sol\\n\\n  /**\\n   * @notice ERC2771Recipient implementation.\\n   * @param _forwarderAddress the forwarder address.\\n   * @return bool if the forwarder is trusted.\\n   */\\n  function isTrustedForwarder(address _forwarderAddress) public view returns (bool) {\\n    return _forwarderAddress == LibHasForwarder.data().forwarderAddress;\\n  }\\n\\n  /**\\n   * @notice ERC2771Recipient implementation.\\n   * @param _forwarderAddress the forwarder address.\\n   */\\n  function setTrustedForwarder(address _forwarderAddress) external onlyForwarderManager {\\n    if (!IERC165(_forwarderAddress).supportsInterface(type(IForwarder).interfaceId))\\n      revert ICustomErrors.InterfaceNotSupported(\\\"IForwarder\\\");\\n\\n    LibHasForwarder.Data storage ds = LibHasForwarder.data();\\n    ds.forwarderAddress = _forwarderAddress;\\n\\n    emit ForwarderChanged(_forwarderAddress);\\n  }\\n\\n  /**\\n   * WARNING: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n   * @notice Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\\n   * @return forwarderAddress The address of the Forwarder contract that is being used.\\n   */\\n  function getTrustedForwarder() public view virtual returns (address forwarderAddress) {\\n    return LibHasForwarder.data().forwarderAddress;\\n  }\\n\\n  /**\\n   * @notice Checks whether the given address is a forwarder manager or not.\\n   * @dev Must be implemented by the inheriting contract.\\n   * @param who is the address to test.\\n   */\\n  function isValidForwarderManager(address who) internal view virtual returns (bool);\\n\\n  /// Modifiers.\\n\\n  /// @notice Ensures that a method can only be called by the forwarder manager.\\n  modifier onlyForwarderManager() virtual {\\n    if (!isValidForwarderManager(msg.sender)) revert RequiresForwarderManager(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x96bdf4d90ba871d0b6cdc3c4217d02b41e0ef9f71d8fb5579d382cbe75dc71aa\",\"license\":\"MIT\"},\"contracts/common/AHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../lib/LibAddressSet.sol\\\";\\nimport \\\"../lib/LibPaginate.sol\\\";\\nimport \\\"../interfaces/ICustomErrors.sol\\\";\\nimport \\\"./lib/LibHasMembers.sol\\\";\\n\\n/**\\n * @title The Members behaviour abstract contract.\\n * @notice The Fast Members abstract contract is in charge of keeping track of automaton accounts.\\n */\\nabstract contract AHasMembers {\\n  using LibAddressSet for LibAddressSet.Data;\\n\\n  /// Errors.\\n\\n  /// @notice Happens when a function is called by an address that is not a members manager.\\n  error RequiresMembersManager(address who);\\n  /// @notice Happens when an address is used as a member but is not valid.\\n  error RequiresValidMember(address who);\\n\\n  /// Events.\\n\\n  /**\\n   * @notice Emited when a member is added to the implementing contract.\\n   * @param member is the address of the added member.\\n   */\\n  event MemberAdded(address indexed member);\\n  /**\\n   * @notice Emited when a member is removed to the implementing contract.\\n   * @param member is the address of the removed member.\\n   */\\n  event MemberRemoved(address indexed member);\\n\\n  /**\\n   * @notice Default implementation - points to `msg.sender`.\\n   * @dev May be overriden by the inheriting contract.\\n   */\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  /**\\n   * @notice Checks whether the given address is a members manager or not.\\n   * @dev Must be implemented by the inheriting contract.\\n   * @param who is the address to test.\\n   */\\n  function isMembersManager(address who) internal view virtual returns (bool);\\n\\n  /**\\n   * @notice Checks whether the given address can be added as a member or not.\\n   * @dev Must be implemented by the inheriting contract.\\n   * @param who is the address to test.\\n   */\\n  function isValidMember(address who) internal view virtual returns (bool);\\n\\n  /**\\n   * @notice This callback is called when a member is added to the contract.\\n   * @dev May be overriden by the inheriting contract.\\n   * @param member is the address which was added.\\n   */\\n  function onMemberAdded(address member) internal virtual {}\\n\\n  /**\\n   * @notice This callback is called when a member is removed to the contract.\\n   * @dev May be overriden by the inheriting contract.\\n   * @param member is the address which was removed.\\n   */\\n  function onMemberRemoved(address member) internal virtual {}\\n\\n  // Members management.\\n\\n  /**\\n   * @notice Queries whether a given address is a member or not.\\n   * @param who is the address to test.\\n   * @return A `bool` equal to `true` when `candidate` is a member.\\n   */\\n  function isMember(address who) external view returns (bool) {\\n    return LibHasMembers.data().memberSet.contains(who);\\n  }\\n\\n  /**\\n   * @notice Queries the number of members.\\n   * @return An `uint256`.\\n   */\\n  function memberCount() external view returns (uint256) {\\n    return LibHasMembers.data().memberSet.values.length;\\n  }\\n\\n  /**\\n   * @notice Queries pages of members based on a start index and a page size.\\n   * @param index is the offset at which the pagination operation should start.\\n   * @param perPage is how many items should be returned.\\n   * @return A `(address[], uint256)` tuple, which first item is the list of addresses and the second item a cursor to the next page.\\n   */\\n  function paginateMembers(uint256 index, uint256 perPage) external view returns (address[] memory, uint256) {\\n    return LibPaginate.addresses(LibHasMembers.data().memberSet.values, index, perPage);\\n  }\\n\\n  /**\\n   * @notice Adds a member to the list of known members.\\n   * @param who is the address to be added.\\n   */\\n  function addMember(address who) external onlyMemberManager(_msgSender()) onlyValidMember(who) {\\n    // Add the member.\\n    LibHasMembers.data().memberSet.add(who, false);\\n    // Notify via callback.\\n    onMemberAdded(who);\\n    // Emit!\\n    emit MemberAdded(who);\\n  }\\n\\n  /**\\n   * @notice Removes a member from this contract.\\n   * @param member The address of the member to be removed.\\n   * @notice Requires that the caller is a member of this Issuer.\\n   * @notice Emits a `AHasMembers.MemberRemoved` event.\\n   */\\n  function removeMember(address member) external onlyMemberManager(_msgSender()) {\\n    // Notify via callback.\\n    onMemberRemoved(member);\\n    // Remove member.\\n    LibHasMembers.data().memberSet.remove(member, false);\\n    // Emit!\\n    emit MemberRemoved(member);\\n  }\\n\\n  /// Modifiers.\\n\\n  modifier onlyMemberManager(address who) {\\n    if (!isMembersManager(who)) revert RequiresMembersManager(who);\\n    _;\\n  }\\n\\n  modifier onlyValidMember(address who) {\\n    if (!isValidMember(who)) revert RequiresValidMember(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x92011882d076ba62aac90c181c8f374566ca5c683441570a7239fd89851e97ff\",\"license\":\"MIT\"},\"contracts/common/lib/LibHasForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary LibHasForwarder {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is `keccak256('HasForwarder.storage.Main')`.\\n  bytes32 internal constant STORAGE_SLOT = 0xa9930c2ffa1b605b0243ba36b3020146bcba5a29c05a711f5ca7c705a8e851ca;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we store the trusted forwarder address.\\n    address forwarderAddress;\\n  }\\n\\n  function data() internal pure returns (Data storage s) {\\n    assembly {\\n      s.slot := STORAGE_SLOT\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x41d08f6cc69c5133d4b853803fab0c4b05f1f0d7c31331c4aa5b590b8dac0c9b\",\"license\":\"MIT\"},\"contracts/common/lib/LibHasMembers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../lib/LibAddressSet.sol\\\";\\n\\nlibrary LibHasMembers {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is `keccak256('HasMembers.storage.Main')`.\\n  bytes32 internal constant STORAGE_SLOT = 0xd56529bfa3ed57257eed4751494e1d0c0f212cfe38768380e006e3bee06ffb91;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice This is where we hold our automatons data.\\n    LibAddressSet.Data memberSet;\\n  }\\n\\n  function data() internal pure returns (Data storage s) {\\n    assembly {\\n      s.slot := STORAGE_SLOT\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x03ea8d9c47249e9456deba85130e859afd6eba800e330527bcb9bc3438adb6a4\",\"license\":\"MIT\"},\"contracts/fast/lib/LibFastHistory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @notice This library centralises shared functionality between FAST diamonds facets that have to do with transfer\\n * history tracking.\\n * @dev Note that if you feel like a method should be created inside this library, you might want to really consider\\n * whether or not it is the right place for it. Any facet using a method from internal libraries see their bytecode\\n * size increase, kind of defeating the benefits of using facets in the first place. So please keep it reasonable.\\n */\\nlibrary LibFastHistory {\\n  /// @notice The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  /// @notice This is keccak256('Fast.storage.History'):\\n  bytes32 internal constant STORAGE_SLOT = 0x6bc8b61a9dd5fc049ea98027492a801d74e35fdf4d80d7fecd551a16e88fdbb4;\\n\\n  // Storage structures.\\n\\n  /**\\n   * @notice The history data structure required for operating any given FAST diamond.\\n   * @dev The `version` field is used to ensure that storage is at a known version during upgrades.\\n   */\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice All minting proofs are kept here.\\n    SupplyProof[] supplyProofs;\\n    /// @notice All transfer proofs are kept here.\\n    TransferProof[] transferProofs;\\n    /// @notice All transfers indices involving a given address are kept here.\\n    mapping(address => uint256[]) transferProofInvolvements;\\n  }\\n\\n  // Other structures.\\n\\n  /// @notice A minting operation could either be to mint or burn tokens.\\n  enum SupplyOp {\\n    Mint,\\n    Burn\\n  }\\n\\n  /// @notice Minting operations are recorded for papertrail. This is the structure that keeps track of them.\\n  struct SupplyProof {\\n    /// @notice How...\\n    SupplyOp op;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /// @notice Every transfer in is recorded. This is the structure that keeps track of them.\\n  struct TransferProof {\\n    /// @notice Who spent...\\n    address spender;\\n    /// @notice Who performed the transfer...\\n    address from;\\n    /// @notice Who received...\\n    address to;\\n    /// @notice How much...\\n    uint256 amount;\\n    /// @notice When...\\n    uint256 blockNumber;\\n    /// @notice Why...\\n    string ref;\\n  }\\n\\n  /**\\n   * @notice Returns the history storage for the calling FAST.\\n   * @return s a struct pointer for history FAST data storage.\\n   */\\n  function data() internal pure returns (Data storage s) {\\n    assembly {\\n      s.slot := STORAGE_SLOT\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x21e2cb01ca5bc6109080cd9695296e4ae346a2936c8cae3b3c0b68cef9a90a5e\",\"license\":\"MIT\"},\"contracts/interfaces/ICustomErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface ICustomErrors {\\n  error AlreadyInitialized();\\n  error CannotSelfRemove(address who);\\n  error DuplicateEntry();\\n  error InconsistentParameter(string param);\\n  error InsufficientFunds(uint256 amount);\\n  error InterfaceNotSupported(string);\\n  error InternalMethod();\\n  error InvalidCrowdfundBasisPointsFee(uint32 fee);\\n  error InvalidPhase();\\n  error NonExistentEntry();\\n  error OutOfBounds();\\n  error Overfunded(uint256 amount);\\n  error ReentrancyError();\\n  error RequiresAutomatonsManager(address who);\\n  error RequiresContinuousSupply();\\n  error RequiresDiamondOwnership(address who);\\n  error RequiresDifferentSenderAndRecipient(address a);\\n  error RequiresFastCaller();\\n  error RequiresFastContractCaller();\\n  error RequiresFastGovernorship(address who);\\n  error RequiresFastMemberCaller();\\n  error RequiresFastMembership(address who);\\n  error RequiresGovernorsManager(address who);\\n  error RequiresIssuerMemberCaller();\\n  error RequiresIssuerMemberOrIssuerCaller();\\n  error RequiresIssuerMembership(address who);\\n  error RequiresManagerCaller();\\n  error RequiresMarketplaceActiveMembership(address who);\\n  error RequiresMarketplaceDeactivatedMember(address who);\\n  error RequiresMarketplaceMembership(address who);\\n  error RequiresMembersManager(address who);\\n  error RequiresNoFastMemberships(address who);\\n  error RequiresOwner(address who);\\n  error RequiresPositiveBalance(address holder);\\n  error RequiresTransfersEnabled();\\n  error RequiresValidGovernor(address who);\\n  error RequiresValidMember(address who);\\n  error RequiresValidTokenHolder(address who);\\n  error TokenContractError();\\n  error UnknownBeneficiary(address who);\\n  error UnknownPledger(address who);\\n  error UnsupportedOperation();\\n}\\n\",\"keccak256\":\"0xd6da7364331de0a387574a44c5a4e7555b63cfe4baaca4dfef42c5d2345f0683\",\"license\":\"MIT\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n// Directly import IERC165 from OpenZeppelin contracts.\\n// Solves an issue with 2 conflicting definitions of IERC165.\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\",\"keccak256\":\"0x4d40fa89830d0f833aacefdbab507408a29b692e37990192c6b5e4ce581db830\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title ERC173 Contract Ownership Standard\\n * @dev The ERC165 identifier for this interface is 0x7f5828d0.\\n */\\ninterface IERC173 {\\n  /// @notice This emits when ownership of a contract changes.\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /// @notice Get the address of the owner\\n  /// @return owner_ The address of the owner.\\n  function owner() external view returns (address owner_);\\n\\n  /// @notice Set the address of the new owner of the contract\\n  /// @notice Set _newOwner to address(0) to renounce any ownership.\\n  /// @param _newOwner The address of the new owner of the contract\\n  function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x797855e7870ec3c9f32dda93166bd12dc19fec66cc9a8a7a58f03339a31439c0\",\"license\":\"MIT\"},\"contracts/lib/LibAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary LibAddressSet {\\n  /// @notice Represents a list of addresses.\\n  struct Data {\\n    mapping(address => uint256) indices;\\n    address[] values;\\n  }\\n\\n  /**\\n   * @notice Adds an item into the storage set. If the address already exists in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be added.\\n   */\\n  function add(Data storage d, address key, bool noThrow) internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && exists) {\\n      return;\\n    }\\n    require(!exists, \\\"Address already in set\\\");\\n    d.indices[key] = d.values.length;\\n    d.values.push(key);\\n  }\\n\\n  /**\\n   * @notice Removes an item from the storage set. If the address does not exist in the set, the method reverts.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to be removed.\\n   */\\n  function remove(Data storage d, address key, bool noThrow) internal {\\n    bool exists = contains(d, key);\\n    if (noThrow && !exists) {\\n      return;\\n    }\\n    require(exists, \\\"Address does not exist in set\\\");\\n    address keyToMove = d.values[d.values.length - 1];\\n    uint256 idxToReplace = d.indices[key];\\n    d.indices[keyToMove] = idxToReplace;\\n    d.values[idxToReplace] = keyToMove;\\n\\n    delete d.indices[key];\\n    d.values.pop();\\n  }\\n\\n  /**\\n   * @notice Tests whether or not a given item already exists in the set.\\n   * @param d is the internal data storage to use.\\n   * @param key is the address to test.\\n   * @return a boolean.\\n   */\\n  function contains(Data storage d, address key) internal view returns (bool) {\\n    return d.values.length == 0 ? false : d.values[d.indices[key]] == key;\\n  }\\n}\\n\",\"keccak256\":\"0x47c911c8b83ffd42c9d6088104f3c2c5eac2899fdf200b3683d1de10ca96b1a8\",\"license\":\"MIT\"},\"contracts/lib/LibHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibHelpers.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\";\\n\\nlibrary LibHelpers {\\n  address internal constant ZERO_ADDRESS = address(0);\\n  address internal constant DEPLOYER_CONTRACT = 0x6DF2D25d8C6FD680730ee658b530A05a99BB769a;\\n  // SEE: https://github.com/safe-global/safe-singleton-factory\\n  address internal constant DEPLOYER_CONTRACT_EIP155 = 0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7;\\n\\n  function _isDiamondFacet(address who) internal view returns (bool) {\\n    return who == address(this);\\n  }\\n\\n  function _isDiamondOwner(address who) internal view returns (bool) {\\n    return who == IERC173(address(this)).owner();\\n  }\\n\\n  function _isDeployer(address who) internal pure returns (bool) {\\n    return (who == LibHelpers.DEPLOYER_CONTRACT) || (who == LibHelpers.DEPLOYER_CONTRACT_EIP155);\\n  }\\n}\\n\",\"keccak256\":\"0xf766b51c66d2f42625cbed10d6e17c65fbe0e38b8cadeac64bcc105fc9cf60d1\",\"license\":\"MIT\"},\"contracts/lib/LibPaginate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../fast/lib/LibFastHistory.sol\\\";\\n\\nlibrary LibPaginate {\\n  function addresses(\\n    address[] storage collection,\\n    uint256 cursor,\\n    uint256 perPage\\n  ) internal view returns (address[] memory, uint256) {\\n    uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n    address[] memory values = new address[](length);\\n    for (uint256 i = 0; i < length; ) {\\n      values[i] = collection[cursor + i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return (values, cursor + length);\\n  }\\n\\n  function uint256s(\\n    uint256[] storage collection,\\n    uint256 cursor,\\n    uint256 perPage\\n  ) internal view returns (uint256[] memory, uint256) {\\n    uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n    uint256[] memory values = new uint256[](length);\\n    for (uint256 i = 0; i < length; ) {\\n      values[i] = collection[cursor + i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return (values, cursor + length);\\n  }\\n\\n  function supplyProofs(\\n    LibFastHistory.SupplyProof[] storage collection,\\n    uint256 cursor,\\n    uint256 perPage\\n  ) internal view returns (LibFastHistory.SupplyProof[] memory, uint256) {\\n    uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n    LibFastHistory.SupplyProof[] memory values = new LibFastHistory.SupplyProof[](length);\\n    for (uint256 i = 0; i < length; ) {\\n      values[i] = collection[cursor + i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return (values, cursor + length);\\n  }\\n\\n  function transferProofs(\\n    LibFastHistory.TransferProof[] storage collection,\\n    uint256 cursor,\\n    uint256 perPage\\n  ) internal view returns (LibFastHistory.TransferProof[] memory, uint256) {\\n    uint256 length = (perPage > collection.length - cursor) ? collection.length - cursor : perPage;\\n    LibFastHistory.TransferProof[] memory values = new LibFastHistory.TransferProof[](length);\\n    for (uint256 i = 0; i < length; ) {\\n      values[i] = collection[cursor + i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return (values, cursor + length);\\n  }\\n}\\n\",\"keccak256\":\"0xf2f7e33b965e27fa953f0b95922856f42b2563f9a037a17e1973af5a496899ca\",\"license\":\"MIT\"},\"contracts/marketplace/MarketplaceForwardableFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../common/AHasForwarder.sol\\\";\\nimport \\\"./lib/AMarketplaceFacet.sol\\\";\\n\\n/**\\n * @title The Marketplace Smart Contract.\\n * @notice The Marketplace Forwardable facet is in charge of \\\"gasless transactions\\\".\\n */\\ncontract MarketplaceForwardableFacet is AMarketplaceFacet, AHasForwarder {\\n  /// AHasForwarder implementation.\\n\\n  // For now the forwarder manager is an issuer.\\n  function isValidForwarderManager(address who) internal view override(AHasForwarder) returns (bool) {\\n    return _isIssuerMember(who);\\n  }\\n}\\n\",\"keccak256\":\"0xe0a73a486dba2900d9edc39616897cb2946c577f6f10e2e7e19606a059b5c947\",\"license\":\"MIT\"},\"contracts/marketplace/lib/AMarketplaceFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../lib/LibHelpers.sol\\\";\\nimport \\\"../../common/AHasMembers.sol\\\";\\nimport \\\"../../interfaces/ICustomErrors.sol\\\";\\nimport \\\"../lib/LibMarketplace.sol\\\";\\nimport \\\"./IMarketplaceEvents.sol\\\";\\n\\n/**\\n * @notice This contract is a group of modifiers that can be used by any Marketplace facets to guard against\\n *       certain permissions.\\n */\\nabstract contract AMarketplaceFacet is IMarketplaceEvents {\\n  /// Internal ACL functions.\\n\\n  function _isIssuerMember(address who) internal view returns (bool) {\\n    return AHasMembers(LibMarketplace.data().issuer).isMember(who);\\n  }\\n\\n  // Modifiers.\\n\\n  /// @notice Ensures that a method can only be called by the singleton deployer contract factory.\\n  modifier onlyDeployer() virtual {\\n    if (!LibHelpers._isDeployer(msg.sender)) revert ICustomErrors.InternalMethod();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Requires that the message sender is a member of the linked Issuer.\\n   */\\n  modifier onlyIssuerMember() virtual {\\n    if (!_isIssuerMember(msg.sender)) revert ICustomErrors.RequiresIssuerMembership(msg.sender);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Requires that the given address is a member of the marketplace.\\n   * @param who is the address to be checked.\\n   */\\n  modifier onlyMember(address who) virtual {\\n    if (!AHasMembers(address(this)).isMember(who)) revert ICustomErrors.RequiresMarketplaceMembership(who);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xb9569fef0cef86a40828714a131f6dafb98ae4cd21ff44e710f8e57413bd6ffb\",\"license\":\"MIT\"},\"contracts/marketplace/lib/IMarketplaceEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IMarketplaceEvents {\\n  /// @dev See `IHasActiveMembers`.\\n  event MemberActivated(address indexed member);\\n  /// @dev See `IHasActiveMembers`.\\n  event MemberDeactivated(address indexed member);\\n  /// @dev Emitted when a FAST deployment is requested.\\n  event FastDeploymentRequested(uint256 indexed index);\\n}\\n\",\"keccak256\":\"0xeb89df40f51b42b444f698f8d13cf4318396f9393d7fab049c131e2f6bd45b4d\",\"license\":\"MIT\"},\"contracts/marketplace/lib/LibMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary LibMarketplace {\\n  // The current version of the storage.\\n  uint16 internal constant STORAGE_VERSION = 1;\\n  // This is keccak256('Marketplace.storage'):\\n  bytes32 internal constant STORAGE_SLOT = 0xb59ec141376cee83f618e10e881bbb4789cdeee27e0d441a8c37ead3cb8b93c1;\\n\\n  struct Data {\\n    /// @notice The latest intializer version that was called.\\n    uint16 version;\\n    /// @notice The internal pointer to the Issuer contract.\\n    address issuer;\\n  }\\n\\n  function data() internal pure returns (Data storage s) {\\n    assembly {\\n      s.slot := STORAGE_SLOT\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x03c52542f4b27ba631639502855cdc9d5e56347c254595b42a7d6567441933bb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610483806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063572b6c0514610046578063ce1b815f146100af578063da74222814610112575b600080fd5b61009a6100543660046103ee565b7fa9930c2ffa1b605b0243ba36b3020146bcba5a29c05a711f5ca7c705a8e851ca5462010000900473ffffffffffffffffffffffffffffffffffffffff90811691161490565b60405190151581526020015b60405180910390f35b7fa9930c2ffa1b605b0243ba36b3020146bcba5a29c05a711f5ca7c705a8e851ca5462010000900473ffffffffffffffffffffffffffffffffffffffff1660405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a6565b6101256101203660046103ee565b610127565b005b61013033610321565b61016d576040517fe88af4e30000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f25e23e6400000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa1580156101f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021b919061042b565b610281576040517f216bf93000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f49466f72776172646572000000000000000000000000000000000000000000006044820152606401610164565b7fa9930c2ffa1b605b0243ba36b3020146bcba5a29c05a711f5ca7c705a8e851ca805473ffffffffffffffffffffffffffffffffffffffff83166201000081027fffffffffffffffffffff0000000000000000000000000000000000000000ffff90921691909117825560408051918252517f9ecfd97bf22760e90779a4364f3646d6cbb7e6207b75280c803ca569a34234a09181900360200190a15050565b600061032c82610332565b92915050565b60007fb59ec141376cee83f618e10e881bbb4789cdeee27e0d441a8c37ead3cb8b93c1546040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152620100009092049091169063a230c52490602401602060405180830381865afa1580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032c919061042b565b60006020828403121561040057600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461042457600080fd5b9392505050565b60006020828403121561043d57600080fd5b8151801515811461042457600080fdfea264697066735822122082e064a0d1b7a3ba624ba17f2aaf504495ef1002092ea940e3266d3549e5685c64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063572b6c0514610046578063ce1b815f146100af578063da74222814610112575b600080fd5b61009a6100543660046103ee565b7fa9930c2ffa1b605b0243ba36b3020146bcba5a29c05a711f5ca7c705a8e851ca5462010000900473ffffffffffffffffffffffffffffffffffffffff90811691161490565b60405190151581526020015b60405180910390f35b7fa9930c2ffa1b605b0243ba36b3020146bcba5a29c05a711f5ca7c705a8e851ca5462010000900473ffffffffffffffffffffffffffffffffffffffff1660405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a6565b6101256101203660046103ee565b610127565b005b61013033610321565b61016d576040517fe88af4e30000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f25e23e6400000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa1580156101f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021b919061042b565b610281576040517f216bf93000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f49466f72776172646572000000000000000000000000000000000000000000006044820152606401610164565b7fa9930c2ffa1b605b0243ba36b3020146bcba5a29c05a711f5ca7c705a8e851ca805473ffffffffffffffffffffffffffffffffffffffff83166201000081027fffffffffffffffffffff0000000000000000000000000000000000000000ffff90921691909117825560408051918252517f9ecfd97bf22760e90779a4364f3646d6cbb7e6207b75280c803ca569a34234a09181900360200190a15050565b600061032c82610332565b92915050565b60007fb59ec141376cee83f618e10e881bbb4789cdeee27e0d441a8c37ead3cb8b93c1546040517fa230c52400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152620100009092049091169063a230c52490602401602060405180830381865afa1580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032c919061042b565b60006020828403121561040057600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461042457600080fd5b9392505050565b60006020828403121561043d57600080fd5b8151801515811461042457600080fdfea264697066735822122082e064a0d1b7a3ba624ba17f2aaf504495ef1002092ea940e3266d3549e5685c64736f6c634300080a0033",
  "devdoc": {
    "errors": {
      "RequiresForwarderManager(address)": [
        {
          "params": {
            "who": "is the address that called the function."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "getTrustedForwarder()": {
        "returns": {
          "forwarderAddress": "The address of the Forwarder contract that is being used."
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "_forwarderAddress": "the forwarder address."
        },
        "returns": {
          "_0": "bool if the forwarder is trusted."
        }
      },
      "setTrustedForwarder(address)": {
        "params": {
          "_forwarderAddress": "the forwarder address."
        }
      }
    },
    "title": "The Marketplace Smart Contract.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "RequiresForwarderManager(address)": [
        {
          "notice": "Happens when a function is called by a non forwarder manager."
        }
      ]
    },
    "events": {
      "ForwarderChanged(address)": {
        "notice": "Emited when a forwarder is set on an implementing contract."
      }
    },
    "kind": "user",
    "methods": {
      "getTrustedForwarder()": {
        "notice": "WARNING: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet."
      },
      "isTrustedForwarder(address)": {
        "notice": "ERC2771Recipient implementation."
      },
      "setTrustedForwarder(address)": {
        "notice": "ERC2771Recipient implementation."
      }
    },
    "notice": "The Marketplace Forwardable facet is in charge of \"gasless transactions\".",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}