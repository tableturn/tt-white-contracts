{
  "address": "0x6d57Dff87ED83c85Bcd79560AFc95004F398D6E2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_penalizeBlockDelay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_penalizeBlockExpiration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "commitHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "readyBlockNumber",
          "type": "uint256"
        }
      ],
      "name": "CommitAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitHash",
          "type": "bytes32"
        }
      ],
      "name": "commit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "rawTransaction",
          "type": "bytes"
        }
      ],
      "name": "decodeTransaction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IPenalizer.Transaction",
          "name": "transaction",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPenalizeBlockDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPenalizeBlockExpiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "rawTransaction",
          "type": "bytes"
        }
      ],
      "name": "isTransactionTypeValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "unsignedTx",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "contract IRelayHub",
          "name": "hub",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "randomValue",
          "type": "uint256"
        }
      ],
      "name": "penalizeIllegalTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "unsignedTx1",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature1",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "unsignedTx2",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature2",
          "type": "bytes"
        },
        {
          "internalType": "contract IRelayHub",
          "name": "hub",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "randomValue",
          "type": "uint256"
        }
      ],
      "name": "penalizeRepeatedNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionPenalizer",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xab282b3bb7b7a6d4b7bf9ffca408c8053de01807401ba7f38e87e96fc91703b7",
  "receipt": {
    "to": null,
    "from": "0x61B1E290d2F465d6667336d4934941aa2517AfA2",
    "contractAddress": "0x6d57Dff87ED83c85Bcd79560AFc95004F398D6E2",
    "transactionIndex": 0,
    "gasUsed": "1685912",
    "logsBloom": "0x
    "blockHash": "0xf7e694602d02a5db34643ed74e28b449bf2d97fd16347e1268c18893aeac697e",
    "transactionHash": "0xab282b3bb7b7a6d4b7bf9ffca408c8053de01807401ba7f38e87e96fc91703b7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4880201,
        "transactionHash": "0xab282b3bb7b7a6d4b7bf9ffca408c8053de01807401ba7f38e87e96fc91703b7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000061b1e290d2f465d6667336d4934941aa2517afa2",
          "0x000000000000000000000000ac75d6efec891724b88b916b36e2ef38bcbec73f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001675fae8f7260180000000000000000000000000000000000000000000000000537b785fc4a8000000000000000000000000000000000000000000000000017467ec6e432168cf900000000000000000000000000000000000000000000000003d057d76cd81fe800000000000000000000000000000000000000000000001747e62692c188ed11",
        "logIndex": 0,
        "blockHash": "0xf7e694602d02a5db34643ed74e28b449bf2d97fd16347e1268c18893aeac697e"
      }
    ],
    "blockNumber": 4880201,
    "cumulativeGasUsed": "1685912",
    "status": 1,
    "byzantium": true
  },
  "args": [
    5,
    5
  ],
  "numDeployments": 1,
  "solcInputHash": "766eaa539015b343a6f8732a84d5a9ae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_penalizeBlockDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penalizeBlockExpiration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"readyBlockNumber\",\"type\":\"uint256\"}],\"name\":\"CommitAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rawTransaction\",\"type\":\"bytes\"}],\"name\":\"decodeTransaction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IPenalizer.Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPenalizeBlockDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPenalizeBlockExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rawTransaction\",\"type\":\"bytes\"}],\"name\":\"isTransactionTypeValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"unsignedTx\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"contract IRelayHub\",\"name\":\"hub\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"randomValue\",\"type\":\"uint256\"}],\"name\":\"penalizeIllegalTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"unsignedTx1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"unsignedTx2\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature2\",\"type\":\"bytes\"},{\"internalType\":\"contract IRelayHub\",\"name\":\"hub\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"randomValue\",\"type\":\"uint256\"}],\"name\":\"penalizeRepeatedNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionPenalizer\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"commit(bytes32)\":{\"params\":{\"commitHash\":\"The hash of the report of a penalizable behaviour the reporter wants to reveal. Calculated as `commit(keccak(encodedPenalizeFunction))`.\"}},\"decodeTransaction(bytes)\":{\"returns\":{\"transaction\":\"The details that the `Penalizer` needs to decide if the transaction is penalizable.\"}},\"getPenalizeBlockDelay()\":{\"returns\":{\"_0\":\"The minimum delay between commit and reveal steps.\"}},\"getPenalizeBlockExpiration()\":{\"returns\":{\"_0\":\"The maximum delay between commit and reveal steps.\"}},\"isTransactionTypeValid(bytes)\":{\"returns\":{\"_0\":\"`true` if raw transaction is of types Legacy, 1 or 2. `false` otherwise.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"stateVariables\":{\"versionPenalizer\":{\"return\":\"a SemVer-compliant version of the `Penalizer` contract.\",\"returns\":{\"_0\":\"a SemVer-compliant version of the `Penalizer` contract.\"}}},\"title\":\"The Penalizer Implementation\",\"version\":1},\"userdoc\":{\"events\":{\"CommitAdded(address,bytes32,uint256)\":{\"notice\":\"Emitted once the reporter submits the first step in the commit-reveal process.\"}},\"kind\":\"user\",\"methods\":{\"commit(bytes32)\":{\"notice\":\"Called by the reporter as the first step in the commit-reveal process. Any sender can call it to make sure no-one can front-run it to claim this penalization.\"},\"penalizeIllegalTransaction(bytes,bytes,address,uint256)\":{\"notice\":\"Called by the reporter as the second step in the commit-reveal process. The Relay Workers are not allowed to make calls other than to the `relayCall` method.\"},\"penalizeRepeatedNonce(bytes,bytes,bytes,bytes,address,uint256)\":{\"notice\":\"Called by the reporter as the second step in the commit-reveal process. If a Relay Worker attacked the system by signing multiple transactions with same nonce so only one is accepted, anyone can grab both transactions from the blockchain and submit them here. Check whether `unsignedTx1` != `unsignedTx2`, that both are signed by the same address, and that `unsignedTx1.nonce` == `unsignedTx2.nonce`. If all conditions are met, relay is considered an \\\"offending relay\\\". The offending relay will be unregistered immediately, its stake will be forfeited and given to the address who reported it (the `msg.sender`), thus incentivizing anyone to report offending relays.\"}},\"notice\":\"This Penalizer supports parsing Legacy, Type 1 and Type 2 raw RLP Encoded transactions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@opengsn/contracts/src/Penalizer.sol\":\"Penalizer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/Penalizer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport \\\"./utils/RLPReader.sol\\\";\\nimport \\\"./utils/GsnUtils.sol\\\";\\nimport \\\"./interfaces/IRelayHub.sol\\\";\\nimport \\\"./interfaces/IPenalizer.sol\\\";\\n\\n/**\\n * @title The Penalizer Implementation\\n *\\n * @notice This Penalizer supports parsing Legacy, Type 1 and Type 2 raw RLP Encoded transactions.\\n */\\ncontract Penalizer is IPenalizer, ERC165 {\\n    using ECDSA for bytes32;\\n\\n    /// @inheritdoc IPenalizer\\n    string public override versionPenalizer = \\\"3.0.0-beta.3+opengsn.penalizer.ipenalizer\\\";\\n\\n    uint256 internal immutable penalizeBlockDelay;\\n    uint256 internal immutable penalizeBlockExpiration;\\n\\n    constructor(\\n        uint256 _penalizeBlockDelay,\\n        uint256 _penalizeBlockExpiration\\n    ) {\\n        penalizeBlockDelay = _penalizeBlockDelay;\\n        penalizeBlockExpiration = _penalizeBlockExpiration;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IPenalizer).interfaceId ||\\n        super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc IPenalizer\\n    function getPenalizeBlockDelay() external override view returns (uint256) {\\n        return penalizeBlockDelay;\\n    }\\n\\n    /// @inheritdoc IPenalizer\\n    function getPenalizeBlockExpiration() external override view returns (uint256) {\\n        return penalizeBlockExpiration;\\n    }\\n\\n    function isLegacyTransaction(bytes calldata rawTransaction) internal pure returns (bool) {\\n        uint8 transactionTypeByte = uint8(rawTransaction[0]);\\n        return (transactionTypeByte >= 0xc0 && transactionTypeByte <= 0xfe);\\n    }\\n\\n    function isTransactionType1(bytes calldata rawTransaction) internal pure returns (bool) {\\n        return (uint8(rawTransaction[0]) == 1);\\n    }\\n\\n    function isTransactionType2(bytes calldata rawTransaction) internal pure returns (bool) {\\n        return (uint8(rawTransaction[0]) == 2);\\n    }\\n\\n    /// @return `true` if raw transaction is of types Legacy, 1 or 2. `false` otherwise.\\n    function isTransactionTypeValid(bytes calldata rawTransaction) public pure returns(bool) {\\n        return isLegacyTransaction(rawTransaction) || isTransactionType1(rawTransaction) || isTransactionType2(rawTransaction);\\n    }\\n\\n    /// @return transaction The details that the `Penalizer` needs to decide if the transaction is penalizable.\\n    function decodeTransaction(bytes calldata rawTransaction) public pure returns (Transaction memory transaction) {\\n        if (isTransactionType1(rawTransaction)) {\\n            (transaction.nonce,\\n            transaction.gasLimit,\\n            transaction.to,\\n            transaction.value,\\n            transaction.data) = RLPReader.decodeTransactionType1(rawTransaction);\\n        } else if (isTransactionType2(rawTransaction)) {\\n            (transaction.nonce,\\n            transaction.gasLimit,\\n            transaction.to,\\n            transaction.value,\\n            transaction.data) = RLPReader.decodeTransactionType2(rawTransaction);\\n        } else {\\n            (transaction.nonce,\\n            transaction.gasLimit,\\n            transaction.to,\\n            transaction.value,\\n            transaction.data) = RLPReader.decodeLegacyTransaction(rawTransaction);\\n        }\\n        return transaction;\\n    }\\n\\n    mapping(bytes32 => uint256) public commits;\\n\\n    /// @inheritdoc IPenalizer\\n    function commit(bytes32 commitHash) external override {\\n        uint256 readyBlockNumber = block.number + penalizeBlockDelay;\\n        commits[commitHash] = readyBlockNumber;\\n        emit CommitAdded(msg.sender, commitHash, readyBlockNumber);\\n    }\\n\\n    /// Modifier that verifies there was a `commit` operation before this call that has not expired yet.\\n    modifier commitRevealOnly() {\\n        bytes32 commitHash = keccak256(abi.encodePacked(keccak256(msg.data), msg.sender));\\n        uint256 readyBlockNumber = commits[commitHash];\\n        delete commits[commitHash];\\n        // msg.sender can only be fake during off-chain view call, allowing Penalizer process to check transactions\\n        if(msg.sender != address(type(uint160).max)) {\\n            require(readyBlockNumber != 0, \\\"no commit\\\");\\n            require(readyBlockNumber < block.number, \\\"reveal penalize too soon\\\");\\n            require(readyBlockNumber + penalizeBlockExpiration > block.number, \\\"reveal penalize too late\\\");\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IPenalizer\\n    function penalizeRepeatedNonce(\\n        bytes calldata unsignedTx1,\\n        bytes calldata signature1,\\n        bytes calldata unsignedTx2,\\n        bytes calldata signature2,\\n        IRelayHub hub,\\n        uint256 randomValue\\n    )\\n    public\\n    override\\n    commitRevealOnly {\\n        (randomValue);\\n        _penalizeRepeatedNonce(unsignedTx1, signature1, unsignedTx2, signature2, hub);\\n    }\\n\\n    function _penalizeRepeatedNonce(\\n        bytes calldata unsignedTx1,\\n        bytes calldata signature1,\\n        bytes calldata unsignedTx2,\\n        bytes calldata signature2,\\n        IRelayHub hub\\n    )\\n    private\\n    {\\n        address addr1 = keccak256(unsignedTx1).recover(signature1);\\n        address addr2 = keccak256(unsignedTx2).recover(signature2);\\n\\n        require(addr1 == addr2, \\\"Different signer\\\");\\n        require(addr1 != address(0), \\\"ecrecover failed\\\");\\n\\n        Transaction memory decodedTx1 = decodeTransaction(unsignedTx1);\\n        Transaction memory decodedTx2 = decodeTransaction(unsignedTx2);\\n\\n        // checking that the same nonce is used in both transaction, with both signed by the same address\\n        // and the actual data is different\\n        // note: we compare the hash of the tx to save gas over iterating both byte arrays\\n        require(decodedTx1.nonce == decodedTx2.nonce, \\\"Different nonce\\\");\\n\\n        bytes memory dataToCheck1 =\\n        abi.encodePacked(decodedTx1.data, decodedTx1.gasLimit, decodedTx1.to, decodedTx1.value);\\n\\n        bytes memory dataToCheck2 =\\n        abi.encodePacked(decodedTx2.data, decodedTx2.gasLimit, decodedTx2.to, decodedTx2.value);\\n\\n        require(keccak256(dataToCheck1) != keccak256(dataToCheck2), \\\"tx is equal\\\");\\n\\n        penalize(addr1, hub);\\n    }\\n\\n    /// @inheritdoc IPenalizer\\n    function penalizeIllegalTransaction(\\n        bytes calldata unsignedTx,\\n        bytes calldata signature,\\n        IRelayHub hub,\\n        uint256 randomValue\\n    )\\n    public\\n    override\\n    commitRevealOnly {\\n        (randomValue);\\n        _penalizeIllegalTransaction(unsignedTx, signature, hub);\\n    }\\n\\n    function _penalizeIllegalTransaction(\\n        bytes calldata unsignedTx,\\n        bytes calldata signature,\\n        IRelayHub hub\\n    )\\n    private\\n    {\\n        if (isTransactionTypeValid(unsignedTx)) {\\n            Transaction memory decodedTx = decodeTransaction(unsignedTx);\\n            if (decodedTx.to == address(hub)) {\\n                bytes4 selector = GsnUtils.getMethodSig(decodedTx.data);\\n                bool isWrongMethodCall = selector != IRelayHub.relayCall.selector;\\n                require(\\n                    isWrongMethodCall,\\n                    \\\"Legal relay transaction\\\");\\n            }\\n        }\\n        address relay = keccak256(unsignedTx).recover(signature);\\n        require(relay != address(0), \\\"ecrecover failed\\\");\\n        penalize(relay, hub);\\n    }\\n\\n    function penalize(address relayWorker, IRelayHub hub) private {\\n        hub.penalize(relayWorker, payable(msg.sender));\\n    }\\n}\\n\",\"keccak256\":\"0x3e0cae81291ac5f282f2ae4deab0ad5bcc0e5c338188808566bfde607d89c148\",\"license\":\"GPL-3.0-only\"},\"@opengsn/contracts/src/forwarder/IForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\n/**\\n * @title The Forwarder Interface\\n * @notice The contracts implementing this interface take a role of authorization, authentication and replay protection\\n * for contracts that choose to trust a `Forwarder`, instead of relying on a mechanism built into the Ethereum protocol.\\n *\\n * @notice if the `Forwarder` contract decides that an incoming `ForwardRequest` is valid, it must append 20 bytes that\\n * represent the caller to the `data` field of the request and send this new data to the target address (the `to` field)\\n *\\n * :warning: **Warning** :warning: The Forwarder can have a full control over a `Recipient` contract.\\n * Any vulnerability in a `Forwarder` implementation can make all of its `Recipient` contracts susceptible!\\n * Recipient contracts should only trust forwarders that passed through security audit,\\n * otherwise they are susceptible to identity theft.\\n */\\ninterface IForwarder is IERC165 {\\n\\n    /**\\n     * @notice A representation of a request for a `Forwarder` to send `data` on behalf of a `from` to a target (`to`).\\n     */\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n        uint256 validUntilTime;\\n    }\\n\\n    event DomainRegistered(bytes32 indexed domainSeparator, bytes domainValue);\\n\\n    event RequestTypeRegistered(bytes32 indexed typeHash, string typeStr);\\n\\n    /**\\n     * @param from The address of a sender.\\n     * @return The nonce for this address.\\n     */\\n    function getNonce(address from)\\n    external view\\n    returns(uint256);\\n\\n    /**\\n     * @notice Verify the transaction is valid and can be executed.\\n     * Implementations must validate the signature and the nonce of the request are correct.\\n     * Does not revert and returns successfully if the input is valid.\\n     * Reverts if any validation has failed. For instance, if either signature or nonce are incorrect.\\n     * Reverts if `domainSeparator` or `requestTypeHash` are not registered as well.\\n     */\\n    function verify(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    ) external view;\\n\\n    /**\\n     * @notice Executes a transaction specified by the `ForwardRequest`.\\n     * The transaction is first verified and then executed.\\n     * The success flag and returned bytes array of the `CALL` are returned as-is.\\n     *\\n     * This method would revert only in case of a verification error.\\n     *\\n     * All the target errors are reported using the returned success flag and returned bytes array.\\n     *\\n     * @param forwardRequest All requested transaction parameters.\\n     * @param domainSeparator The domain used when signing this request.\\n     * @param requestTypeHash The request type used when signing this request.\\n     * @param suffixData The ABI-encoded extension data for the current `RequestType` used when signing this request.\\n     * @param signature The client signature to be validated.\\n     *\\n     * @return success The success flag of the underlying `CALL` to the target address.\\n     * @return ret The byte array returned by the underlying `CALL` to the target address.\\n     */\\n    function execute(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    )\\n    external payable\\n    returns (bool success, bytes memory ret);\\n\\n    /**\\n     * @notice Register a new Request typehash.\\n     *\\n     * @notice This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\\n     *\\n     * @param typeName The name of the request type.\\n     * @param typeSuffix Any extra data after the generic params. Must contain add at least one param.\\n     * The generic ForwardRequest type is always registered by the constructor.\\n     */\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external;\\n\\n    /**\\n     * @notice Register a new domain separator.\\n     *\\n     * @notice This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\\n     *\\n     * @notice The domain separator must have the following fields: `name`, `version`, `chainId`, `verifyingContract`.\\n     * The `chainId` is the current network's `chainId`, and the `verifyingContract` is this Forwarder's address.\\n     * This method accepts the domain name and version to create and register the domain separator value.\\n     * @param name The domain's display name.\\n     * @param version The domain/protocol version.\\n     */\\n    function registerDomainSeparator(string calldata name, string calldata version) external;\\n}\\n\",\"keccak256\":\"0x28669953bd3dcc98a5f959fa3cac97444584b6fbe59341681b9a59f11a83b171\",\"license\":\"GPL-3.0-only\"},\"@opengsn/contracts/src/interfaces/IPenalizer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.6;\\n\\nimport \\\"./IRelayHub.sol\\\";\\n\\n/**\\n * @title The Penalizer Interface\\n * @notice In some cases the behavior of a Relay Server may be found to be illegal.\\n * It is the responsibility of a `Penalizer` contract to judge whether there was a penalizable event.\\n *\\n * @notice In case there was, the `Penalizer` will direct the `RelayHub` to slash the stake of the faulty Relay Server.\\n */\\ninterface IPenalizer is IERC165 {\\n\\n    /// @notice Emitted once the reporter submits the first step in the commit-reveal process.\\n    event CommitAdded(address indexed sender, bytes32 indexed commitHash, uint256 readyBlockNumber);\\n\\n    struct Transaction {\\n        uint256 nonce;\\n        uint256 gasLimit;\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /**\\n     * @notice Called by the reporter as the first step in the commit-reveal process.\\n     * Any sender can call it to make sure no-one can front-run it to claim this penalization.\\n     * @param commitHash The hash of the report of a penalizable behaviour the reporter wants to reveal.\\n     * Calculated as `commit(keccak(encodedPenalizeFunction))`.\\n     */\\n    function commit(bytes32 commitHash) external;\\n\\n    /**\\n     * @notice Called by the reporter as the second step in the commit-reveal process.\\n     * If a Relay Worker attacked the system by signing multiple transactions with same nonce so only one is accepted,\\n     * anyone can grab both transactions from the blockchain and submit them here.\\n     * Check whether `unsignedTx1` != `unsignedTx2`, that both are signed by the same address,\\n     * and that `unsignedTx1.nonce` == `unsignedTx2.nonce`.\\n     * If all conditions are met, relay is considered an \\\"offending relay\\\".\\n     * The offending relay will be unregistered immediately, its stake will be forfeited and given\\n     * to the address who reported it (the `msg.sender`), thus incentivizing anyone to report offending relays.\\n     */\\n    function penalizeRepeatedNonce(\\n        bytes calldata unsignedTx1,\\n        bytes calldata signature1,\\n        bytes calldata unsignedTx2,\\n        bytes calldata signature2,\\n        IRelayHub hub,\\n        uint256 randomValue\\n    ) external;\\n\\n    /**\\n     * @notice Called by the reporter as the second step in the commit-reveal process.\\n     * The Relay Workers are not allowed to make calls other than to the `relayCall` method.\\n     */\\n    function penalizeIllegalTransaction(\\n        bytes calldata unsignedTx,\\n        bytes calldata signature,\\n        IRelayHub hub,\\n        uint256 randomValue\\n    ) external;\\n\\n    /// @return a SemVer-compliant version of the `Penalizer` contract.\\n    function versionPenalizer() external view returns (string memory);\\n\\n    /// @return The minimum delay between commit and reveal steps.\\n    function getPenalizeBlockDelay() external view returns (uint256);\\n\\n    /// @return The maximum delay between commit and reveal steps.\\n    function getPenalizeBlockExpiration() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xafe97a535087b1a3a8d2170f675c673ba56d5c5b3dd9d9bdd5c66528cb653b3d\",\"license\":\"GPL-3.0-only\"},\"@opengsn/contracts/src/interfaces/IRelayHub.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\nimport \\\"../utils/GsnTypes.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\n\\n/**\\n * @title The RelayHub interface\\n * @notice The implementation of this interface provides all the information the GSN client needs to\\n * create a valid `RelayRequest` and also serves as an entry point for such requests.\\n *\\n * @notice The RelayHub also handles all the related financial records and hold the balances of participants.\\n * The Paymasters keep their Ether deposited in the `RelayHub` in order to pay for the `RelayRequest`s that thay choose\\n * to pay for, and Relay Servers keep their earned Ether in the `RelayHub` until they choose to `withdraw()`\\n *\\n * @notice The RelayHub on each supported network only needs a single instance and there is usually no need for dApp\\n * developers or Relay Server operators to redeploy, reimplement, modify or override the `RelayHub`.\\n */\\ninterface IRelayHub is IERC165 {\\n    /**\\n     * @notice A struct that contains all the parameters of the `RelayHub` that can be modified after the deployment.\\n     */\\n    struct RelayHubConfig {\\n        // maximum number of worker accounts allowed per manager\\n        uint256 maxWorkerCount;\\n        // Gas set aside for all relayCall() instructions to prevent unexpected out-of-gas exceptions\\n        uint256 gasReserve;\\n        // Gas overhead to calculate gasUseWithoutPost\\n        uint256 postOverhead;\\n        // Gas cost of all relayCall() instructions after actual 'calculateCharge()'\\n        // Assume that relay has non-zero balance (costs 15'000 more otherwise).\\n        uint256 gasOverhead;\\n        // Minimum unstake delay seconds of a relay manager's stake on the StakeManager\\n        uint256 minimumUnstakeDelay;\\n        // Developers address\\n        address devAddress;\\n        // 0 < fee < 100, as percentage of total charge from paymaster to relayer\\n        uint8 devFee;\\n        // baseRelayFee The base fee the Relay Server charges for a single transaction in Ether, in wei.\\n        uint80 baseRelayFee;\\n        // pctRelayFee The percent of the total charge to add as a Relay Server fee to the total charge.\\n        uint16 pctRelayFee;\\n    }\\n\\n    /// @notice Emitted when a configuration of the `RelayHub` is changed\\n    event RelayHubConfigured(RelayHubConfig config);\\n\\n    /// @notice Emitted when relays are added by a relayManager\\n    event RelayWorkersAdded(\\n        address indexed relayManager,\\n        address[] newRelayWorkers,\\n        uint256 workersCount\\n    );\\n\\n    /// @notice Emitted when an account withdraws funds from the `RelayHub`.\\n    event Withdrawn(\\n        address indexed account,\\n        address indexed dest,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted when `depositFor` is called, including the amount and account that was funded.\\n    event Deposited(\\n        address indexed paymaster,\\n        address indexed from,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted for each token configured for staking in setMinimumStakes\\n    event StakingTokenDataChanged(\\n        address token,\\n        uint256 minimumStake\\n    );\\n\\n    /**\\n     * @notice Emitted when an attempt to relay a call fails and the `Paymaster` does not accept the transaction.\\n     * The actual relayed call was not executed, and the recipient not charged.\\n     * @param reason contains a revert reason returned from preRelayedCall or forwarder.\\n     */\\n    event TransactionRejectedByPaymaster(\\n        address indexed relayManager,\\n        address indexed paymaster,\\n        bytes32 indexed relayRequestID,\\n        address from,\\n        address to,\\n        address relayWorker,\\n        bytes4 selector,\\n        uint256 innerGasUsed,\\n        bytes reason\\n    );\\n\\n    /**\\n     * @notice Emitted when a transaction is relayed. Note that the actual internal function call might be reverted.\\n     * The reason for a revert will be indicated in the `status` field of a corresponding `RelayCallStatus` value.\\n     * @notice `charge` is the Ether value deducted from the `Paymaster` balance.\\n     * The amount added to the `relayManager` balance will be lower if there is an activated `devFee` in the `config`.\\n     */\\n    event TransactionRelayed(\\n        address indexed relayManager,\\n        address indexed relayWorker,\\n        bytes32 indexed relayRequestID,\\n        address from,\\n        address to,\\n        address paymaster,\\n        bytes4 selector,\\n        RelayCallStatus status,\\n        uint256 charge\\n    );\\n\\n    /// @notice This event is emitted in case the internal function returns a value or reverts with a revert string.\\n    event TransactionResult(\\n        RelayCallStatus status,\\n        bytes returnValue\\n    );\\n\\n    /// @notice This event is emitted in case this `RelayHub` is deprecated and will stop serving transactions soon.\\n    event HubDeprecated(uint256 deprecationTime);\\n\\n    /**\\n     * @notice This event is emitted in case a `relayManager` has been deemed \\\"abandoned\\\" for being\\n     * unresponsive for a prolonged period of time.\\n     * @notice This event means the entire balance of the relay has been transferred to the `devAddress`.\\n     */\\n    event AbandonedRelayManagerBalanceEscheated(\\n        address indexed relayManager,\\n        uint256 balance\\n    );\\n\\n    /**\\n     * Error codes that describe all possible failure reasons reported in the `TransactionRelayed` event `status` field.\\n     *  @param OK The transaction was successfully relayed and execution successful - never included in the event.\\n     *  @param RelayedCallFailed The transaction was relayed, but the relayed call failed.\\n     *  @param RejectedByPreRelayed The transaction was not relayed due to preRelatedCall reverting.\\n     *  @param RejectedByForwarder The transaction was not relayed due to forwarder check (signature,nonce).\\n     *  @param PostRelayedFailed The transaction was relayed and reverted due to postRelatedCall reverting.\\n     *  @param PaymasterBalanceChanged The transaction was relayed and reverted due to the paymaster balance change.\\n     */\\n    enum RelayCallStatus {\\n        OK,\\n        RelayedCallFailed,\\n        RejectedByPreRelayed,\\n        RejectedByForwarder,\\n        RejectedByRecipientRevert,\\n        PostRelayedFailed,\\n        PaymasterBalanceChanged\\n    }\\n\\n    /**\\n     * @notice Add new worker addresses controlled by the sender who must be a staked Relay Manager address.\\n     * Emits a `RelayWorkersAdded` event.\\n     * This function can be called multiple times, emitting new events.\\n     */\\n    function addRelayWorkers(address[] calldata newRelayWorkers) external;\\n\\n    /**\\n     * @notice The `RelayRegistrar` callback to notify the `RelayHub` that this `relayManager` has updated registration.\\n     */\\n    function onRelayServerRegistered(address relayManager) external;\\n\\n    // Balance management\\n\\n    /**\\n     * @notice Deposits ether for a `Paymaster`, so that it can and pay for relayed transactions.\\n     * :warning: **Warning** :warning: Unused balance can only be withdrawn by the holder itself, by calling `withdraw`.\\n     * Emits a `Deposited` event.\\n     */\\n    function depositFor(address target) external payable;\\n\\n    /**\\n     * @notice Withdraws from an account's balance, sending it back to the caller.\\n     * Relay Managers call this to retrieve their revenue, and `Paymasters` can also use it to reduce their funding.\\n     * Emits a `Withdrawn` event.\\n     */\\n    function withdraw(address payable dest, uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraws from an account's balance, sending funds to multiple provided addresses.\\n     * Relay Managers call this to retrieve their revenue, and `Paymasters` can also use it to reduce their funding.\\n     * Emits a `Withdrawn` event for each destination.\\n     */\\n    function withdrawMultiple(address payable[] memory dest, uint256[] memory amount) external;\\n\\n    // Relaying\\n\\n\\n    /**\\n     * @notice Relays a transaction. For this to succeed, multiple conditions must be met:\\n     *  - `Paymaster`'s `preRelayCall` method must succeed and not revert.\\n     *  - the `msg.sender` must be a registered Relay Worker that the user signed to use.\\n     *  - the transaction's gas fees must be equal or larger than the ones that were signed by the sender.\\n     *  - the transaction must have enough gas to run all internal transactions if they use all gas available to them.\\n     *  - the `Paymaster` must have enough balance to pay the Relay Worker if all gas is spent.\\n     *\\n     * @notice If all conditions are met, the call will be relayed and the `Paymaster` charged.\\n     *\\n     * @param domainSeparatorName The name of the Domain Separator used to verify the EIP-712 signature\\n     * @param maxAcceptanceBudget The maximum valid value for `paymaster.getGasLimits().acceptanceBudget` to return.\\n     * @param relayRequest All details of the requested relayed call.\\n     * @param signature The client's EIP-712 signature over the `relayRequest` struct.\\n     * @param approvalData The dapp-specific data forwarded to the `Paymaster`'s `preRelayedCall` method.\\n     * This value is **not** verified by the `RelayHub` in any way.\\n     * As an example, it can be used to pass some kind of a third-party signature to the `Paymaster` for verification.\\n     *\\n     * Emits a `TransactionRelayed` event regardless of whether the transaction succeeded or failed.\\n     */\\n    function relayCall(\\n        string calldata domainSeparatorName,\\n        uint256 maxAcceptanceBudget,\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData\\n    )\\n    external\\n    returns (\\n        bool paymasterAccepted,\\n        uint256 charge,\\n        IRelayHub.RelayCallStatus status,\\n        bytes memory returnValue\\n    );\\n\\n    /**\\n     * @notice In case the Relay Worker has been found to be in violation of some rules by the `Penalizer` contract,\\n     * the `Penalizer` will call this method to execute a penalization.\\n     * The `RelayHub` will look up the Relay Manager of the given Relay Worker and will forward the call to\\n     * the `StakeManager` contract. The `RelayHub` does not perform the actual penalization either.\\n     * @param relayWorker The address of the Relay Worker that committed a penalizable offense.\\n     * @param beneficiary The address that called the `Penalizer` and will receive a reward for it.\\n     */\\n    function penalize(address relayWorker, address payable beneficiary) external;\\n\\n    /**\\n     * @notice Sets or changes the configuration of this `RelayHub`.\\n     * @param _config The new configuration.\\n     */\\n    function setConfiguration(RelayHubConfig memory _config) external;\\n\\n    /**\\n     * @notice Sets or changes the minimum amount of a given `token` that needs to be staked so that the Relay Manager\\n     * is considered to be 'staked' by this `RelayHub`. Zero value means this token is not allowed for staking.\\n     * @param token An array of addresses of ERC-20 compatible tokens.\\n     * @param minimumStake An array of minimal amounts necessary for a corresponding token, in wei.\\n     */\\n    function setMinimumStakes(IERC20[] memory token, uint256[] memory minimumStake) external;\\n\\n    /**\\n     * @notice Deprecate hub by reverting all incoming `relayCall()` calls starting from a given timestamp\\n     * @param _deprecationTime The timestamp in seconds after which the `RelayHub` stops serving transactions.\\n     */\\n    function deprecateHub(uint256 _deprecationTime) external;\\n\\n    /**\\n     * @notice\\n     * @param relayManager\\n     */\\n    function escheatAbandonedRelayBalance(address relayManager) external;\\n\\n    /**\\n     * @notice The fee is expressed as a base fee in wei plus percentage of the actual charge.\\n     * For example, a value '40' stands for a 40% fee, so the recipient will be charged for 1.4 times the spent amount.\\n     * @param gasUsed An amount of gas used by the transaction.\\n     * @param relayData The details of a transaction signed by the sender.\\n     * @return The calculated charge, in wei.\\n     */\\n    function calculateCharge(uint256 gasUsed, GsnTypes.RelayData calldata relayData) external view returns (uint256);\\n\\n    /**\\n     * @notice The fee is expressed as a  percentage of the actual charge.\\n     * For example, a value '40' stands for a 40% fee, so the Relay Manager will only get 60% of the `charge`.\\n     * @param charge The amount of Ether in wei the Paymaster will be charged for this transaction.\\n     * @return The calculated devFee, in wei.\\n     */\\n    function calculateDevCharge(uint256 charge) external view returns (uint256);\\n    /* getters */\\n\\n    /// @return config The configuration of the `RelayHub`.\\n    function getConfiguration() external view returns (RelayHubConfig memory config);\\n\\n    /**\\n     * @param token An address of an ERC-20 compatible tokens.\\n     * @return The minimum amount of a given `token` that needs to be staked so that the Relay Manager\\n     * is considered to be 'staked' by this `RelayHub`. Zero value means this token is not allowed for staking.\\n     */\\n    function getMinimumStakePerToken(IERC20 token) external view returns (uint256);\\n\\n    /**\\n     * @param worker An address of the Relay Worker.\\n     * @return The address of its Relay Manager.\\n     */\\n    function getWorkerManager(address worker) external view returns (address);\\n\\n    /**\\n     * @param manager An address of the Relay Manager.\\n     * @return The count of Relay Workers associated with this Relay Manager.\\n     */\\n    function getWorkerCount(address manager) external view returns (uint256);\\n\\n    /// @return An account's balance. It can be either a deposit of a `Paymaster`, or a revenue of a Relay Manager.\\n    function balanceOf(address target) external view returns (uint256);\\n\\n    /// @return The `StakeManager` address for this `RelayHub`.\\n    function getStakeManager() external view returns (IStakeManager);\\n\\n    /// @return The `Penalizer` address for this `RelayHub`.\\n    function getPenalizer() external view returns (address);\\n\\n    /// @return The `RelayRegistrar` address for this `RelayHub`.\\n    function getRelayRegistrar() external view returns (address);\\n\\n    /// @return The `BatchGateway` address for this `RelayHub`.\\n    function getBatchGateway() external view returns (address);\\n\\n    /**\\n     * @notice Uses `StakeManager` to decide if the Relay Manager can be considered staked or not.\\n     * Returns if the stake's token, amount and delay satisfy all requirements, reverts otherwise.\\n     */\\n    function verifyRelayManagerStaked(address relayManager) external view;\\n\\n    /**\\n     * @notice Uses `StakeManager` to check if the Relay Manager can be considered abandoned or not.\\n     * Returns true if the stake's abandonment time is in the past including the escheatment delay, false otherwise.\\n     */\\n    function isRelayEscheatable(address relayManager) external view returns (bool);\\n\\n    /// @return `true` if the `RelayHub` is deprecated, `false` it it is not deprecated and can serve transactions.\\n    function isDeprecated() external view returns (bool);\\n\\n    /// @return The timestamp from which the hub no longer allows relaying calls.\\n    function getDeprecationTime() external view returns (uint256);\\n\\n    /// @return The block number in which the contract has been deployed.\\n    function getCreationBlock() external view returns (uint256);\\n\\n    /// @return a SemVer-compliant version of the `RelayHub` contract.\\n    function versionHub() external view returns (string memory);\\n\\n    /// @return A total measurable amount of gas left to current execution. Same as 'gasleft()' for pure EVMs.\\n    function aggregateGasleft() external view returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0x0ab29ca5985c98f530e5985e3d9dd14f00d34527410ce980b51b26e57bb0121c\",\"license\":\"GPL-3.0-only\"},\"@opengsn/contracts/src/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @title The StakeManager Interface\\n * @notice In order to prevent an attacker from registering a large number of unresponsive relays, the GSN requires\\n * the Relay Server to maintain a permanently locked stake in the system before being able to register.\\n *\\n * @notice Also, in some cases the behavior of a Relay Server may be found to be illegal by a `Penalizer` contract.\\n * In such case, the stake will never be returned to the Relay Server operator and will be slashed.\\n *\\n * @notice An implementation of this interface is tasked with keeping Relay Servers' stakes, made in any ERC-20 token.\\n * Note that the `RelayHub` chooses which ERC-20 tokens to support and how much stake is needed.\\n */\\ninterface IStakeManager is IERC165 {\\n\\n    /// @notice Emitted when a `stake` or `unstakeDelay` are initialized or increased.\\n    event StakeAdded(\\n        address indexed relayManager,\\n        address indexed owner,\\n        IERC20 token,\\n        uint256 stake,\\n        uint256 unstakeDelay\\n    );\\n\\n    /// @notice Emitted once a stake is scheduled for withdrawal.\\n    event StakeUnlocked(\\n        address indexed relayManager,\\n        address indexed owner,\\n        uint256 withdrawTime\\n    );\\n\\n    /// @notice Emitted when owner withdraws `relayManager` funds.\\n    event StakeWithdrawn(\\n        address indexed relayManager,\\n        address indexed owner,\\n        IERC20 token,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted when an authorized `RelayHub` penalizes a `relayManager`.\\n    event StakePenalized(\\n        address indexed relayManager,\\n        address indexed beneficiary,\\n        IERC20 token,\\n        uint256 reward\\n    );\\n\\n    /// @notice Emitted when a `relayManager` adds a new `RelayHub` to a list of authorized.\\n    event HubAuthorized(\\n        address indexed relayManager,\\n        address indexed relayHub\\n    );\\n\\n    /// @notice Emitted when a `relayManager` removes a `RelayHub` from a list of authorized.\\n    event HubUnauthorized(\\n        address indexed relayManager,\\n        address indexed relayHub,\\n        uint256 removalTime\\n    );\\n\\n    /// @notice Emitted when a `relayManager` sets its `owner`. This is necessary to prevent stake hijacking.\\n    event OwnerSet(\\n        address indexed relayManager,\\n        address indexed owner\\n    );\\n\\n    /// @notice Emitted when a `burnAddress` is changed.\\n    event BurnAddressSet(\\n        address indexed burnAddress\\n    );\\n\\n    /// @notice Emitted when a `devAddress` is changed.\\n    event DevAddressSet(\\n        address indexed devAddress\\n    );\\n\\n    /// @notice Emitted if Relay Server is inactive for an `abandonmentDelay` and contract owner initiates its removal.\\n    event RelayServerAbandoned(\\n        address indexed relayManager,\\n        uint256 abandonedTime\\n    );\\n\\n    /// @notice Emitted to indicate an action performed by a relay server to prevent it from being marked as abandoned.\\n    event RelayServerKeepalive(\\n        address indexed relayManager,\\n        uint256 keepaliveTime\\n    );\\n\\n    /// @notice Emitted when the stake of an abandoned relayer has been confiscated and transferred to the `devAddress`.\\n    event AbandonedRelayManagerStakeEscheated(\\n        address indexed relayManager,\\n        address indexed owner,\\n        IERC20 token,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param stake - amount of ether staked for this relay\\n     * @param unstakeDelay - number of seconds to elapse before the owner can retrieve the stake after calling 'unlock'\\n     * @param withdrawTime - timestamp in seconds when 'withdraw' will be callable, or zero if the unlock has not been called\\n     * @param owner - address that receives revenue and manages relayManager's stake\\n     */\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelay;\\n        uint256 withdrawTime;\\n        uint256 abandonedTime;\\n        uint256 keepaliveTime;\\n        IERC20 token;\\n        address owner;\\n    }\\n\\n    struct RelayHubInfo {\\n        uint256 removalTime;\\n    }\\n\\n    /**\\n     * @param devAddress - the address that will receive the 'abandoned' stake\\n     * @param abandonmentDelay - the amount of time after which the relay can be marked as 'abandoned'\\n     * @param escheatmentDelay - the amount of time after which the abandoned relay's stake and balance may be withdrawn to the `devAddress`\\n     */\\n    struct AbandonedRelayServerConfig {\\n        address devAddress;\\n        uint256 abandonmentDelay;\\n        uint256 escheatmentDelay;\\n    }\\n\\n    /**\\n     * @notice Set the owner of a Relay Manager. Called only by the RelayManager itself.\\n     * Note that owners cannot transfer ownership - if the entry already exists, reverts.\\n     * @param owner - owner of the relay (as configured off-chain)\\n     */\\n    function setRelayManagerOwner(address owner) external;\\n\\n    /**\\n     * @notice Put a stake for a relayManager and set its unstake delay.\\n     * Only the owner can call this function. If the entry does not exist, reverts.\\n     * The owner must give allowance of the ERC-20 token to the StakeManager before calling this method.\\n     * It is the RelayHub who has a configurable list of minimum stakes per token. StakeManager accepts all tokens.\\n     * @param token The address of an ERC-20 token that is used by the relayManager as a stake\\n     * @param relayManager The address that represents a stake entry and controls relay registrations on relay hubs\\n     * @param unstakeDelay The number of seconds to elapse before an owner can retrieve the stake after calling `unlock`\\n     * @param amount The amount of tokens to be taken from the relayOwner and locked in the StakeManager as a stake\\n     */\\n    function stakeForRelayManager(IERC20 token, address relayManager, uint256 unstakeDelay, uint256 amount) external;\\n\\n    /**\\n     * @notice Schedule the unlocking of the stake. The `unstakeDelay` must pass before owner can call `withdrawStake`.\\n     * @param relayManager The address of a Relay Manager whose stake is to be unlocked.\\n     */\\n    function unlockStake(address relayManager) external;\\n    /**\\n     * @notice Withdraw the unlocked stake.\\n     * @param relayManager The address of a Relay Manager whose stake is to be withdrawn.\\n     */\\n    function withdrawStake(address relayManager) external;\\n\\n    /**\\n     * @notice Add the `RelayHub` to a list of authorized by this Relay Manager.\\n     * This allows the RelayHub to penalize this Relay Manager. The `RelayHub` cannot trust a Relay it cannot penalize.\\n     * @param relayManager The address of a Relay Manager whose stake is to be authorized for the new `RelayHub`.\\n     * @param relayHub The address of a `RelayHub` to be authorized.\\n     */\\n    function authorizeHubByOwner(address relayManager, address relayHub) external;\\n\\n    /**\\n     * @notice Same as `authorizeHubByOwner` but can be called by the RelayManager itself.\\n     */\\n    function authorizeHubByManager(address relayHub) external;\\n\\n    /**\\n     * @notice Remove the `RelayHub` from a list of authorized by this Relay Manager.\\n     * @param relayManager The address of a Relay Manager.\\n     * @param relayHub The address of a `RelayHub` to be unauthorized.\\n     */\\n    function unauthorizeHubByOwner(address relayManager, address relayHub) external;\\n\\n    /**\\n     * @notice Same as `unauthorizeHubByOwner` but can be called by the RelayManager itself.\\n     */\\n    function unauthorizeHubByManager(address relayHub) external;\\n\\n    /**\\n     * Slash the stake of the relay relayManager. In order to prevent stake kidnapping, burns part of stake on the way.\\n     * @param relayManager The address of a Relay Manager to be penalized.\\n     * @param beneficiary The address that receives part of the penalty amount.\\n     * @param amount A total amount of penalty to be withdrawn from stake.\\n     */\\n    function penalizeRelayManager(address relayManager, address beneficiary, uint256 amount) external;\\n\\n    /**\\n     * @notice Allows the contract owner to set the given `relayManager` as abandoned after a configurable delay.\\n     * Its entire stake and balance will be taken from a relay if it does not respond to being marked as abandoned.\\n     */\\n    function markRelayAbandoned(address relayManager) external;\\n\\n    /**\\n     * @notice If more than `abandonmentDelay` has passed since the last Keepalive transaction, and relay manager\\n     * has been marked as abandoned, and after that more that `escheatmentDelay` have passed, entire stake and\\n     * balance will be taken from this relay.\\n     */\\n    function escheatAbandonedRelayStake(address relayManager) external;\\n\\n    /**\\n     * @notice Sets a new `keepaliveTime` for the given `relayManager`, preventing it from being marked as abandoned.\\n     * Can be called by an authorized `RelayHub` or by the `relayOwner` address.\\n     */\\n    function updateRelayKeepaliveTime(address relayManager) external;\\n\\n    /**\\n     * @notice Check if the Relay Manager can be considered abandoned or not.\\n     * Returns true if the stake's abandonment time is in the past including the escheatment delay, false otherwise.\\n     */\\n    function isRelayEscheatable(address relayManager) external view returns(bool);\\n\\n    /**\\n     * @notice Get the stake details information for the given Relay Manager.\\n     * @param relayManager The address of a Relay Manager.\\n     * @return stakeInfo The `StakeInfo` structure.\\n     * @return isSenderAuthorizedHub `true` if the `msg.sender` for this call was a `RelayHub` that is authorized now.\\n     * `false` if the `msg.sender` for this call is not authorized.\\n     */\\n    function getStakeInfo(address relayManager) external view returns (StakeInfo memory stakeInfo, bool isSenderAuthorizedHub);\\n\\n    /**\\n     * @return The maximum unstake delay this `StakeManger` allows. This is to prevent locking money forever by mistake.\\n     */\\n    function getMaxUnstakeDelay() external view returns (uint256);\\n\\n    /**\\n     * @notice Change the address that will receive the 'burned' part of the penalized stake.\\n     * This is done to prevent malicious Relay Server from penalizing itself and breaking even.\\n     */\\n    function setBurnAddress(address _burnAddress) external;\\n\\n    /**\\n     * @return The address that will receive the 'burned' part of the penalized stake.\\n     */\\n    function getBurnAddress() external view returns (address);\\n\\n    /**\\n     * @notice Change the address that will receive the 'abandoned' stake.\\n     * This is done to prevent Relay Servers that lost their keys from losing access to funds.\\n     */\\n    function setDevAddress(address _burnAddress) external;\\n\\n    /**\\n     * @return The structure that contains all configuration values for the 'abandoned' stake.\\n     */\\n    function getAbandonedRelayServerConfig() external view returns (AbandonedRelayServerConfig memory);\\n\\n    /**\\n     * @return the block number in which the contract has been deployed.\\n     */\\n    function getCreationBlock() external view returns (uint256);\\n\\n    /**\\n     * @return a SemVer-compliant version of the `StakeManager` contract.\\n     */\\n    function versionSM() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x77035b55ca4c09cb499bc0cab3f9e791d77597b148dbfee8bf94ca6c0039c3e0\",\"license\":\"GPL-3.0-only\"},\"@opengsn/contracts/src/utils/GsnTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../forwarder/IForwarder.sol\\\";\\n\\ninterface GsnTypes {\\n    /// @notice maxFeePerGas, maxPriorityFeePerGas, pctRelayFee and baseRelayFee must be validated inside of the paymaster's preRelayedCall in order not to overpay\\n    struct RelayData {\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        uint256 transactionCalldataGasUsed;\\n        address relayWorker;\\n        address paymaster;\\n        address forwarder;\\n        bytes paymasterData;\\n        uint256 clientId;\\n    }\\n\\n    //note: must start with the ForwardRequest to be an extension of the generic forwarder\\n    struct RelayRequest {\\n        IForwarder.ForwardRequest request;\\n        RelayData relayData;\\n    }\\n}\\n\",\"keccak256\":\"0x9fb51c540f32939f1ee291e3fa709be64f7c73485bd7b87c6624c3567dd42a1b\",\"license\":\"GPL-3.0-only\"},\"@opengsn/contracts/src/utils/GsnUtils.sol\":{\"content\":\"/* solhint-disable no-inline-assembly */\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/MinLibBytes.sol\\\";\\nimport \\\"./GsnTypes.sol\\\";\\n\\n/**\\n * @title The GSN Solidity Utils Library\\n * @notice Some library functions used throughout the GSN Solidity codebase.\\n */\\nlibrary GsnUtils {\\n\\n    bytes32 constant private RELAY_REQUEST_ID_MASK = 0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /**\\n     * @notice Calculate an identifier for the meta-transaction in a format similar to a transaction hash.\\n     * Note that uniqueness relies on signature and may not be enforced if meta-transactions are verified\\n     * with a different algorithm, e.g. when batching.\\n     * @param relayRequest The `RelayRequest` for which an ID is being calculated.\\n     * @param signature The signature for the `RelayRequest`. It is not validated here and may even remain empty.\\n     */\\n    function getRelayRequestID(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature)\\n    internal\\n    pure\\n    returns (bytes32) {\\n        return keccak256(abi.encode(relayRequest.request.from, relayRequest.request.nonce, signature)) & RELAY_REQUEST_ID_MASK;\\n    }\\n\\n    /**\\n     * @notice Extract the method identifier signature from the encoded function call.\\n     */\\n    function getMethodSig(bytes memory msgData) internal pure returns (bytes4) {\\n        return MinLibBytes.readBytes4(msgData, 0);\\n    }\\n\\n    /**\\n     * @notice Extract a parameter from encoded-function block.\\n     * see: https://solidity.readthedocs.io/en/develop/abi-spec.html#formal-specification-of-the-encoding\\n     * The return value should be casted to the right type (`uintXXX`/`bytesXXX`/`address`/`bool`/`enum`).\\n     * @param msgData Byte array containing a uint256 value.\\n     * @param index Index in byte array of uint256 value.\\n     * @return result uint256 value from byte array.\\n     */\\n    function getParam(bytes memory msgData, uint256 index) internal pure returns (uint256 result) {\\n        return MinLibBytes.readUint256(msgData, 4 + index * 32);\\n    }\\n\\n    /// @notice Re-throw revert with the same revert data.\\n    function revertWithData(bytes memory data) internal pure {\\n        assembly {\\n            revert(add(data,32), mload(data))\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7ea79bac2508612eba2c9372a7a4af953218b4ee2721e273f6d368e76b1ae7bb\",\"license\":\"GPL-3.0-only\"},\"@opengsn/contracts/src/utils/MinLibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// minimal bytes manipulation required by GSN\\n// a minimal subset from 0x/LibBytes\\n/* solhint-disable no-inline-assembly */\\npragma solidity ^0.8.0;\\n\\nlibrary MinLibBytes {\\n\\n    //truncate the given parameter (in-place) if its length is above the given maximum length\\n    // do nothing otherwise.\\n    //NOTE: solidity warns unless the method is marked \\\"pure\\\", but it DOES modify its parameter.\\n    function truncateInPlace(bytes memory data, uint256 maxlen) internal pure {\\n        if (data.length > maxlen) {\\n            assembly { mstore(data, maxlen) }\\n        }\\n    }\\n\\n    /// @dev Reads an address from a position in a byte array.\\n    /// @param b Byte array containing an address.\\n    /// @param index Index in byte array of address.\\n    /// @return result address from byte array.\\n    function readAddress(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (address result)\\n    {\\n        require (b.length >= index + 20, \\\"readAddress: data too short\\\");\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Read address from array memory\\n        assembly {\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 20-byte mask to obtain address\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n\\n    function readBytes32(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        require(b.length >= index + 32, \\\"readBytes32: data too short\\\" );\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, add(index,32)))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n    /// @param b Byte array containing a uint256 value.\\n    /// @param index Index in byte array of uint256 value.\\n    /// @return result uint256 value from byte array.\\n    function readUint256(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = uint256(readBytes32(b, index));\\n        return result;\\n    }\\n\\n    function readBytes4(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes4 result)\\n    {\\n        require(b.length >= index + 4, \\\"readBytes4: data too short\\\");\\n\\n        // Read the bytes4 from array memory\\n        assembly {\\n            result := mload(add(b, add(index,32)))\\n            // Solidity does not require us to clean the trailing bytes.\\n            // We do it anyway\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x8063af8e0f134be3d794ad39bdc0041f33a16c91a4ee7abb968d4c15c8d10c54\",\"license\":\"MIT\"},\"@opengsn/contracts/src/utils/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier:APACHE-2.0\\n/*\\n* Taken from https://github.com/hamdiallam/Solidity-RLP\\n*/\\n/* solhint-disable */\\npragma solidity ^0.8.0;\\n\\nlibrary RLPReader {\\n\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint len;\\n        uint memPtr;\\n    }\\n\\n    using RLPReader for bytes;\\n    using RLPReader for uint;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    // helper function to decode rlp encoded legacy ethereum transaction\\n    /*\\n    * @param rawTransaction RLP encoded legacy ethereum transaction rlp([nonce, gasPrice, gasLimit, to, value, data]))\\n    * @return tuple (nonce,gasLimit,to,value,data)\\n    */\\n\\n    function decodeLegacyTransaction(bytes calldata rawTransaction) internal pure returns (uint, uint, address, uint, bytes memory){\\n        RLPReader.RLPItem[] memory values = rawTransaction.toRlpItem().toList(); // must convert to an rlpItem first!\\n        return (values[0].toUint(), values[2].toUint(), values[3].toAddress(), values[4].toUint(), values[5].toBytes());\\n    }\\n\\n    /*\\n    * @param rawTransaction format: 0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, access_list]))\\n    * @return tuple (nonce,gasLimit,to,value,data)\\n    */\\n    function decodeTransactionType1(bytes calldata rawTransaction) internal pure returns (uint, uint, address, uint, bytes memory){\\n        bytes memory payload = rawTransaction[1:rawTransaction.length];\\n        RLPReader.RLPItem[] memory values = payload.toRlpItem().toList(); // must convert to an rlpItem first!\\n        return (values[1].toUint(), values[3].toUint(), values[4].toAddress(), values[5].toUint(), values[6].toBytes());\\n    }\\n\\n    /*\\n    * @param rawTransaction format: 0x02 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, destination, amount, data, access_list]))\\n    * @return tuple (nonce,gasLimit,to,value,data)\\n    */\\n    function decodeTransactionType2(bytes calldata rawTransaction) internal pure returns (uint, uint, address, uint, bytes memory){\\n        bytes memory payload = rawTransaction[1:rawTransaction.length];\\n        RLPReader.RLPItem[] memory values = payload.toRlpItem().toList(); // must convert to an rlpItem first!\\n        return (values[1].toUint(), values[4].toUint(), values[5].toAddress(), values[6].toUint(), values[7].toBytes());\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        if (item.length == 0)\\n            return RLPItem(0, 0);\\n        uint memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n        return RLPItem(item.length, memPtr);\\n    }\\n    /*\\n    * @param item RLP encoded list in bytes\\n    */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory result) {\\n        require(isList(item), \\\"isList failed\\\");\\n        uint items = numItems(item);\\n        result = new RLPItem[](items);\\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint dataLen;\\n        for (uint i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n    }\\n    /*\\n    * Helpers\\n    */\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        uint8 byte0;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n        if (byte0 < LIST_SHORT_START)\\n            return false;\\n        return true;\\n    }\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) internal pure returns (uint) {\\n        uint count = 0;\\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr);\\n            // skip over an item\\n            count++;\\n        }\\n        return count;\\n    }\\n    // @return entire rlp item byte length\\n    function _itemLength(uint memPtr) internal pure returns (uint len) {\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n        if (byte0 < STRING_SHORT_START)\\n            return 1;\\n        else if (byte0 < STRING_LONG_START)\\n            return byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // number of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n            /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                len := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n        else if (byte0 < LIST_LONG_START) {\\n            return byte0 - LIST_SHORT_START + 1;\\n        }\\n        else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                len := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n    }\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint memPtr) internal pure returns (uint) {\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n        if (byte0 < STRING_SHORT_START)\\n            return 0;\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\\n            return 1;\\n        else if (byte0 < LIST_SHORT_START)  // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n    /** RLPItem conversions into data types **/\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        uint ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1, \\\"Invalid RLPItem. Booleans are encoded in 1 byte\\\");\\n        uint result;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n        return result == 0 ? false : true;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix according to RLP spec\\n        require(item.len <= 21, \\\"Invalid RLPItem. Addresses are encoded in 20 bytes or less\\\");\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint) {\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset;\\n        uint memPtr = item.memPtr + offset;\\n        uint result;\\n        assembly {\\n            result := div(mload(memPtr), exp(256, sub(32, len))) // shift to the correct location\\n        }\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset;\\n        // data length\\n        bytes memory result = new bytes(len);\\n        uint destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n    /*\\n    * @param src Pointer to source\\n    * @param dest Pointer to destination\\n    * @param len Amount of memory to copy from the source\\n    */\\n    function copy(uint src, uint dest, uint len) internal pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint mask = 256 ** (WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d6a5a59e7f1724934daf1bbd662605f4b0031d90a02f16d34f4e11e6f12b0b8\",\"license\":\"APACHE-2.0\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610120604052602960c08181529062001de860e03980516200002a916000916020909101906200006a565b503480156200003857600080fd5b5060405162001e1138038062001e118339810160408190526200005b9162000110565b60809190915260a05262000172565b828054620000789062000135565b90600052602060002090601f0160209004810192826200009c5760008555620000e7565b82601f10620000b757805160ff1916838001178555620000e7565b82800160010185558215620000e7579182015b82811115620000e7578251825591602001919060010190620000ca565b50620000f5929150620000f9565b5090565b5b80821115620000f55760008155600101620000fa565b600080604083850312156200012457600080fd5b505080516020909101519092909150565b600181811c908216806200014a57607f821691505b602082108114156200016c57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a051611c3b620001ad600039600081816101a40152818161047e01526105fb01526000818161011b015261068e0152611c3b6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a031365711610066578063a031365714610152578063a640bc7414610167578063ab456ccb1461017c578063f14fcbc81461018f578063fb509935146101a257600080fd5b806301ffc9a7146100a357806325896446146100cb57806347885781146100eb5780637f1a15bf146101195780638b29ee471461013f575b600080fd5b6100b66100b136600461171d565b6101c8565b60405190151581526020015b60405180910390f35b6100de6100d9366004611747565b6101ff565b6040516100c2919061197b565b61010b6100f9366004611704565b60016020526000908152604090205481565b6040519081526020016100c2565b7f000000000000000000000000000000000000000000000000000000000000000061010b565b6100b661014d366004611747565b6102bf565b61015a6102f2565b6040516100c29190611968565b61017a610175366004611867565b610380565b005b61017a61018a366004611789565b610502565b61017a61019d366004611704565b610687565b7f000000000000000000000000000000000000000000000000000000000000000061010b565b60006001600160e01b03198216636c18d0d560e11b14806101f957506301ffc9a760e01b6001600160e01b03198316145b92915050565b61023a6040518060a00160405280600081526020016000815260200160006001600160a01b0316815260200160008152602001606081525090565b6102448383610709565b15610277576102538383610730565b608086015260608501526001600160a01b03166040840152602083015281526101f9565b610281838361083b565b15610290576102538383610862565b61029a838361092c565b608086015260608501526001600160a01b031660408401526020830152815292915050565b60006102cb83836109fc565b806102db57506102db8383610709565b806102eb57506102eb838361083b565b9392505050565b600080546102ff90611b5d565b80601f016020809104026020016040519081016040528092919081815260200182805461032b90611b5d565b80156103785780601f1061034d57610100808354040283529160200191610378565b820191906000526020600020905b81548152906001019060200180831161035b57829003601f168201915b505050505081565b6000803660405161039292919061191c565b6040805191829003822060208301526001600160601b03193360601b169082015260540160408051601f1981840301815291815281516020928301206000818152600190935290822080549290559150336001600160a01b03146104eb578061042e5760405162461bcd60e51b81526020600482015260096024820152681b9bc818dbdb5b5a5d60ba1b60448201526064015b60405180910390fd5b4381106104785760405162461bcd60e51b81526020600482015260186024820152773932bb32b0b6103832b730b634bd32903a37b79039b7b7b760411b6044820152606401610425565b436104a37f0000000000000000000000000000000000000000000000000000000000000000836119f0565b116104eb5760405162461bcd60e51b815260206004820152601860248201527772657665616c2070656e616c697a6520746f6f206c61746560401b6044820152606401610425565b6104f88888888888610a3a565b5050505050505050565b6000803660405161051492919061191c565b6040805191829003822060208301526001600160601b03193360601b169082015260540160408051601f1981840301815291815281516020928301206000818152600190935290822080549290559150336001600160a01b031461066857806105ab5760405162461bcd60e51b81526020600482015260096024820152681b9bc818dbdb5b5a5d60ba1b6044820152606401610425565b4381106105f55760405162461bcd60e51b81526020600482015260186024820152773932bb32b0b6103832b730b634bd32903a37b79039b7b7b760411b6044820152606401610425565b436106207f0000000000000000000000000000000000000000000000000000000000000000836119f0565b116106685760405162461bcd60e51b815260206004820152601860248201527772657665616c2070656e616c697a6520746f6f206c61746560401b6044820152606401610425565b6106798c8c8c8c8c8c8c8c8c610ba4565b505050505050505050505050565b60006106b37f0000000000000000000000000000000000000000000000000000000000000000436119f0565b6000838152600160205260409081902082905551909150829033907fe3e71aede44b4dc2b562f1f86045529b7aadddc51e28f63a503f3b8ee937e16f906106fd9085815260200190565b60405180910390a35050565b60008282600081811061071e5761071e611bd9565b9091013560f81c600114949350505050565b6000808080606081610745876001818b6119c6565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093945061078f925061078a9150849050610e16565b610e67565b90506107b4816001815181106107a7576107a7611bd9565b6020026020010151610fac565b6107ca826003815181106107a7576107a7611bd9565b6107ed836004815181106107e0576107e0611bd9565b6020026020010151610ffa565b610803846005815181106107a7576107a7611bd9565b6108268560068151811061081957610819611bd9565b6020026020010151611080565b939d929c50909a509850909650945050505050565b60008282600081811061085057610850611bd9565b9091013560f81c600214949350505050565b6000808080606081610877876001818b6119c6565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394506108bc925061078a9150849050610e16565b90506108d4816001815181106107a7576107a7611bd9565b6108ea826004815181106107a7576107a7611bd9565b610900836005815181106107e0576107e0611bd9565b610916846006815181106107a7576107a7611bd9565b6108268560078151811061081957610819611bd9565b6000806000806060600061097861078a89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e1692505050565b9050610990816000815181106107a7576107a7611bd9565b6109a6826002815181106107a7576107a7611bd9565b6109bc836003815181106107e0576107e0611bd9565b6109d2846004815181106107a7576107a7611bd9565b6109e88560058151811061081957610819611bd9565b939c929b5090995097509095509350505050565b60008083836000818110610a1257610a12611bd9565b919091013560f81c91505060c08110801590610a32575060fe8160ff1611155b949350505050565b610a4485856102bf565b15610aed576000610a5586866101ff565b9050816001600160a01b031681604001516001600160a01b03161415610aeb576000610a84826080015161111a565b90506001600160e01b03198116633654317160e11b141580610ae85760405162461bcd60e51b815260206004820152601760248201527f4c6567616c2072656c6179207472616e73616374696f6e0000000000000000006044820152606401610425565b50505b505b6000610b4784848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604051610b3892508a9150899061191c565b60405190819003902090611127565b90506001600160a01b038116610b925760405162461bcd60e51b815260206004820152601060248201526f1958dc9958dbdd995c8819985a5b195960821b6044820152606401610425565b610b9c818361114b565b505050505050565b6000610bef88888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604051610b3892508e91508d9061191c565b90506000610c3c85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604051610b3892508b91508a9061191c565b9050806001600160a01b0316826001600160a01b031614610c925760405162461bcd60e51b815260206004820152601060248201526f2234b33332b932b73a1039b4b3b732b960811b6044820152606401610425565b6001600160a01b038216610cdb5760405162461bcd60e51b815260206004820152601060248201526f1958dc9958dbdd995c8819985a5b195960821b6044820152606401610425565b6000610ce78c8c6101ff565b90506000610cf589896101ff565b8051835191925014610d3b5760405162461bcd60e51b815260206004820152600f60248201526e446966666572656e74206e6f6e636560881b6044820152606401610425565b60008260800151836020015184604001518560600151604051602001610d64949392919061192c565b604051602081830303815290604052905060008260800151836020015184604001518560600151604051602001610d9e949392919061192c565b6040516020818303038152906040529050808051906020012082805190602001201415610dfb5760405162461bcd60e51b815260206004820152600b60248201526a1d1e081a5cc8195c5d585b60aa1b6044820152606401610425565b610e05868861114b565b505050505050505050505050505050565b60408051808201909152600080825260208201528151610e49575050604080518082019091526000808252602082015290565b50604080518082019091528151815260209182019181019190915290565b6060610e72826111a8565b610eae5760405162461bcd60e51b815260206004820152600d60248201526c1a5cd31a5cdd0819985a5b1959609a1b6044820152606401610425565b6000610eb9836111d3565b90508067ffffffffffffffff811115610ed457610ed4611bef565b604051908082528060200260200182016040528015610f1957816020015b6040805180820190915260008082526020820152815260200190600190039081610ef25790505b5091506000610f2b846020015161124b565b8460200151610f3a91906119f0565b90506000805b83811015610fa357610f51836112cc565b9150604051806040016040528083815260200184815250858281518110610f7a57610f7a611bd9565b6020908102919091010152610f8f82846119f0565b925080610f9b81611b92565b915050610f40565b50505050919050565b600080610fbc836020015161124b565b90506000818460000151610fd09190611af3565b90506000828560200151610fe491906119f0565b516020929092036101000a909104949350505050565b60006015826000015111156110775760405162461bcd60e51b815260206004820152603a60248201527f496e76616c696420524c504974656d2e2041646472657373657320617265206560448201527f6e636f64656420696e203230206279746573206f72206c6573730000000000006064820152608401610425565b6101f982610fac565b60606000611091836020015161124b565b905060008184600001516110a59190611af3565b905060008167ffffffffffffffff8111156110c2576110c2611bef565b6040519080825280601f01601f1916602001820160405280156110ec576020820181803683370190505b509050600081602001905061111184876020015161110a91906119f0565b828561135b565b50949350505050565b60006101f98260006113db565b6000806000611136858561144b565b9150915061114381611491565b509392505050565b604051633af34c6b60e21b81526001600160a01b03838116600483015233602483015282169063ebcd31ac90604401600060405180830381600087803b15801561119457600080fd5b505af1158015610b9c573d6000803e3d6000fd5b6020810151805160009190821a9060c08210156111c9575060009392505050565b5060019392505050565b6000806000905060006111e9846020015161124b565b84602001516111f891906119f0565b905060008460000151856020015161121091906119f0565b90505b8082101561124257611224826112cc565b61122e90836119f0565b91508261123a81611b92565b935050611213565b50909392505050565b8051600090811a60808110156112645750600092915050565b60b881108061127f575060c0811080159061127f575060f881105b1561128d5750600192915050565b60c08110156112ba576112a2600160b8611b0a565b6112af9060ff1682611af3565b6102eb9060016119f0565b6112a2600160f8611b0a565b50919050565b8051600090811a60808110156112e55750600192915050565b60b88110156112f9576112af608082611af3565b60c08110156113265760b78103600184019350806020036101000a845104600182018101935050506112c6565b60f881101561133a576112af60c082611af3565b60019290920151602083900360f7016101000a900490910160f51901919050565b8061136557505050565b6020811061139d578251825261137c6020846119f0565b92506113896020836119f0565b9150611396602082611af3565b9050611365565b80156113d657600060016113b2836020611af3565b6113be90610100611a4b565b6113c89190611af3565b845184518216911916178352505b505050565b60006113e88260046119f0565b835110156114385760405162461bcd60e51b815260206004820152601a60248201527f726561644279746573343a206461746120746f6f2073686f72740000000000006044820152606401610425565b5001602001516001600160e01b03191690565b6000808251604114156114825760208301516040840151606085015160001a611476878285856115e2565b9450945050505061148a565b506000905060025b9250929050565b60008160048111156114a5576114a5611bc3565b14156114ae5750565b60018160048111156114c2576114c2611bc3565b14156115105760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610425565b600281600481111561152457611524611bc3565b14156115725760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610425565b600381600481111561158657611586611bc3565b14156115df5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610425565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611619575060009050600361169d565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561166d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166116965760006001925092505061169d565b9150600090505b94509492505050565b60008083601f8401126116b857600080fd5b50813567ffffffffffffffff8111156116d057600080fd5b60208301915083602082850101111561148a57600080fd5b80356001600160a01b03811681146116ff57600080fd5b919050565b60006020828403121561171657600080fd5b5035919050565b60006020828403121561172f57600080fd5b81356001600160e01b0319811681146102eb57600080fd5b6000806020838503121561175a57600080fd5b823567ffffffffffffffff81111561177157600080fd5b61177d858286016116a6565b90969095509350505050565b60008060008060008060008060008060c08b8d0312156117a857600080fd5b8a3567ffffffffffffffff808211156117c057600080fd5b6117cc8e838f016116a6565b909c509a5060208d01359150808211156117e557600080fd5b6117f18e838f016116a6565b909a50985060408d013591508082111561180a57600080fd5b6118168e838f016116a6565b909850965060608d013591508082111561182f57600080fd5b5061183c8d828e016116a6565b909550935061184f905060808c016116e8565b915060a08b013590509295989b9194979a5092959850565b6000806000806000806080878903121561188057600080fd5b863567ffffffffffffffff8082111561189857600080fd5b6118a48a838b016116a6565b909850965060208901359150808211156118bd57600080fd5b506118ca89828a016116a6565b90955093506118dd9050604088016116e8565b9150606087013590509295509295509295565b60008151808452611908816020860160208601611b2d565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b6000855161193e818460208a01611b2d565b919091019384525060609190911b6001600160601b03191660208301526034820152605401919050565b6020815260006102eb60208301846118f0565b60208152815160208201526020820151604082015260018060a01b036040830151166060820152606082015160808201526000608083015160a080840152610a3260c08401826118f0565b600080858511156119d657600080fd5b838611156119e357600080fd5b5050820193919092039150565b60008219821115611a0357611a03611bad565b500190565b600181815b80851115611a43578160001904821115611a2957611a29611bad565b80851615611a3657918102915b93841c9390800290611a0d565b509250929050565b60006102eb8383600082611a61575060016101f9565b81611a6e575060006101f9565b8160018114611a845760028114611a8e57611aaa565b60019150506101f9565b60ff841115611a9f57611a9f611bad565b50506001821b6101f9565b5060208310610133831016604e8410600b8410161715611acd575081810a6101f9565b611ad78383611a08565b8060001904821115611aeb57611aeb611bad565b029392505050565b600082821015611b0557611b05611bad565b500390565b600060ff821660ff841680821015611b2457611b24611bad565b90039392505050565b60005b83811015611b48578181015183820152602001611b30565b83811115611b57576000848401525b50505050565b600181811c90821680611b7157607f821691505b602082108114156112c657634e487b7160e01b600052602260045260246000fd5b6000600019821415611ba657611ba6611bad565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220fa0dfcc4dbb83ddc5bf5266c96c0053a2be0fdd808caa24b399c54d3aaf5eecc64736f6c63430008070033332e302e302d626574612e332b6f70656e67736e2e70656e616c697a65722e6970656e616c697a6572",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a031365711610066578063a031365714610152578063a640bc7414610167578063ab456ccb1461017c578063f14fcbc81461018f578063fb509935146101a257600080fd5b806301ffc9a7146100a357806325896446146100cb57806347885781146100eb5780637f1a15bf146101195780638b29ee471461013f575b600080fd5b6100b66100b136600461171d565b6101c8565b60405190151581526020015b60405180910390f35b6100de6100d9366004611747565b6101ff565b6040516100c2919061197b565b61010b6100f9366004611704565b60016020526000908152604090205481565b6040519081526020016100c2565b7f000000000000000000000000000000000000000000000000000000000000000061010b565b6100b661014d366004611747565b6102bf565b61015a6102f2565b6040516100c29190611968565b61017a610175366004611867565b610380565b005b61017a61018a366004611789565b610502565b61017a61019d366004611704565b610687565b7f000000000000000000000000000000000000000000000000000000000000000061010b565b60006001600160e01b03198216636c18d0d560e11b14806101f957506301ffc9a760e01b6001600160e01b03198316145b92915050565b61023a6040518060a00160405280600081526020016000815260200160006001600160a01b0316815260200160008152602001606081525090565b6102448383610709565b15610277576102538383610730565b608086015260608501526001600160a01b03166040840152602083015281526101f9565b610281838361083b565b15610290576102538383610862565b61029a838361092c565b608086015260608501526001600160a01b031660408401526020830152815292915050565b60006102cb83836109fc565b806102db57506102db8383610709565b806102eb57506102eb838361083b565b9392505050565b600080546102ff90611b5d565b80601f016020809104026020016040519081016040528092919081815260200182805461032b90611b5d565b80156103785780601f1061034d57610100808354040283529160200191610378565b820191906000526020600020905b81548152906001019060200180831161035b57829003601f168201915b505050505081565b6000803660405161039292919061191c565b6040805191829003822060208301526001600160601b03193360601b169082015260540160408051601f1981840301815291815281516020928301206000818152600190935290822080549290559150336001600160a01b03146104eb578061042e5760405162461bcd60e51b81526020600482015260096024820152681b9bc818dbdb5b5a5d60ba1b60448201526064015b60405180910390fd5b4381106104785760405162461bcd60e51b81526020600482015260186024820152773932bb32b0b6103832b730b634bd32903a37b79039b7b7b760411b6044820152606401610425565b436104a37f0000000000000000000000000000000000000000000000000000000000000000836119f0565b116104eb5760405162461bcd60e51b815260206004820152601860248201527772657665616c2070656e616c697a6520746f6f206c61746560401b6044820152606401610425565b6104f88888888888610a3a565b5050505050505050565b6000803660405161051492919061191c565b6040805191829003822060208301526001600160601b03193360601b169082015260540160408051601f1981840301815291815281516020928301206000818152600190935290822080549290559150336001600160a01b031461066857806105ab5760405162461bcd60e51b81526020600482015260096024820152681b9bc818dbdb5b5a5d60ba1b6044820152606401610425565b4381106105f55760405162461bcd60e51b81526020600482015260186024820152773932bb32b0b6103832b730b634bd32903a37b79039b7b7b760411b6044820152606401610425565b436106207f0000000000000000000000000000000000000000000000000000000000000000836119f0565b116106685760405162461bcd60e51b815260206004820152601860248201527772657665616c2070656e616c697a6520746f6f206c61746560401b6044820152606401610425565b6106798c8c8c8c8c8c8c8c8c610ba4565b505050505050505050505050565b60006106b37f0000000000000000000000000000000000000000000000000000000000000000436119f0565b6000838152600160205260409081902082905551909150829033907fe3e71aede44b4dc2b562f1f86045529b7aadddc51e28f63a503f3b8ee937e16f906106fd9085815260200190565b60405180910390a35050565b60008282600081811061071e5761071e611bd9565b9091013560f81c600114949350505050565b6000808080606081610745876001818b6119c6565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093945061078f925061078a9150849050610e16565b610e67565b90506107b4816001815181106107a7576107a7611bd9565b6020026020010151610fac565b6107ca826003815181106107a7576107a7611bd9565b6107ed836004815181106107e0576107e0611bd9565b6020026020010151610ffa565b610803846005815181106107a7576107a7611bd9565b6108268560068151811061081957610819611bd9565b6020026020010151611080565b939d929c50909a509850909650945050505050565b60008282600081811061085057610850611bd9565b9091013560f81c600214949350505050565b6000808080606081610877876001818b6119c6565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394506108bc925061078a9150849050610e16565b90506108d4816001815181106107a7576107a7611bd9565b6108ea826004815181106107a7576107a7611bd9565b610900836005815181106107e0576107e0611bd9565b610916846006815181106107a7576107a7611bd9565b6108268560078151811061081957610819611bd9565b6000806000806060600061097861078a89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e1692505050565b9050610990816000815181106107a7576107a7611bd9565b6109a6826002815181106107a7576107a7611bd9565b6109bc836003815181106107e0576107e0611bd9565b6109d2846004815181106107a7576107a7611bd9565b6109e88560058151811061081957610819611bd9565b939c929b5090995097509095509350505050565b60008083836000818110610a1257610a12611bd9565b919091013560f81c91505060c08110801590610a32575060fe8160ff1611155b949350505050565b610a4485856102bf565b15610aed576000610a5586866101ff565b9050816001600160a01b031681604001516001600160a01b03161415610aeb576000610a84826080015161111a565b90506001600160e01b03198116633654317160e11b141580610ae85760405162461bcd60e51b815260206004820152601760248201527f4c6567616c2072656c6179207472616e73616374696f6e0000000000000000006044820152606401610425565b50505b505b6000610b4784848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604051610b3892508a9150899061191c565b60405190819003902090611127565b90506001600160a01b038116610b925760405162461bcd60e51b815260206004820152601060248201526f1958dc9958dbdd995c8819985a5b195960821b6044820152606401610425565b610b9c818361114b565b505050505050565b6000610bef88888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604051610b3892508e91508d9061191c565b90506000610c3c85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604051610b3892508b91508a9061191c565b9050806001600160a01b0316826001600160a01b031614610c925760405162461bcd60e51b815260206004820152601060248201526f2234b33332b932b73a1039b4b3b732b960811b6044820152606401610425565b6001600160a01b038216610cdb5760405162461bcd60e51b815260206004820152601060248201526f1958dc9958dbdd995c8819985a5b195960821b6044820152606401610425565b6000610ce78c8c6101ff565b90506000610cf589896101ff565b8051835191925014610d3b5760405162461bcd60e51b815260206004820152600f60248201526e446966666572656e74206e6f6e636560881b6044820152606401610425565b60008260800151836020015184604001518560600151604051602001610d64949392919061192c565b604051602081830303815290604052905060008260800151836020015184604001518560600151604051602001610d9e949392919061192c565b6040516020818303038152906040529050808051906020012082805190602001201415610dfb5760405162461bcd60e51b815260206004820152600b60248201526a1d1e081a5cc8195c5d585b60aa1b6044820152606401610425565b610e05868861114b565b505050505050505050505050505050565b60408051808201909152600080825260208201528151610e49575050604080518082019091526000808252602082015290565b50604080518082019091528151815260209182019181019190915290565b6060610e72826111a8565b610eae5760405162461bcd60e51b815260206004820152600d60248201526c1a5cd31a5cdd0819985a5b1959609a1b6044820152606401610425565b6000610eb9836111d3565b90508067ffffffffffffffff811115610ed457610ed4611bef565b604051908082528060200260200182016040528015610f1957816020015b6040805180820190915260008082526020820152815260200190600190039081610ef25790505b5091506000610f2b846020015161124b565b8460200151610f3a91906119f0565b90506000805b83811015610fa357610f51836112cc565b9150604051806040016040528083815260200184815250858281518110610f7a57610f7a611bd9565b6020908102919091010152610f8f82846119f0565b925080610f9b81611b92565b915050610f40565b50505050919050565b600080610fbc836020015161124b565b90506000818460000151610fd09190611af3565b90506000828560200151610fe491906119f0565b516020929092036101000a909104949350505050565b60006015826000015111156110775760405162461bcd60e51b815260206004820152603a60248201527f496e76616c696420524c504974656d2e2041646472657373657320617265206560448201527f6e636f64656420696e203230206279746573206f72206c6573730000000000006064820152608401610425565b6101f982610fac565b60606000611091836020015161124b565b905060008184600001516110a59190611af3565b905060008167ffffffffffffffff8111156110c2576110c2611bef565b6040519080825280601f01601f1916602001820160405280156110ec576020820181803683370190505b509050600081602001905061111184876020015161110a91906119f0565b828561135b565b50949350505050565b60006101f98260006113db565b6000806000611136858561144b565b9150915061114381611491565b509392505050565b604051633af34c6b60e21b81526001600160a01b03838116600483015233602483015282169063ebcd31ac90604401600060405180830381600087803b15801561119457600080fd5b505af1158015610b9c573d6000803e3d6000fd5b6020810151805160009190821a9060c08210156111c9575060009392505050565b5060019392505050565b6000806000905060006111e9846020015161124b565b84602001516111f891906119f0565b905060008460000151856020015161121091906119f0565b90505b8082101561124257611224826112cc565b61122e90836119f0565b91508261123a81611b92565b935050611213565b50909392505050565b8051600090811a60808110156112645750600092915050565b60b881108061127f575060c0811080159061127f575060f881105b1561128d5750600192915050565b60c08110156112ba576112a2600160b8611b0a565b6112af9060ff1682611af3565b6102eb9060016119f0565b6112a2600160f8611b0a565b50919050565b8051600090811a60808110156112e55750600192915050565b60b88110156112f9576112af608082611af3565b60c08110156113265760b78103600184019350806020036101000a845104600182018101935050506112c6565b60f881101561133a576112af60c082611af3565b60019290920151602083900360f7016101000a900490910160f51901919050565b8061136557505050565b6020811061139d578251825261137c6020846119f0565b92506113896020836119f0565b9150611396602082611af3565b9050611365565b80156113d657600060016113b2836020611af3565b6113be90610100611a4b565b6113c89190611af3565b845184518216911916178352505b505050565b60006113e88260046119f0565b835110156114385760405162461bcd60e51b815260206004820152601a60248201527f726561644279746573343a206461746120746f6f2073686f72740000000000006044820152606401610425565b5001602001516001600160e01b03191690565b6000808251604114156114825760208301516040840151606085015160001a611476878285856115e2565b9450945050505061148a565b506000905060025b9250929050565b60008160048111156114a5576114a5611bc3565b14156114ae5750565b60018160048111156114c2576114c2611bc3565b14156115105760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610425565b600281600481111561152457611524611bc3565b14156115725760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610425565b600381600481111561158657611586611bc3565b14156115df5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610425565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611619575060009050600361169d565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561166d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166116965760006001925092505061169d565b9150600090505b94509492505050565b60008083601f8401126116b857600080fd5b50813567ffffffffffffffff8111156116d057600080fd5b60208301915083602082850101111561148a57600080fd5b80356001600160a01b03811681146116ff57600080fd5b919050565b60006020828403121561171657600080fd5b5035919050565b60006020828403121561172f57600080fd5b81356001600160e01b0319811681146102eb57600080fd5b6000806020838503121561175a57600080fd5b823567ffffffffffffffff81111561177157600080fd5b61177d858286016116a6565b90969095509350505050565b60008060008060008060008060008060c08b8d0312156117a857600080fd5b8a3567ffffffffffffffff808211156117c057600080fd5b6117cc8e838f016116a6565b909c509a5060208d01359150808211156117e557600080fd5b6117f18e838f016116a6565b909a50985060408d013591508082111561180a57600080fd5b6118168e838f016116a6565b909850965060608d013591508082111561182f57600080fd5b5061183c8d828e016116a6565b909550935061184f905060808c016116e8565b915060a08b013590509295989b9194979a5092959850565b6000806000806000806080878903121561188057600080fd5b863567ffffffffffffffff8082111561189857600080fd5b6118a48a838b016116a6565b909850965060208901359150808211156118bd57600080fd5b506118ca89828a016116a6565b90955093506118dd9050604088016116e8565b9150606087013590509295509295509295565b60008151808452611908816020860160208601611b2d565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b6000855161193e818460208a01611b2d565b919091019384525060609190911b6001600160601b03191660208301526034820152605401919050565b6020815260006102eb60208301846118f0565b60208152815160208201526020820151604082015260018060a01b036040830151166060820152606082015160808201526000608083015160a080840152610a3260c08401826118f0565b600080858511156119d657600080fd5b838611156119e357600080fd5b5050820193919092039150565b60008219821115611a0357611a03611bad565b500190565b600181815b80851115611a43578160001904821115611a2957611a29611bad565b80851615611a3657918102915b93841c9390800290611a0d565b509250929050565b60006102eb8383600082611a61575060016101f9565b81611a6e575060006101f9565b8160018114611a845760028114611a8e57611aaa565b60019150506101f9565b60ff841115611a9f57611a9f611bad565b50506001821b6101f9565b5060208310610133831016604e8410600b8410161715611acd575081810a6101f9565b611ad78383611a08565b8060001904821115611aeb57611aeb611bad565b029392505050565b600082821015611b0557611b05611bad565b500390565b600060ff821660ff841680821015611b2457611b24611bad565b90039392505050565b60005b83811015611b48578181015183820152602001611b30565b83811115611b57576000848401525b50505050565b600181811c90821680611b7157607f821691505b602082108114156112c657634e487b7160e01b600052602260045260246000fd5b6000600019821415611ba657611ba6611bad565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220fa0dfcc4dbb83ddc5bf5266c96c0053a2be0fdd808caa24b399c54d3aaf5eecc64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "commit(bytes32)": {
        "params": {
          "commitHash": "The hash of the report of a penalizable behaviour the reporter wants to reveal. Calculated as `commit(keccak(encodedPenalizeFunction))`."
        }
      },
      "decodeTransaction(bytes)": {
        "returns": {
          "transaction": "The details that the `Penalizer` needs to decide if the transaction is penalizable."
        }
      },
      "getPenalizeBlockDelay()": {
        "returns": {
          "_0": "The minimum delay between commit and reveal steps."
        }
      },
      "getPenalizeBlockExpiration()": {
        "returns": {
          "_0": "The maximum delay between commit and reveal steps."
        }
      },
      "isTransactionTypeValid(bytes)": {
        "returns": {
          "_0": "`true` if raw transaction is of types Legacy, 1 or 2. `false` otherwise."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "stateVariables": {
      "versionPenalizer": {
        "return": "a SemVer-compliant version of the `Penalizer` contract.",
        "returns": {
          "_0": "a SemVer-compliant version of the `Penalizer` contract."
        }
      }
    },
    "title": "The Penalizer Implementation",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CommitAdded(address,bytes32,uint256)": {
        "notice": "Emitted once the reporter submits the first step in the commit-reveal process."
      }
    },
    "kind": "user",
    "methods": {
      "commit(bytes32)": {
        "notice": "Called by the reporter as the first step in the commit-reveal process. Any sender can call it to make sure no-one can front-run it to claim this penalization."
      },
      "penalizeIllegalTransaction(bytes,bytes,address,uint256)": {
        "notice": "Called by the reporter as the second step in the commit-reveal process. The Relay Workers are not allowed to make calls other than to the `relayCall` method."
      },
      "penalizeRepeatedNonce(bytes,bytes,bytes,bytes,address,uint256)": {
        "notice": "Called by the reporter as the second step in the commit-reveal process. If a Relay Worker attacked the system by signing multiple transactions with same nonce so only one is accepted, anyone can grab both transactions from the blockchain and submit them here. Check whether `unsignedTx1` != `unsignedTx2`, that both are signed by the same address, and that `unsignedTx1.nonce` == `unsignedTx2.nonce`. If all conditions are met, relay is considered an \"offending relay\". The offending relay will be unregistered immediately, its stake will be forfeited and given to the address who reported it (the `msg.sender`), thus incentivizing anyone to report offending relays."
      }
    },
    "notice": "This Penalizer supports parsing Legacy, Type 1 and Type 2 raw RLP Encoded transactions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 522,
        "contract": "@opengsn/contracts/src/Penalizer.sol:Penalizer",
        "label": "versionPenalizer",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 750,
        "contract": "@opengsn/contracts/src/Penalizer.sol:Penalizer",
        "label": "commits",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}