{
  "address": "0x542B24678Ee3c319EBE006aD677cf8Ce4C6F97b0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxUnstakeDelay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_abandonmentDelay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_escheatmentDelay",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_burnAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AbandonedRelayManagerStakeEscheated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "burnAddress",
          "type": "address"
        }
      ],
      "name": "BurnAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "devAddress",
          "type": "address"
        }
      ],
      "name": "DevAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayHub",
          "type": "address"
        }
      ],
      "name": "HubAuthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayHub",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "removalTime",
          "type": "uint256"
        }
      ],
      "name": "HubUnauthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "abandonedTime",
          "type": "uint256"
        }
      ],
      "name": "RelayServerAbandoned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "keepaliveTime",
          "type": "uint256"
        }
      ],
      "name": "RelayServerKeepalive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeDelay",
          "type": "uint256"
        }
      ],
      "name": "StakeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "StakePenalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawTime",
          "type": "uint256"
        }
      ],
      "name": "StakeUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeWithdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayHub",
          "type": "address"
        }
      ],
      "name": "authorizeHubByManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "relayHub",
          "type": "address"
        }
      ],
      "name": "authorizeHubByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedHubs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "removalTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        }
      ],
      "name": "escheatAbandonedRelayStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAbandonedRelayServerConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "devAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "abandonmentDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "escheatmentDelay",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakeManager.AbandonedRelayServerConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBurnAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCreationBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxUnstakeDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        }
      ],
      "name": "getStakeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unstakeDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "abandonedTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keepaliveTime",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct IStakeManager.StakeInfo",
          "name": "stakeInfo",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "isSenderAuthorizedHub",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        }
      ],
      "name": "isRelayEscheatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        }
      ],
      "name": "markRelayAbandoned",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "penalizeRelayManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_burnAddress",
          "type": "address"
        }
      ],
      "name": "setBurnAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        }
      ],
      "name": "setDevAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "setRelayManagerOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "unstakeDelay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeForRelayManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeDelay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "abandonedTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "keepaliveTime",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayHub",
          "type": "address"
        }
      ],
      "name": "unauthorizeHubByManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "relayHub",
          "type": "address"
        }
      ],
      "name": "unauthorizeHubByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        }
      ],
      "name": "unlockStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        }
      ],
      "name": "updateRelayKeepaliveTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionSM",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        }
      ],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x71b42cd60cd3df9c9f59e7adfb10e5cf3287034be3c514425e964ef802f4b54b",
  "receipt": {
    "to": null,
    "from": "0x61B1E290d2F465d6667336d4934941aa2517AfA2",
    "contractAddress": "0x542B24678Ee3c319EBE006aD677cf8Ce4C6F97b0",
    "transactionIndex": 0,
    "gasUsed": "1882369",
    "logsBloom": "0x
    "blockHash": "0xdffa7dc6f6ac99674297e4b6f2cad7cb5b44cb055c4242cd82aa548ededc8aa7",
    "transactionHash": "0x71b42cd60cd3df9c9f59e7adfb10e5cf3287034be3c514425e964ef802f4b54b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4880204,
        "transactionHash": "0x71b42cd60cd3df9c9f59e7adfb10e5cf3287034be3c514425e964ef802f4b54b",
        "address": "0x542B24678Ee3c319EBE006aD677cf8Ce4C6F97b0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000061b1e290d2f465d6667336d4934941aa2517afa2"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdffa7dc6f6ac99674297e4b6f2cad7cb5b44cb055c4242cd82aa548ededc8aa7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4880204,
        "transactionHash": "0x71b42cd60cd3df9c9f59e7adfb10e5cf3287034be3c514425e964ef802f4b54b",
        "address": "0x542B24678Ee3c319EBE006aD677cf8Ce4C6F97b0",
        "topics": [
          "0xb0d2ad16ddd4d3dd008ebff0b7e7699bbfa920003cb0764acb871951d1cd4999",
          "0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xdffa7dc6f6ac99674297e4b6f2cad7cb5b44cb055c4242cd82aa548ededc8aa7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4880204,
        "transactionHash": "0x71b42cd60cd3df9c9f59e7adfb10e5cf3287034be3c514425e964ef802f4b54b",
        "address": "0x542B24678Ee3c319EBE006aD677cf8Ce4C6F97b0",
        "topics": [
          "0x78ef0ef64366f55e36ce7c04060e8bc5846d3651c53909eafc38458922d8a879",
          "0x00000000000000000000000061b1e290d2f465d6667336d4934941aa2517afa2"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xdffa7dc6f6ac99674297e4b6f2cad7cb5b44cb055c4242cd82aa548ededc8aa7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4880204,
        "transactionHash": "0x71b42cd60cd3df9c9f59e7adfb10e5cf3287034be3c514425e964ef802f4b54b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000061b1e290d2f465d6667336d4934941aa2517afa2",
          "0x000000000000000000000000ac75d6efec891724b88b916b36e2ef38bcbec73f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001914047253080f100000000000000000000000000000000000000000000000003d057d76b56400000000000000000000000000000000000000000000000001747e62692c188ed11000000000000000000000000000000000000000000000000023f17904625bf0f000000000000000000000000000000000000000000000017497766d9e6b96e02",
        "logIndex": 3,
        "blockHash": "0xdffa7dc6f6ac99674297e4b6f2cad7cb5b44cb055c4242cd82aa548ededc8aa7"
      }
    ],
    "blockNumber": 4880204,
    "cumulativeGasUsed": "1882369",
    "status": 1,
    "byzantium": true
  },
  "args": [
    100000000,
    31536000,
    2629746,
    "0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF",
    "0x61B1E290d2F465d6667336d4934941aa2517AfA2"
  ],
  "numDeployments": 1,
  "solcInputHash": "766eaa539015b343a6f8732a84d5a9ae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxUnstakeDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_abandonmentDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_escheatmentDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AbandonedRelayManagerStakeEscheated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burnAddress\",\"type\":\"address\"}],\"name\":\"BurnAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"}],\"name\":\"DevAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayHub\",\"type\":\"address\"}],\"name\":\"HubAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayHub\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removalTime\",\"type\":\"uint256\"}],\"name\":\"HubUnauthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"abandonedTime\",\"type\":\"uint256\"}],\"name\":\"RelayServerAbandoned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keepaliveTime\",\"type\":\"uint256\"}],\"name\":\"RelayServerKeepalive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeDelay\",\"type\":\"uint256\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"StakePenalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayHub\",\"type\":\"address\"}],\"name\":\"authorizeHubByManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayHub\",\"type\":\"address\"}],\"name\":\"authorizeHubByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedHubs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"removalTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"}],\"name\":\"escheatAbandonedRelayStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAbandonedRelayServerConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"abandonmentDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"escheatmentDelay\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.AbandonedRelayServerConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxUnstakeDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abandonedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keepaliveTime\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"stakeInfo\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isSenderAuthorizedHub\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"}],\"name\":\"isRelayEscheatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"}],\"name\":\"markRelayAbandoned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"penalizeRelayManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"}],\"name\":\"setBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setRelayManagerOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeForRelayManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abandonedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keepaliveTime\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayHub\",\"type\":\"address\"}],\"name\":\"unauthorizeHubByManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayHub\",\"type\":\"address\"}],\"name\":\"unauthorizeHubByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"}],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"}],\"name\":\"updateRelayKeepaliveTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionSM\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"authorizeHubByOwner(address,address)\":{\"params\":{\"relayHub\":\"The address of a `RelayHub` to be authorized.\",\"relayManager\":\"The address of a Relay Manager whose stake is to be authorized for the new `RelayHub`.\"}},\"getAbandonedRelayServerConfig()\":{\"returns\":{\"_0\":\"The structure that contains all configuration values for the 'abandoned' stake.\"}},\"getBurnAddress()\":{\"returns\":{\"_0\":\"The address that will receive the 'burned' part of the penalized stake.\"}},\"getCreationBlock()\":{\"returns\":{\"_0\":\"the block number in which the contract has been deployed.\"}},\"getMaxUnstakeDelay()\":{\"returns\":{\"_0\":\"The maximum unstake delay this `StakeManger` allows. This is to prevent locking money forever by mistake.\"}},\"getStakeInfo(address)\":{\"params\":{\"relayManager\":\"The address of a Relay Manager.\"},\"returns\":{\"isSenderAuthorizedHub\":\"`true` if the `msg.sender` for this call was a `RelayHub` that is authorized now. `false` if the `msg.sender` for this call is not authorized.\",\"stakeInfo\":\"The `StakeInfo` structure.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"penalizeRelayManager(address,address,uint256)\":{\"params\":{\"amount\":\"A total amount of penalty to be withdrawn from stake.\",\"beneficiary\":\"The address that receives part of the penalty amount.\",\"relayManager\":\"The address of a Relay Manager to be penalized.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setRelayManagerOwner(address)\":{\"params\":{\"owner\":\"- owner of the relay (as configured off-chain)\"}},\"stakeForRelayManager(address,address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to be taken from the relayOwner and locked in the StakeManager as a stake\",\"relayManager\":\"The address that represents a stake entry and controls relay registrations on relay hubs\",\"token\":\"The address of an ERC-20 token that is used by the relayManager as a stake\",\"unstakeDelay\":\"The number of seconds to elapse before an owner can retrieve the stake after calling `unlock`\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unauthorizeHubByOwner(address,address)\":{\"params\":{\"relayHub\":\"The address of a `RelayHub` to be unauthorized.\",\"relayManager\":\"The address of a Relay Manager.\"}},\"unlockStake(address)\":{\"params\":{\"relayManager\":\"The address of a Relay Manager whose stake is to be unlocked.\"}},\"withdrawStake(address)\":{\"params\":{\"relayManager\":\"The address of a Relay Manager whose stake is to be withdrawn.\"}}},\"stateVariables\":{\"versionSM\":{\"return\":\"a SemVer-compliant version of the `StakeManager` contract.\",\"returns\":{\"_0\":\"a SemVer-compliant version of the `StakeManager` contract.\"}}},\"title\":\"The StakeManager implementation\",\"version\":1},\"userdoc\":{\"events\":{\"AbandonedRelayManagerStakeEscheated(address,address,address,uint256)\":{\"notice\":\"Emitted when the stake of an abandoned relayer has been confiscated and transferred to the `devAddress`.\"},\"BurnAddressSet(address)\":{\"notice\":\"Emitted when a `burnAddress` is changed.\"},\"DevAddressSet(address)\":{\"notice\":\"Emitted when a `devAddress` is changed.\"},\"HubAuthorized(address,address)\":{\"notice\":\"Emitted when a `relayManager` adds a new `RelayHub` to a list of authorized.\"},\"HubUnauthorized(address,address,uint256)\":{\"notice\":\"Emitted when a `relayManager` removes a `RelayHub` from a list of authorized.\"},\"OwnerSet(address,address)\":{\"notice\":\"Emitted when a `relayManager` sets its `owner`. This is necessary to prevent stake hijacking.\"},\"RelayServerAbandoned(address,uint256)\":{\"notice\":\"Emitted if Relay Server is inactive for an `abandonmentDelay` and contract owner initiates its removal.\"},\"RelayServerKeepalive(address,uint256)\":{\"notice\":\"Emitted to indicate an action performed by a relay server to prevent it from being marked as abandoned.\"},\"StakeAdded(address,address,address,uint256,uint256)\":{\"notice\":\"Emitted when a `stake` or `unstakeDelay` are initialized or increased.\"},\"StakePenalized(address,address,address,uint256)\":{\"notice\":\"Emitted when an authorized `RelayHub` penalizes a `relayManager`.\"},\"StakeUnlocked(address,address,uint256)\":{\"notice\":\"Emitted once a stake is scheduled for withdrawal.\"},\"StakeWithdrawn(address,address,address,uint256)\":{\"notice\":\"Emitted when owner withdraws `relayManager` funds.\"}},\"kind\":\"user\",\"methods\":{\"authorizeHubByManager(address)\":{\"notice\":\"Same as `authorizeHubByOwner` but can be called by the RelayManager itself.\"},\"authorizeHubByOwner(address,address)\":{\"notice\":\"Add the `RelayHub` to a list of authorized by this Relay Manager. This allows the RelayHub to penalize this Relay Manager. The `RelayHub` cannot trust a Relay it cannot penalize.\"},\"authorizedHubs(address,address)\":{\"notice\":\"maps relay managers to a map of addressed of their authorized hubs to the information on that hub\"},\"escheatAbandonedRelayStake(address)\":{\"notice\":\"If more than `abandonmentDelay` has passed since the last Keepalive transaction, and relay manager has been marked as abandoned, and after that more that `escheatmentDelay` have passed, entire stake and balance will be taken from this relay.\"},\"getStakeInfo(address)\":{\"notice\":\"Get the stake details information for the given Relay Manager.\"},\"isRelayEscheatable(address)\":{\"notice\":\"Check if the Relay Manager can be considered abandoned or not. Returns true if the stake's abandonment time is in the past including the escheatment delay, false otherwise.\"},\"markRelayAbandoned(address)\":{\"notice\":\"Allows the contract owner to set the given `relayManager` as abandoned after a configurable delay. Its entire stake and balance will be taken from a relay if it does not respond to being marked as abandoned.\"},\"penalizeRelayManager(address,address,uint256)\":{\"notice\":\"Slash the stake of the relay relayManager. In order to prevent stake kidnapping, burns part of stake on the way.\"},\"setBurnAddress(address)\":{\"notice\":\"Change the address that will receive the 'burned' part of the penalized stake. This is done to prevent malicious Relay Server from penalizing itself and breaking even.\"},\"setDevAddress(address)\":{\"notice\":\"Change the address that will receive the 'abandoned' stake. This is done to prevent Relay Servers that lost their keys from losing access to funds.\"},\"setRelayManagerOwner(address)\":{\"notice\":\"Set the owner of a Relay Manager. Called only by the RelayManager itself. Note that owners cannot transfer ownership - if the entry already exists, reverts.\"},\"stakeForRelayManager(address,address,uint256,uint256)\":{\"notice\":\"Put a stake for a relayManager and set its unstake delay. Only the owner can call this function. If the entry does not exist, reverts. The owner must give allowance of the ERC-20 token to the StakeManager before calling this method. It is the RelayHub who has a configurable list of minimum stakes per token. StakeManager accepts all tokens.\"},\"stakes(address)\":{\"notice\":\"maps relay managers to their stakes\"},\"unauthorizeHubByManager(address)\":{\"notice\":\"Same as `unauthorizeHubByOwner` but can be called by the RelayManager itself.\"},\"unauthorizeHubByOwner(address,address)\":{\"notice\":\"Remove the `RelayHub` from a list of authorized by this Relay Manager.\"},\"unlockStake(address)\":{\"notice\":\"Schedule the unlocking of the stake. The `unstakeDelay` must pass before owner can call `withdrawStake`.\"},\"updateRelayKeepaliveTime(address)\":{\"notice\":\"Sets a new `keepaliveTime` for the given `relayManager`, preventing it from being marked as abandoned. Can be called by an authorized `RelayHub` or by the `relayOwner` address.\"},\"withdrawStake(address)\":{\"notice\":\"Withdraw the unlocked stake.\"}},\"notice\":\"An IStakeManager instance that accepts stakes in any ERC-20 token.Single StakeInfo of a single RelayManager can only have one token address assigned to it.It cannot be changed after the first time 'stakeForRelayManager' is called as it is equivalent to withdrawal.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@opengsn/contracts/src/StakeManager.sol\":\"StakeManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/StakeManager.sol\":{\"content\":\"// solhint-disable not-rely-on-time\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport \\\"./interfaces/IStakeManager.sol\\\";\\n\\n/**\\n * @title The StakeManager implementation\\n * @notice An IStakeManager instance that accepts stakes in any ERC-20 token.\\n *\\n * @notice Single StakeInfo of a single RelayManager can only have one token address assigned to it.\\n *\\n * @notice It cannot be changed after the first time 'stakeForRelayManager' is called as it is equivalent to withdrawal.\\n */\\ncontract StakeManager is IStakeManager, Ownable, ERC165 {\\n    using SafeERC20 for IERC20;\\n\\n    string public override versionSM = \\\"3.0.0-beta.3+opengsn.stakemanager.istakemanager\\\";\\n    uint256 internal immutable maxUnstakeDelay;\\n\\n    AbandonedRelayServerConfig internal abandonedRelayServerConfig;\\n\\n    address internal burnAddress;\\n    uint256 internal immutable creationBlock;\\n\\n    /// maps relay managers to their stakes\\n    mapping(address => StakeInfo) public stakes;\\n\\n    /// @inheritdoc IStakeManager\\n    function getStakeInfo(address relayManager) external override view returns (StakeInfo memory stakeInfo, bool isSenderAuthorizedHub) {\\n        bool isHubAuthorized = authorizedHubs[relayManager][msg.sender].removalTime == type(uint256).max;\\n        return (stakes[relayManager], isHubAuthorized);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function setBurnAddress(address _burnAddress) public override onlyOwner {\\n        burnAddress = _burnAddress;\\n        emit BurnAddressSet(burnAddress);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function getBurnAddress() external override view returns (address) {\\n        return burnAddress;\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function setDevAddress(address _devAddress) public override onlyOwner {\\n        abandonedRelayServerConfig.devAddress = _devAddress;\\n        emit DevAddressSet(abandonedRelayServerConfig.devAddress);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function getAbandonedRelayServerConfig() external override view returns (AbandonedRelayServerConfig memory) {\\n        return abandonedRelayServerConfig;\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function getMaxUnstakeDelay() external override view returns (uint256) {\\n        return maxUnstakeDelay;\\n    }\\n\\n    /// maps relay managers to a map of addressed of their authorized hubs to the information on that hub\\n    mapping(address => mapping(address => RelayHubInfo)) public authorizedHubs;\\n\\n    constructor(\\n        uint256 _maxUnstakeDelay,\\n        uint256 _abandonmentDelay,\\n        uint256 _escheatmentDelay,\\n        address _burnAddress,\\n        address _devAddress\\n    ) {\\n        require(_burnAddress != address(0), \\\"transfers to address(0) may fail\\\");\\n        setBurnAddress(_burnAddress);\\n        setDevAddress(_devAddress);\\n        creationBlock = block.number;\\n        maxUnstakeDelay = _maxUnstakeDelay;\\n        abandonedRelayServerConfig.abandonmentDelay = _abandonmentDelay;\\n        abandonedRelayServerConfig.escheatmentDelay = _escheatmentDelay;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IStakeManager).interfaceId ||\\n        super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function getCreationBlock() external override view returns (uint256){\\n        return creationBlock;\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function setRelayManagerOwner(address owner) external override {\\n        require(owner != address(0), \\\"invalid owner\\\");\\n        require(stakes[msg.sender].owner == address(0), \\\"already owned\\\");\\n        stakes[msg.sender].owner = owner;\\n        emit OwnerSet(msg.sender, owner);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function stakeForRelayManager(IERC20 token, address relayManager, uint256 unstakeDelay, uint256 amount) external override relayOwnerOnly(relayManager) {\\n        require(unstakeDelay >= stakes[relayManager].unstakeDelay, \\\"unstakeDelay cannot be decreased\\\");\\n        require(unstakeDelay <= maxUnstakeDelay, \\\"unstakeDelay too big\\\");\\n        require(token != IERC20(address(0)), \\\"must specify stake token address\\\");\\n        require(\\n            stakes[relayManager].token == IERC20(address(0)) ||\\n            stakes[relayManager].token == token,\\n            \\\"stake token address is incorrect\\\");\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        stakes[relayManager].token = token;\\n        stakes[relayManager].stake += amount;\\n        stakes[relayManager].unstakeDelay = unstakeDelay;\\n        emit StakeAdded(relayManager, stakes[relayManager].owner, stakes[relayManager].token, stakes[relayManager].stake, stakes[relayManager].unstakeDelay);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function unlockStake(address relayManager) external override relayOwnerOnly(relayManager) {\\n        StakeInfo storage info = stakes[relayManager];\\n        require(info.withdrawTime == 0, \\\"already pending\\\");\\n        info.withdrawTime = block.timestamp + info.unstakeDelay;\\n        emit StakeUnlocked(relayManager, msg.sender, info.withdrawTime);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function withdrawStake(address relayManager) external override relayOwnerOnly(relayManager) {\\n        StakeInfo storage info = stakes[relayManager];\\n        require(info.withdrawTime > 0, \\\"Withdrawal is not scheduled\\\");\\n        require(info.withdrawTime <= block.timestamp, \\\"Withdrawal is not due\\\");\\n        uint256 amount = info.stake;\\n        info.stake = 0;\\n        info.withdrawTime = 0;\\n        info.token.safeTransfer(msg.sender, amount);\\n        emit StakeWithdrawn(relayManager, msg.sender, info.token, amount);\\n    }\\n\\n    /// @notice Prevents any address other than a registered Relay Owner from calling this method.\\n    modifier relayOwnerOnly (address relayManager) {\\n        StakeInfo storage info = stakes[relayManager];\\n        require(info.owner == msg.sender, \\\"not owner\\\");\\n        _;\\n    }\\n\\n    /// @notice Prevents any address other than a registered Relay Manager from calling this method.\\n    modifier managerOnly () {\\n        StakeInfo storage info = stakes[msg.sender];\\n        require(info.owner != address(0), \\\"not manager\\\");\\n        _;\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function authorizeHubByOwner(address relayManager, address relayHub) external relayOwnerOnly(relayManager) override {\\n        _authorizeHub(relayManager, relayHub);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function authorizeHubByManager(address relayHub) external managerOnly override {\\n        _authorizeHub(msg.sender, relayHub);\\n    }\\n\\n    function _authorizeHub(address relayManager, address relayHub) internal {\\n        authorizedHubs[relayManager][relayHub].removalTime = type(uint256).max;\\n        emit HubAuthorized(relayManager, relayHub);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function unauthorizeHubByOwner(address relayManager, address relayHub) external override relayOwnerOnly(relayManager) {\\n        _unauthorizeHub(relayManager, relayHub);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function unauthorizeHubByManager(address relayHub) external override managerOnly {\\n        _unauthorizeHub(msg.sender, relayHub);\\n    }\\n\\n    function _unauthorizeHub(address relayManager, address relayHub) internal {\\n        RelayHubInfo storage hubInfo = authorizedHubs[relayManager][relayHub];\\n        require(hubInfo.removalTime == type(uint256).max, \\\"hub not authorized\\\");\\n        hubInfo.removalTime = block.timestamp + stakes[relayManager].unstakeDelay;\\n        emit HubUnauthorized(relayManager, relayHub, hubInfo.removalTime);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function penalizeRelayManager(address relayManager, address beneficiary, uint256 amount) external override {\\n        uint256 removalTime = authorizedHubs[relayManager][msg.sender].removalTime;\\n        require(removalTime != 0, \\\"hub not authorized\\\");\\n        require(removalTime > block.timestamp, \\\"hub authorization expired\\\");\\n\\n        // Half of the stake will be burned (sent to address 0)\\n        require(stakes[relayManager].stake >= amount, \\\"penalty exceeds stake\\\");\\n        stakes[relayManager].stake =stakes[relayManager].stake - amount;\\n\\n        uint256 toBurn = amount / 2;\\n        uint256 reward = amount - toBurn;\\n\\n        // Stake ERC-20 token is burned and transferred\\n        stakes[relayManager].token.safeTransfer(burnAddress, toBurn);\\n        stakes[relayManager].token.safeTransfer(beneficiary, reward);\\n        emit StakePenalized(relayManager, beneficiary, stakes[relayManager].token, reward);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function isRelayEscheatable(address relayManager) public view override returns (bool) {\\n        IStakeManager.StakeInfo memory stakeInfo = stakes[relayManager];\\n        return stakeInfo.abandonedTime != 0 && stakeInfo.abandonedTime + abandonedRelayServerConfig.escheatmentDelay < block.timestamp;\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function markRelayAbandoned(address relayManager) external override onlyOwner {\\n        StakeInfo storage info = stakes[relayManager];\\n        require(info.stake > 0, \\\"relay manager not staked\\\");\\n        require(info.abandonedTime == 0, \\\"relay manager already abandoned\\\");\\n        require(info.keepaliveTime + abandonedRelayServerConfig.abandonmentDelay < block.timestamp, \\\"relay manager was alive recently\\\");\\n        info.abandonedTime = block.timestamp;\\n        emit RelayServerAbandoned(relayManager, info.abandonedTime);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function escheatAbandonedRelayStake(address relayManager) external override onlyOwner {\\n        StakeInfo storage info = stakes[relayManager];\\n        require(isRelayEscheatable(relayManager), \\\"relay server not escheatable yet\\\");\\n        uint256 amount = info.stake;\\n        info.stake = 0;\\n        info.withdrawTime = 0;\\n        info.token.safeTransfer(abandonedRelayServerConfig.devAddress, amount);\\n        emit AbandonedRelayManagerStakeEscheated(relayManager, msg.sender, info.token, amount);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function updateRelayKeepaliveTime(address relayManager) external override {\\n        StakeInfo storage info = stakes[relayManager];\\n        bool isHubAuthorized = authorizedHubs[relayManager][msg.sender].removalTime == type(uint256).max;\\n        bool isRelayOwner = info.owner == msg.sender;\\n        require(isHubAuthorized || isRelayOwner, \\\"must be called by owner or hub\\\");\\n        info.abandonedTime = 0;\\n        info.keepaliveTime = block.timestamp;\\n        emit RelayServerKeepalive(relayManager, info.keepaliveTime);\\n    }\\n}\\n\",\"keccak256\":\"0x4d2ed3c27408862e42b00c8ec1d6c3231759b5932a71bb71ff84805a4f48f467\",\"license\":\"GPL-3.0-only\"},\"@opengsn/contracts/src/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @title The StakeManager Interface\\n * @notice In order to prevent an attacker from registering a large number of unresponsive relays, the GSN requires\\n * the Relay Server to maintain a permanently locked stake in the system before being able to register.\\n *\\n * @notice Also, in some cases the behavior of a Relay Server may be found to be illegal by a `Penalizer` contract.\\n * In such case, the stake will never be returned to the Relay Server operator and will be slashed.\\n *\\n * @notice An implementation of this interface is tasked with keeping Relay Servers' stakes, made in any ERC-20 token.\\n * Note that the `RelayHub` chooses which ERC-20 tokens to support and how much stake is needed.\\n */\\ninterface IStakeManager is IERC165 {\\n\\n    /// @notice Emitted when a `stake` or `unstakeDelay` are initialized or increased.\\n    event StakeAdded(\\n        address indexed relayManager,\\n        address indexed owner,\\n        IERC20 token,\\n        uint256 stake,\\n        uint256 unstakeDelay\\n    );\\n\\n    /// @notice Emitted once a stake is scheduled for withdrawal.\\n    event StakeUnlocked(\\n        address indexed relayManager,\\n        address indexed owner,\\n        uint256 withdrawTime\\n    );\\n\\n    /// @notice Emitted when owner withdraws `relayManager` funds.\\n    event StakeWithdrawn(\\n        address indexed relayManager,\\n        address indexed owner,\\n        IERC20 token,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted when an authorized `RelayHub` penalizes a `relayManager`.\\n    event StakePenalized(\\n        address indexed relayManager,\\n        address indexed beneficiary,\\n        IERC20 token,\\n        uint256 reward\\n    );\\n\\n    /// @notice Emitted when a `relayManager` adds a new `RelayHub` to a list of authorized.\\n    event HubAuthorized(\\n        address indexed relayManager,\\n        address indexed relayHub\\n    );\\n\\n    /// @notice Emitted when a `relayManager` removes a `RelayHub` from a list of authorized.\\n    event HubUnauthorized(\\n        address indexed relayManager,\\n        address indexed relayHub,\\n        uint256 removalTime\\n    );\\n\\n    /// @notice Emitted when a `relayManager` sets its `owner`. This is necessary to prevent stake hijacking.\\n    event OwnerSet(\\n        address indexed relayManager,\\n        address indexed owner\\n    );\\n\\n    /// @notice Emitted when a `burnAddress` is changed.\\n    event BurnAddressSet(\\n        address indexed burnAddress\\n    );\\n\\n    /// @notice Emitted when a `devAddress` is changed.\\n    event DevAddressSet(\\n        address indexed devAddress\\n    );\\n\\n    /// @notice Emitted if Relay Server is inactive for an `abandonmentDelay` and contract owner initiates its removal.\\n    event RelayServerAbandoned(\\n        address indexed relayManager,\\n        uint256 abandonedTime\\n    );\\n\\n    /// @notice Emitted to indicate an action performed by a relay server to prevent it from being marked as abandoned.\\n    event RelayServerKeepalive(\\n        address indexed relayManager,\\n        uint256 keepaliveTime\\n    );\\n\\n    /// @notice Emitted when the stake of an abandoned relayer has been confiscated and transferred to the `devAddress`.\\n    event AbandonedRelayManagerStakeEscheated(\\n        address indexed relayManager,\\n        address indexed owner,\\n        IERC20 token,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param stake - amount of ether staked for this relay\\n     * @param unstakeDelay - number of seconds to elapse before the owner can retrieve the stake after calling 'unlock'\\n     * @param withdrawTime - timestamp in seconds when 'withdraw' will be callable, or zero if the unlock has not been called\\n     * @param owner - address that receives revenue and manages relayManager's stake\\n     */\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelay;\\n        uint256 withdrawTime;\\n        uint256 abandonedTime;\\n        uint256 keepaliveTime;\\n        IERC20 token;\\n        address owner;\\n    }\\n\\n    struct RelayHubInfo {\\n        uint256 removalTime;\\n    }\\n\\n    /**\\n     * @param devAddress - the address that will receive the 'abandoned' stake\\n     * @param abandonmentDelay - the amount of time after which the relay can be marked as 'abandoned'\\n     * @param escheatmentDelay - the amount of time after which the abandoned relay's stake and balance may be withdrawn to the `devAddress`\\n     */\\n    struct AbandonedRelayServerConfig {\\n        address devAddress;\\n        uint256 abandonmentDelay;\\n        uint256 escheatmentDelay;\\n    }\\n\\n    /**\\n     * @notice Set the owner of a Relay Manager. Called only by the RelayManager itself.\\n     * Note that owners cannot transfer ownership - if the entry already exists, reverts.\\n     * @param owner - owner of the relay (as configured off-chain)\\n     */\\n    function setRelayManagerOwner(address owner) external;\\n\\n    /**\\n     * @notice Put a stake for a relayManager and set its unstake delay.\\n     * Only the owner can call this function. If the entry does not exist, reverts.\\n     * The owner must give allowance of the ERC-20 token to the StakeManager before calling this method.\\n     * It is the RelayHub who has a configurable list of minimum stakes per token. StakeManager accepts all tokens.\\n     * @param token The address of an ERC-20 token that is used by the relayManager as a stake\\n     * @param relayManager The address that represents a stake entry and controls relay registrations on relay hubs\\n     * @param unstakeDelay The number of seconds to elapse before an owner can retrieve the stake after calling `unlock`\\n     * @param amount The amount of tokens to be taken from the relayOwner and locked in the StakeManager as a stake\\n     */\\n    function stakeForRelayManager(IERC20 token, address relayManager, uint256 unstakeDelay, uint256 amount) external;\\n\\n    /**\\n     * @notice Schedule the unlocking of the stake. The `unstakeDelay` must pass before owner can call `withdrawStake`.\\n     * @param relayManager The address of a Relay Manager whose stake is to be unlocked.\\n     */\\n    function unlockStake(address relayManager) external;\\n    /**\\n     * @notice Withdraw the unlocked stake.\\n     * @param relayManager The address of a Relay Manager whose stake is to be withdrawn.\\n     */\\n    function withdrawStake(address relayManager) external;\\n\\n    /**\\n     * @notice Add the `RelayHub` to a list of authorized by this Relay Manager.\\n     * This allows the RelayHub to penalize this Relay Manager. The `RelayHub` cannot trust a Relay it cannot penalize.\\n     * @param relayManager The address of a Relay Manager whose stake is to be authorized for the new `RelayHub`.\\n     * @param relayHub The address of a `RelayHub` to be authorized.\\n     */\\n    function authorizeHubByOwner(address relayManager, address relayHub) external;\\n\\n    /**\\n     * @notice Same as `authorizeHubByOwner` but can be called by the RelayManager itself.\\n     */\\n    function authorizeHubByManager(address relayHub) external;\\n\\n    /**\\n     * @notice Remove the `RelayHub` from a list of authorized by this Relay Manager.\\n     * @param relayManager The address of a Relay Manager.\\n     * @param relayHub The address of a `RelayHub` to be unauthorized.\\n     */\\n    function unauthorizeHubByOwner(address relayManager, address relayHub) external;\\n\\n    /**\\n     * @notice Same as `unauthorizeHubByOwner` but can be called by the RelayManager itself.\\n     */\\n    function unauthorizeHubByManager(address relayHub) external;\\n\\n    /**\\n     * Slash the stake of the relay relayManager. In order to prevent stake kidnapping, burns part of stake on the way.\\n     * @param relayManager The address of a Relay Manager to be penalized.\\n     * @param beneficiary The address that receives part of the penalty amount.\\n     * @param amount A total amount of penalty to be withdrawn from stake.\\n     */\\n    function penalizeRelayManager(address relayManager, address beneficiary, uint256 amount) external;\\n\\n    /**\\n     * @notice Allows the contract owner to set the given `relayManager` as abandoned after a configurable delay.\\n     * Its entire stake and balance will be taken from a relay if it does not respond to being marked as abandoned.\\n     */\\n    function markRelayAbandoned(address relayManager) external;\\n\\n    /**\\n     * @notice If more than `abandonmentDelay` has passed since the last Keepalive transaction, and relay manager\\n     * has been marked as abandoned, and after that more that `escheatmentDelay` have passed, entire stake and\\n     * balance will be taken from this relay.\\n     */\\n    function escheatAbandonedRelayStake(address relayManager) external;\\n\\n    /**\\n     * @notice Sets a new `keepaliveTime` for the given `relayManager`, preventing it from being marked as abandoned.\\n     * Can be called by an authorized `RelayHub` or by the `relayOwner` address.\\n     */\\n    function updateRelayKeepaliveTime(address relayManager) external;\\n\\n    /**\\n     * @notice Check if the Relay Manager can be considered abandoned or not.\\n     * Returns true if the stake's abandonment time is in the past including the escheatment delay, false otherwise.\\n     */\\n    function isRelayEscheatable(address relayManager) external view returns(bool);\\n\\n    /**\\n     * @notice Get the stake details information for the given Relay Manager.\\n     * @param relayManager The address of a Relay Manager.\\n     * @return stakeInfo The `StakeInfo` structure.\\n     * @return isSenderAuthorizedHub `true` if the `msg.sender` for this call was a `RelayHub` that is authorized now.\\n     * `false` if the `msg.sender` for this call is not authorized.\\n     */\\n    function getStakeInfo(address relayManager) external view returns (StakeInfo memory stakeInfo, bool isSenderAuthorizedHub);\\n\\n    /**\\n     * @return The maximum unstake delay this `StakeManger` allows. This is to prevent locking money forever by mistake.\\n     */\\n    function getMaxUnstakeDelay() external view returns (uint256);\\n\\n    /**\\n     * @notice Change the address that will receive the 'burned' part of the penalized stake.\\n     * This is done to prevent malicious Relay Server from penalizing itself and breaking even.\\n     */\\n    function setBurnAddress(address _burnAddress) external;\\n\\n    /**\\n     * @return The address that will receive the 'burned' part of the penalized stake.\\n     */\\n    function getBurnAddress() external view returns (address);\\n\\n    /**\\n     * @notice Change the address that will receive the 'abandoned' stake.\\n     * This is done to prevent Relay Servers that lost their keys from losing access to funds.\\n     */\\n    function setDevAddress(address _burnAddress) external;\\n\\n    /**\\n     * @return The structure that contains all configuration values for the 'abandoned' stake.\\n     */\\n    function getAbandonedRelayServerConfig() external view returns (AbandonedRelayServerConfig memory);\\n\\n    /**\\n     * @return the block number in which the contract has been deployed.\\n     */\\n    function getCreationBlock() external view returns (uint256);\\n\\n    /**\\n     * @return a SemVer-compliant version of the `StakeManager` contract.\\n     */\\n    function versionSM() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x77035b55ca4c09cb499bc0cab3f9e791d77597b148dbfee8bf94ca6c0039c3e0\",\"license\":\"GPL-3.0-only\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610120604052602f60c0818152906200214860e03980516200002a9160019160209091019062000246565b503480156200003857600080fd5b5060405162002177380380620021778339810160408190526200005b9162000309565b6200006633620000f0565b6001600160a01b038216620000c25760405162461bcd60e51b815260206004820181905260248201527f7472616e736665727320746f2061646472657373283029206d6179206661696c60448201526064015b60405180910390fd5b620000cd8262000140565b620000d88162000194565b50504360a0526080929092526003556004556200039b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6200014a620001e8565b600580546001600160a01b0319166001600160a01b0383169081179091556040517fb0d2ad16ddd4d3dd008ebff0b7e7699bbfa920003cb0764acb871951d1cd499990600090a250565b6200019e620001e8565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f78ef0ef64366f55e36ce7c04060e8bc5846d3651c53909eafc38458922d8a87990600090a250565b6000546001600160a01b03163314620002445760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000b9565b565b82805462000254906200035e565b90600052602060002090601f016020900481019282620002785760008555620002c3565b82601f106200029357805160ff1916838001178555620002c3565b82800160010185558215620002c3579182015b82811115620002c3578251825591602001919060010190620002a6565b50620002d1929150620002d5565b5090565b5b80821115620002d15760008155600101620002d6565b80516001600160a01b03811681146200030457600080fd5b919050565b600080600080600060a086880312156200032257600080fd5b8551945060208601519350604086015192506200034260608701620002ec565b91506200035260808701620002ec565b90509295509295909350565b600181811c908216806200037357607f821691505b602082108114156200039557634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a051611d80620003c860003960006102990152600081816103cc015261083a0152611d806000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80637835d296116100f9578063c5f0674311610097578063f2fde38b11610071578063f2fde38b146104d6578063f48f8ac7146104e9578063f9bce311146104fc578063fece3dd41461050f57600080fd5b8063c5f067431461047d578063d0d41fe1146104b0578063d48a9d43146104c357600080fd5b8063a9aadcd7116100d3578063a9aadcd7146103b7578063afcb7752146103ca578063c23a5cea146103f0578063c34531531461040357600080fd5b80637835d296146103685780637aeb642a1461037b5780638da5cb5b146103a657600080fd5b806339622167116101665780634a1ce599116101405780634a1ce599146103275780634b0e72161461033a578063715018a61461034d57806371fa1faf1461035557600080fd5b806339622167146102ec57806346dcbf0b146102ff57806347116c6e1461031257600080fd5b806301ffc9a7146101ae57806309a08af4146101d657806314080fac146101eb57806316934fc4146101fe57806320ffd56d1461029757806338b39d29146102c7575b600080fd5b6101c16101bc366004611b85565b610522565b60405190151581526020015b60405180910390f35b6101e96101e4366004611b22565b610558565b005b6101e96101f9366004611baf565b61078c565b61025661020c366004611acc565b600660208190526000918252604090912080546001820154600283015460038401546004850154600586015495909601549395929491939092916001600160a01b03908116911687565b60408051978852602088019690965294860193909352606085019190915260808401526001600160a01b0390811660a08401521660c082015260e0016101cd565b7f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020016101cd565b6005546001600160a01b03165b6040516001600160a01b0390911681526020016101cd565b6101c16102fa366004611acc565b610a58565b6101e961030d366004611acc565b610aed565b61031a610bd2565b6040516101cd9190611c11565b6101e9610335366004611acc565b610c60565b6101e9610348366004611acc565b610d59565b6101e9610dab565b6101e9610363366004611acc565b610dbf565b6101e9610376366004611ae9565b610f29565b6102b9610389366004611ae9565b600760209081526000928352604080842090915290825290205481565b6000546001600160a01b03166102d4565b6101e96103c5366004611acc565b610f7a565b7f00000000000000000000000000000000000000000000000000000000000000006102b9565b6101e96103fe366004611acc565b61106f565b610416610411366004611acc565b6111de565b6040805183518152602080850151908201528382015191810191909152606080840151908201526080808401519082015260a0808401516001600160a01b039081169183019190915260c0938401511692810192909252151560e0820152610100016101cd565b6104856112bd565b6040805182516001600160a01b031681526020808401519082015291810151908201526060016101cd565b6101e96104be366004611acc565b611318565b6101e96104d1366004611acc565b61136a565b6101e96104e4366004611acc565b6113d1565b6101e96104f7366004611ae9565b61144a565b6101e961050a366004611acc565b611495565b6101e961051d366004611acc565b6114f8565b60006001600160e01b0319821662db127760e01b148061055257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b0383166000908152600760209081526040808320338452909152902054806105c35760405162461bcd60e51b81526020600482015260126024820152711a1d58881b9bdd08185d5d1a1bdc9a5e995960721b60448201526064015b60405180910390fd5b4281116106125760405162461bcd60e51b815260206004820152601960248201527f68756220617574686f72697a6174696f6e20657870697265640000000000000060448201526064016105ba565b6001600160a01b0384166000908152600660205260409020548211156106725760405162461bcd60e51b815260206004820152601560248201527470656e616c74792065786365656473207374616b6560581b60448201526064016105ba565b6001600160a01b038416600090815260066020526040902054610696908390611ca1565b6001600160a01b0385166000908152600660205260408120919091556106bd600284611c7f565b905060006106cb8285611ca1565b600580546001600160a01b038981166000908152600660205260409020909201549293506106fd9282169116846115f4565b6001600160a01b03808716600090815260066020526040902060050154610726911686836115f4565b6001600160a01b038681166000818152600660209081526040918290206005015482519085168152908101859052928816927f2da6b6c9084d39eeb104d765e33a4e16c8762e01b37383b75202d17515d1b82b91015b60405180910390a3505050505050565b6001600160a01b0380841660009081526006602081905260409091209081015485921633146107cd5760405162461bcd60e51b81526004016105ba90611c44565b6001600160a01b0385166000908152600660205260409020600101548410156108385760405162461bcd60e51b815260206004820181905260248201527f756e7374616b6544656c61792063616e6e6f742062652064656372656173656460448201526064016105ba565b7f000000000000000000000000000000000000000000000000000000000000000084111561089f5760405162461bcd60e51b8152602060048201526014602482015273756e7374616b6544656c617920746f6f2062696760601b60448201526064016105ba565b6001600160a01b0386166108f55760405162461bcd60e51b815260206004820181905260248201527f6d7573742073706563696679207374616b6520746f6b656e206164647265737360448201526064016105ba565b6001600160a01b0385811660009081526006602052604090206005015416158061093e57506001600160a01b038581166000908152600660205260409020600501548116908716145b61098a5760405162461bcd60e51b815260206004820181905260248201527f7374616b6520746f6b656e206164647265737320697320696e636f727265637460448201526064016105ba565b61099f6001600160a01b03871633308661165c565b6001600160a01b0385811660009081526006602052604081206005810180546001600160a01b031916938a16939093179092558154859291906109e3908490611c67565b90915550506001600160a01b03858116600081815260066020818152604092839020600181018a9055918201546005830154925484519387168452918301919091529181018890529216917ff83af4359c42f5104d95351ec3dd5e88f5344bc7eaea8de052c9b0d5254808fc9060600161077c565b6001600160a01b038082166000908152600660208181526040808420815160e08101835281548152600182015493810193909352600281015491830191909152600381015460608301819052600482015460808401526005820154861660a084015292015490931660c084015290919015801590610ae6575060045460608201514291610ae491611c67565b105b9392505050565b6001600160a01b0381811660009081526006602081815260408084206007835281852033808752935293205491830154929360001990921492909116148180610b335750805b610b7f5760405162461bcd60e51b815260206004820152601e60248201527f6d7573742062652063616c6c6564206279206f776e6572206f7220687562000060448201526064016105ba565b6000600384015542600484018190556040519081526001600160a01b038516907f27f31d9acb21058a327d122842d8dfa9641e7b6600ff715e99b9164080109e099060200160405180910390a250505050565b60018054610bdf90611ce4565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0b90611ce4565b8015610c585780601f10610c2d57610100808354040283529160200191610c58565b820191906000526020600020905b815481529060010190602001808311610c3b57829003601f168201915b505050505081565b6001600160a01b038082166000908152600660208190526040909120908101548392163314610ca15760405162461bcd60e51b81526004016105ba90611c44565b6001600160a01b0383166000908152600660205260409020600281015415610cfd5760405162461bcd60e51b815260206004820152600f60248201526e616c72656164792070656e64696e6760881b60448201526064016105ba565b6001810154610d0c9042611c67565b6002820181905560405190815233906001600160a01b038616907f9ffc6168de1eb7f1d16200f614753cd7edce5a2186aab1c612199dd7316cd7c49060200160405180910390a350505050565b610d61611694565b600580546001600160a01b0319166001600160a01b0383169081179091556040517fb0d2ad16ddd4d3dd008ebff0b7e7699bbfa920003cb0764acb871951d1cd499990600090a250565b610db3611694565b610dbd60006116ee565b565b610dc7611694565b6001600160a01b03811660009081526006602052604090208054610e2d5760405162461bcd60e51b815260206004820152601860248201527f72656c6179206d616e61676572206e6f74207374616b6564000000000000000060448201526064016105ba565b600381015415610e7f5760405162461bcd60e51b815260206004820152601f60248201527f72656c6179206d616e6167657220616c7265616479206162616e646f6e65640060448201526064016105ba565b60035460048201544291610e9291611c67565b10610edf5760405162461bcd60e51b815260206004820181905260248201527f72656c6179206d616e616765722077617320616c69766520726563656e746c7960448201526064016105ba565b42600382018190556040519081526001600160a01b038316907f2931c4798cd84eb47ddd8e2b225e48c52a4cdbbdb49fc6e259dc16ac359d9bcf9060200160405180910390a25050565b6001600160a01b038083166000908152600660208190526040909120908101548492163314610f6a5760405162461bcd60e51b81526004016105ba90611c44565b610f74848461173e565b50505050565b610f82611694565b6001600160a01b0381166000908152600660205260409020610fa382610a58565b610fef5760405162461bcd60e51b815260206004820181905260248201527f72656c617920736572766572206e6f74206573636865617461626c652079657460448201526064016105ba565b8054600080835560028084019190915554600583015461101c916001600160a01b039182169116836115f4565b6005820154604080516001600160a01b0392831681526020810184905233928616917f0c82251845a9397018c808e8698b438fbce74fbdbdd67b554861e0ce38d1ff0e91015b60405180910390a3505050565b6001600160a01b0380821660009081526006602081905260409091209081015483921633146110b05760405162461bcd60e51b81526004016105ba90611c44565b6001600160a01b038316600090815260066020526040902060028101546111195760405162461bcd60e51b815260206004820152601b60248201527f5769746864726177616c206973206e6f74207363686564756c6564000000000060448201526064016105ba565b42816002015411156111655760405162461bcd60e51b81526020600482015260156024820152745769746864726177616c206973206e6f742064756560581b60448201526064016105ba565b805460008083556002830155600582015461118a906001600160a01b031633836115f4565b6005820154604080516001600160a01b0392831681526020810184905233928816917fddbbe0a4d722dc62b8a415c5e38b88260d0e7a4848cacc83f41fbee40f700168910160405180910390a35050505050565b6112306040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b506001600160a01b039081166000818152600760209081526040808320338452825280832054938352600680835292819020815160e0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005810154851660a08301529091015490921660c0830152909160001990911490565b6112ea604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b50604080516060810182526002546001600160a01b0316815260035460208201526004549181019190915290565b611320611694565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f78ef0ef64366f55e36ce7c04060e8bc5846d3651c53909eafc38458922d8a87990600090a250565b336000908152600660208190526040909120908101546001600160a01b03166113c35760405162461bcd60e51b815260206004820152600b60248201526a3737ba1036b0b730b3b2b960a91b60448201526064016105ba565b6113cd338361173e565b5050565b6113d9611694565b6001600160a01b03811661143e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ba565b611447816116ee565b50565b6001600160a01b03808316600090815260066020819052604090912090810154849216331461148b5760405162461bcd60e51b81526004016105ba90611c44565b610f748484611795565b336000908152600660208190526040909120908101546001600160a01b03166114ee5760405162461bcd60e51b815260206004820152600b60248201526a3737ba1036b0b730b3b2b960a91b60448201526064016105ba565b6113cd3383611795565b6001600160a01b03811661153e5760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b21037bbb732b960991b60448201526064016105ba565b33600090815260066020819052604090912001546001600160a01b0316156115985760405162461bcd60e51b815260206004820152600d60248201526c185b1c9958591e481bdddb9959609a1b60448201526064016105ba565b33600081815260066020819052604080832090910180546001600160a01b0319166001600160a01b03861690811790915590519092917f342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a73591a350565b6040516001600160a01b03831660248201526044810182905261165790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261186a565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610f749085906323b872dd60e01b90608401611620565b6000546001600160a01b03163314610dbd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105ba565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038083166000818152600760209081526040808320948616808452949091528082206000199055517fe292c4f6e9f34c975f4958cd5650a8111352feae914a67b064079571054210219190a35050565b6001600160a01b0380831660009081526007602090815260408083209385168352929052208054600019146118015760405162461bcd60e51b81526020600482015260126024820152711a1d58881b9bdd08185d5d1a1bdc9a5e995960721b60448201526064016105ba565b6001600160a01b0383166000908152600660205260409020600101546118279042611c67565b8082556040519081526001600160a01b0383811691908516907f8d941c9b73ba7e59671a59eed85054004624684182b0e4bdb56c35937bac65a690602001611062565b60006118bf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661193f9092919063ffffffff16565b90508051600014806118e05750808060200190518101906118e09190611b63565b6116575760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105ba565b606061194e8484600085611956565b949350505050565b6060824710156119b75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105ba565b600080866001600160a01b031685876040516119d39190611bf5565b60006040518083038185875af1925050503d8060008114611a10576040519150601f19603f3d011682016040523d82523d6000602084013e611a15565b606091505b5091509150611a2687838387611a31565b979650505050505050565b60608315611a9d578251611a96576001600160a01b0385163b611a965760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105ba565b508161194e565b61194e8383815115611ab25781518083602001fd5b8060405162461bcd60e51b81526004016105ba9190611c11565b600060208284031215611ade57600080fd5b8135610ae681611d35565b60008060408385031215611afc57600080fd5b8235611b0781611d35565b91506020830135611b1781611d35565b809150509250929050565b600080600060608486031215611b3757600080fd5b8335611b4281611d35565b92506020840135611b5281611d35565b929592945050506040919091013590565b600060208284031215611b7557600080fd5b81518015158114610ae657600080fd5b600060208284031215611b9757600080fd5b81356001600160e01b031981168114610ae657600080fd5b60008060008060808587031215611bc557600080fd5b8435611bd081611d35565b93506020850135611be081611d35565b93969395505050506040820135916060013590565b60008251611c07818460208701611cb8565b9190910192915050565b6020815260008251806020840152611c30816040850160208701611cb8565b601f01601f19169190910160400192915050565b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b60008219821115611c7a57611c7a611d1f565b500190565b600082611c9c57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611cb357611cb3611d1f565b500390565b60005b83811015611cd3578181015183820152602001611cbb565b83811115610f745750506000910152565b600181811c90821680611cf857607f821691505b60208210811415611d1957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461144757600080fdfea26469706673582212204a6451a93a4c6021bcd23cb93b30d6c5de983f67f60560b3b79e671f50fc009a64736f6c63430008070033332e302e302d626574612e332b6f70656e67736e2e7374616b656d616e616765722e697374616b656d616e61676572",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80637835d296116100f9578063c5f0674311610097578063f2fde38b11610071578063f2fde38b146104d6578063f48f8ac7146104e9578063f9bce311146104fc578063fece3dd41461050f57600080fd5b8063c5f067431461047d578063d0d41fe1146104b0578063d48a9d43146104c357600080fd5b8063a9aadcd7116100d3578063a9aadcd7146103b7578063afcb7752146103ca578063c23a5cea146103f0578063c34531531461040357600080fd5b80637835d296146103685780637aeb642a1461037b5780638da5cb5b146103a657600080fd5b806339622167116101665780634a1ce599116101405780634a1ce599146103275780634b0e72161461033a578063715018a61461034d57806371fa1faf1461035557600080fd5b806339622167146102ec57806346dcbf0b146102ff57806347116c6e1461031257600080fd5b806301ffc9a7146101ae57806309a08af4146101d657806314080fac146101eb57806316934fc4146101fe57806320ffd56d1461029757806338b39d29146102c7575b600080fd5b6101c16101bc366004611b85565b610522565b60405190151581526020015b60405180910390f35b6101e96101e4366004611b22565b610558565b005b6101e96101f9366004611baf565b61078c565b61025661020c366004611acc565b600660208190526000918252604090912080546001820154600283015460038401546004850154600586015495909601549395929491939092916001600160a01b03908116911687565b60408051978852602088019690965294860193909352606085019190915260808401526001600160a01b0390811660a08401521660c082015260e0016101cd565b7f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020016101cd565b6005546001600160a01b03165b6040516001600160a01b0390911681526020016101cd565b6101c16102fa366004611acc565b610a58565b6101e961030d366004611acc565b610aed565b61031a610bd2565b6040516101cd9190611c11565b6101e9610335366004611acc565b610c60565b6101e9610348366004611acc565b610d59565b6101e9610dab565b6101e9610363366004611acc565b610dbf565b6101e9610376366004611ae9565b610f29565b6102b9610389366004611ae9565b600760209081526000928352604080842090915290825290205481565b6000546001600160a01b03166102d4565b6101e96103c5366004611acc565b610f7a565b7f00000000000000000000000000000000000000000000000000000000000000006102b9565b6101e96103fe366004611acc565b61106f565b610416610411366004611acc565b6111de565b6040805183518152602080850151908201528382015191810191909152606080840151908201526080808401519082015260a0808401516001600160a01b039081169183019190915260c0938401511692810192909252151560e0820152610100016101cd565b6104856112bd565b6040805182516001600160a01b031681526020808401519082015291810151908201526060016101cd565b6101e96104be366004611acc565b611318565b6101e96104d1366004611acc565b61136a565b6101e96104e4366004611acc565b6113d1565b6101e96104f7366004611ae9565b61144a565b6101e961050a366004611acc565b611495565b6101e961051d366004611acc565b6114f8565b60006001600160e01b0319821662db127760e01b148061055257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b0383166000908152600760209081526040808320338452909152902054806105c35760405162461bcd60e51b81526020600482015260126024820152711a1d58881b9bdd08185d5d1a1bdc9a5e995960721b60448201526064015b60405180910390fd5b4281116106125760405162461bcd60e51b815260206004820152601960248201527f68756220617574686f72697a6174696f6e20657870697265640000000000000060448201526064016105ba565b6001600160a01b0384166000908152600660205260409020548211156106725760405162461bcd60e51b815260206004820152601560248201527470656e616c74792065786365656473207374616b6560581b60448201526064016105ba565b6001600160a01b038416600090815260066020526040902054610696908390611ca1565b6001600160a01b0385166000908152600660205260408120919091556106bd600284611c7f565b905060006106cb8285611ca1565b600580546001600160a01b038981166000908152600660205260409020909201549293506106fd9282169116846115f4565b6001600160a01b03808716600090815260066020526040902060050154610726911686836115f4565b6001600160a01b038681166000818152600660209081526040918290206005015482519085168152908101859052928816927f2da6b6c9084d39eeb104d765e33a4e16c8762e01b37383b75202d17515d1b82b91015b60405180910390a3505050505050565b6001600160a01b0380841660009081526006602081905260409091209081015485921633146107cd5760405162461bcd60e51b81526004016105ba90611c44565b6001600160a01b0385166000908152600660205260409020600101548410156108385760405162461bcd60e51b815260206004820181905260248201527f756e7374616b6544656c61792063616e6e6f742062652064656372656173656460448201526064016105ba565b7f000000000000000000000000000000000000000000000000000000000000000084111561089f5760405162461bcd60e51b8152602060048201526014602482015273756e7374616b6544656c617920746f6f2062696760601b60448201526064016105ba565b6001600160a01b0386166108f55760405162461bcd60e51b815260206004820181905260248201527f6d7573742073706563696679207374616b6520746f6b656e206164647265737360448201526064016105ba565b6001600160a01b0385811660009081526006602052604090206005015416158061093e57506001600160a01b038581166000908152600660205260409020600501548116908716145b61098a5760405162461bcd60e51b815260206004820181905260248201527f7374616b6520746f6b656e206164647265737320697320696e636f727265637460448201526064016105ba565b61099f6001600160a01b03871633308661165c565b6001600160a01b0385811660009081526006602052604081206005810180546001600160a01b031916938a16939093179092558154859291906109e3908490611c67565b90915550506001600160a01b03858116600081815260066020818152604092839020600181018a9055918201546005830154925484519387168452918301919091529181018890529216917ff83af4359c42f5104d95351ec3dd5e88f5344bc7eaea8de052c9b0d5254808fc9060600161077c565b6001600160a01b038082166000908152600660208181526040808420815160e08101835281548152600182015493810193909352600281015491830191909152600381015460608301819052600482015460808401526005820154861660a084015292015490931660c084015290919015801590610ae6575060045460608201514291610ae491611c67565b105b9392505050565b6001600160a01b0381811660009081526006602081815260408084206007835281852033808752935293205491830154929360001990921492909116148180610b335750805b610b7f5760405162461bcd60e51b815260206004820152601e60248201527f6d7573742062652063616c6c6564206279206f776e6572206f7220687562000060448201526064016105ba565b6000600384015542600484018190556040519081526001600160a01b038516907f27f31d9acb21058a327d122842d8dfa9641e7b6600ff715e99b9164080109e099060200160405180910390a250505050565b60018054610bdf90611ce4565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0b90611ce4565b8015610c585780601f10610c2d57610100808354040283529160200191610c58565b820191906000526020600020905b815481529060010190602001808311610c3b57829003601f168201915b505050505081565b6001600160a01b038082166000908152600660208190526040909120908101548392163314610ca15760405162461bcd60e51b81526004016105ba90611c44565b6001600160a01b0383166000908152600660205260409020600281015415610cfd5760405162461bcd60e51b815260206004820152600f60248201526e616c72656164792070656e64696e6760881b60448201526064016105ba565b6001810154610d0c9042611c67565b6002820181905560405190815233906001600160a01b038616907f9ffc6168de1eb7f1d16200f614753cd7edce5a2186aab1c612199dd7316cd7c49060200160405180910390a350505050565b610d61611694565b600580546001600160a01b0319166001600160a01b0383169081179091556040517fb0d2ad16ddd4d3dd008ebff0b7e7699bbfa920003cb0764acb871951d1cd499990600090a250565b610db3611694565b610dbd60006116ee565b565b610dc7611694565b6001600160a01b03811660009081526006602052604090208054610e2d5760405162461bcd60e51b815260206004820152601860248201527f72656c6179206d616e61676572206e6f74207374616b6564000000000000000060448201526064016105ba565b600381015415610e7f5760405162461bcd60e51b815260206004820152601f60248201527f72656c6179206d616e6167657220616c7265616479206162616e646f6e65640060448201526064016105ba565b60035460048201544291610e9291611c67565b10610edf5760405162461bcd60e51b815260206004820181905260248201527f72656c6179206d616e616765722077617320616c69766520726563656e746c7960448201526064016105ba565b42600382018190556040519081526001600160a01b038316907f2931c4798cd84eb47ddd8e2b225e48c52a4cdbbdb49fc6e259dc16ac359d9bcf9060200160405180910390a25050565b6001600160a01b038083166000908152600660208190526040909120908101548492163314610f6a5760405162461bcd60e51b81526004016105ba90611c44565b610f74848461173e565b50505050565b610f82611694565b6001600160a01b0381166000908152600660205260409020610fa382610a58565b610fef5760405162461bcd60e51b815260206004820181905260248201527f72656c617920736572766572206e6f74206573636865617461626c652079657460448201526064016105ba565b8054600080835560028084019190915554600583015461101c916001600160a01b039182169116836115f4565b6005820154604080516001600160a01b0392831681526020810184905233928616917f0c82251845a9397018c808e8698b438fbce74fbdbdd67b554861e0ce38d1ff0e91015b60405180910390a3505050565b6001600160a01b0380821660009081526006602081905260409091209081015483921633146110b05760405162461bcd60e51b81526004016105ba90611c44565b6001600160a01b038316600090815260066020526040902060028101546111195760405162461bcd60e51b815260206004820152601b60248201527f5769746864726177616c206973206e6f74207363686564756c6564000000000060448201526064016105ba565b42816002015411156111655760405162461bcd60e51b81526020600482015260156024820152745769746864726177616c206973206e6f742064756560581b60448201526064016105ba565b805460008083556002830155600582015461118a906001600160a01b031633836115f4565b6005820154604080516001600160a01b0392831681526020810184905233928816917fddbbe0a4d722dc62b8a415c5e38b88260d0e7a4848cacc83f41fbee40f700168910160405180910390a35050505050565b6112306040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b506001600160a01b039081166000818152600760209081526040808320338452825280832054938352600680835292819020815160e0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005810154851660a08301529091015490921660c0830152909160001990911490565b6112ea604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b50604080516060810182526002546001600160a01b0316815260035460208201526004549181019190915290565b611320611694565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f78ef0ef64366f55e36ce7c04060e8bc5846d3651c53909eafc38458922d8a87990600090a250565b336000908152600660208190526040909120908101546001600160a01b03166113c35760405162461bcd60e51b815260206004820152600b60248201526a3737ba1036b0b730b3b2b960a91b60448201526064016105ba565b6113cd338361173e565b5050565b6113d9611694565b6001600160a01b03811661143e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ba565b611447816116ee565b50565b6001600160a01b03808316600090815260066020819052604090912090810154849216331461148b5760405162461bcd60e51b81526004016105ba90611c44565b610f748484611795565b336000908152600660208190526040909120908101546001600160a01b03166114ee5760405162461bcd60e51b815260206004820152600b60248201526a3737ba1036b0b730b3b2b960a91b60448201526064016105ba565b6113cd3383611795565b6001600160a01b03811661153e5760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b21037bbb732b960991b60448201526064016105ba565b33600090815260066020819052604090912001546001600160a01b0316156115985760405162461bcd60e51b815260206004820152600d60248201526c185b1c9958591e481bdddb9959609a1b60448201526064016105ba565b33600081815260066020819052604080832090910180546001600160a01b0319166001600160a01b03861690811790915590519092917f342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a73591a350565b6040516001600160a01b03831660248201526044810182905261165790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261186a565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610f749085906323b872dd60e01b90608401611620565b6000546001600160a01b03163314610dbd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105ba565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038083166000818152600760209081526040808320948616808452949091528082206000199055517fe292c4f6e9f34c975f4958cd5650a8111352feae914a67b064079571054210219190a35050565b6001600160a01b0380831660009081526007602090815260408083209385168352929052208054600019146118015760405162461bcd60e51b81526020600482015260126024820152711a1d58881b9bdd08185d5d1a1bdc9a5e995960721b60448201526064016105ba565b6001600160a01b0383166000908152600660205260409020600101546118279042611c67565b8082556040519081526001600160a01b0383811691908516907f8d941c9b73ba7e59671a59eed85054004624684182b0e4bdb56c35937bac65a690602001611062565b60006118bf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661193f9092919063ffffffff16565b90508051600014806118e05750808060200190518101906118e09190611b63565b6116575760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105ba565b606061194e8484600085611956565b949350505050565b6060824710156119b75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105ba565b600080866001600160a01b031685876040516119d39190611bf5565b60006040518083038185875af1925050503d8060008114611a10576040519150601f19603f3d011682016040523d82523d6000602084013e611a15565b606091505b5091509150611a2687838387611a31565b979650505050505050565b60608315611a9d578251611a96576001600160a01b0385163b611a965760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105ba565b508161194e565b61194e8383815115611ab25781518083602001fd5b8060405162461bcd60e51b81526004016105ba9190611c11565b600060208284031215611ade57600080fd5b8135610ae681611d35565b60008060408385031215611afc57600080fd5b8235611b0781611d35565b91506020830135611b1781611d35565b809150509250929050565b600080600060608486031215611b3757600080fd5b8335611b4281611d35565b92506020840135611b5281611d35565b929592945050506040919091013590565b600060208284031215611b7557600080fd5b81518015158114610ae657600080fd5b600060208284031215611b9757600080fd5b81356001600160e01b031981168114610ae657600080fd5b60008060008060808587031215611bc557600080fd5b8435611bd081611d35565b93506020850135611be081611d35565b93969395505050506040820135916060013590565b60008251611c07818460208701611cb8565b9190910192915050565b6020815260008251806020840152611c30816040850160208701611cb8565b601f01601f19169190910160400192915050565b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b60008219821115611c7a57611c7a611d1f565b500190565b600082611c9c57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611cb357611cb3611d1f565b500390565b60005b83811015611cd3578181015183820152602001611cbb565b83811115610f745750506000910152565b600181811c90821680611cf857607f821691505b60208210811415611d1957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461144757600080fdfea26469706673582212204a6451a93a4c6021bcd23cb93b30d6c5de983f67f60560b3b79e671f50fc009a64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "authorizeHubByOwner(address,address)": {
        "params": {
          "relayHub": "The address of a `RelayHub` to be authorized.",
          "relayManager": "The address of a Relay Manager whose stake is to be authorized for the new `RelayHub`."
        }
      },
      "getAbandonedRelayServerConfig()": {
        "returns": {
          "_0": "The structure that contains all configuration values for the 'abandoned' stake."
        }
      },
      "getBurnAddress()": {
        "returns": {
          "_0": "The address that will receive the 'burned' part of the penalized stake."
        }
      },
      "getCreationBlock()": {
        "returns": {
          "_0": "the block number in which the contract has been deployed."
        }
      },
      "getMaxUnstakeDelay()": {
        "returns": {
          "_0": "The maximum unstake delay this `StakeManger` allows. This is to prevent locking money forever by mistake."
        }
      },
      "getStakeInfo(address)": {
        "params": {
          "relayManager": "The address of a Relay Manager."
        },
        "returns": {
          "isSenderAuthorizedHub": "`true` if the `msg.sender` for this call was a `RelayHub` that is authorized now. `false` if the `msg.sender` for this call is not authorized.",
          "stakeInfo": "The `StakeInfo` structure."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "penalizeRelayManager(address,address,uint256)": {
        "params": {
          "amount": "A total amount of penalty to be withdrawn from stake.",
          "beneficiary": "The address that receives part of the penalty amount.",
          "relayManager": "The address of a Relay Manager to be penalized."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setRelayManagerOwner(address)": {
        "params": {
          "owner": "- owner of the relay (as configured off-chain)"
        }
      },
      "stakeForRelayManager(address,address,uint256,uint256)": {
        "params": {
          "amount": "The amount of tokens to be taken from the relayOwner and locked in the StakeManager as a stake",
          "relayManager": "The address that represents a stake entry and controls relay registrations on relay hubs",
          "token": "The address of an ERC-20 token that is used by the relayManager as a stake",
          "unstakeDelay": "The number of seconds to elapse before an owner can retrieve the stake after calling `unlock`"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unauthorizeHubByOwner(address,address)": {
        "params": {
          "relayHub": "The address of a `RelayHub` to be unauthorized.",
          "relayManager": "The address of a Relay Manager."
        }
      },
      "unlockStake(address)": {
        "params": {
          "relayManager": "The address of a Relay Manager whose stake is to be unlocked."
        }
      },
      "withdrawStake(address)": {
        "params": {
          "relayManager": "The address of a Relay Manager whose stake is to be withdrawn."
        }
      }
    },
    "stateVariables": {
      "versionSM": {
        "return": "a SemVer-compliant version of the `StakeManager` contract.",
        "returns": {
          "_0": "a SemVer-compliant version of the `StakeManager` contract."
        }
      }
    },
    "title": "The StakeManager implementation",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AbandonedRelayManagerStakeEscheated(address,address,address,uint256)": {
        "notice": "Emitted when the stake of an abandoned relayer has been confiscated and transferred to the `devAddress`."
      },
      "BurnAddressSet(address)": {
        "notice": "Emitted when a `burnAddress` is changed."
      },
      "DevAddressSet(address)": {
        "notice": "Emitted when a `devAddress` is changed."
      },
      "HubAuthorized(address,address)": {
        "notice": "Emitted when a `relayManager` adds a new `RelayHub` to a list of authorized."
      },
      "HubUnauthorized(address,address,uint256)": {
        "notice": "Emitted when a `relayManager` removes a `RelayHub` from a list of authorized."
      },
      "OwnerSet(address,address)": {
        "notice": "Emitted when a `relayManager` sets its `owner`. This is necessary to prevent stake hijacking."
      },
      "RelayServerAbandoned(address,uint256)": {
        "notice": "Emitted if Relay Server is inactive for an `abandonmentDelay` and contract owner initiates its removal."
      },
      "RelayServerKeepalive(address,uint256)": {
        "notice": "Emitted to indicate an action performed by a relay server to prevent it from being marked as abandoned."
      },
      "StakeAdded(address,address,address,uint256,uint256)": {
        "notice": "Emitted when a `stake` or `unstakeDelay` are initialized or increased."
      },
      "StakePenalized(address,address,address,uint256)": {
        "notice": "Emitted when an authorized `RelayHub` penalizes a `relayManager`."
      },
      "StakeUnlocked(address,address,uint256)": {
        "notice": "Emitted once a stake is scheduled for withdrawal."
      },
      "StakeWithdrawn(address,address,address,uint256)": {
        "notice": "Emitted when owner withdraws `relayManager` funds."
      }
    },
    "kind": "user",
    "methods": {
      "authorizeHubByManager(address)": {
        "notice": "Same as `authorizeHubByOwner` but can be called by the RelayManager itself."
      },
      "authorizeHubByOwner(address,address)": {
        "notice": "Add the `RelayHub` to a list of authorized by this Relay Manager. This allows the RelayHub to penalize this Relay Manager. The `RelayHub` cannot trust a Relay it cannot penalize."
      },
      "authorizedHubs(address,address)": {
        "notice": "maps relay managers to a map of addressed of their authorized hubs to the information on that hub"
      },
      "escheatAbandonedRelayStake(address)": {
        "notice": "If more than `abandonmentDelay` has passed since the last Keepalive transaction, and relay manager has been marked as abandoned, and after that more that `escheatmentDelay` have passed, entire stake and balance will be taken from this relay."
      },
      "getStakeInfo(address)": {
        "notice": "Get the stake details information for the given Relay Manager."
      },
      "isRelayEscheatable(address)": {
        "notice": "Check if the Relay Manager can be considered abandoned or not. Returns true if the stake's abandonment time is in the past including the escheatment delay, false otherwise."
      },
      "markRelayAbandoned(address)": {
        "notice": "Allows the contract owner to set the given `relayManager` as abandoned after a configurable delay. Its entire stake and balance will be taken from a relay if it does not respond to being marked as abandoned."
      },
      "penalizeRelayManager(address,address,uint256)": {
        "notice": "Slash the stake of the relay relayManager. In order to prevent stake kidnapping, burns part of stake on the way."
      },
      "setBurnAddress(address)": {
        "notice": "Change the address that will receive the 'burned' part of the penalized stake. This is done to prevent malicious Relay Server from penalizing itself and breaking even."
      },
      "setDevAddress(address)": {
        "notice": "Change the address that will receive the 'abandoned' stake. This is done to prevent Relay Servers that lost their keys from losing access to funds."
      },
      "setRelayManagerOwner(address)": {
        "notice": "Set the owner of a Relay Manager. Called only by the RelayManager itself. Note that owners cannot transfer ownership - if the entry already exists, reverts."
      },
      "stakeForRelayManager(address,address,uint256,uint256)": {
        "notice": "Put a stake for a relayManager and set its unstake delay. Only the owner can call this function. If the entry does not exist, reverts. The owner must give allowance of the ERC-20 token to the StakeManager before calling this method. It is the RelayHub who has a configurable list of minimum stakes per token. StakeManager accepts all tokens."
      },
      "stakes(address)": {
        "notice": "maps relay managers to their stakes"
      },
      "unauthorizeHubByManager(address)": {
        "notice": "Same as `unauthorizeHubByOwner` but can be called by the RelayManager itself."
      },
      "unauthorizeHubByOwner(address,address)": {
        "notice": "Remove the `RelayHub` from a list of authorized by this Relay Manager."
      },
      "unlockStake(address)": {
        "notice": "Schedule the unlocking of the stake. The `unstakeDelay` must pass before owner can call `withdrawStake`."
      },
      "updateRelayKeepaliveTime(address)": {
        "notice": "Sets a new `keepaliveTime` for the given `relayManager`, preventing it from being marked as abandoned. Can be called by an authorized `RelayHub` or by the `relayOwner` address."
      },
      "withdrawStake(address)": {
        "notice": "Withdraw the unlocked stake."
      }
    },
    "notice": "An IStakeManager instance that accepts stakes in any ERC-20 token.Single StakeInfo of a single RelayManager can only have one token address assigned to it.It cannot be changed after the first time 'stakeForRelayManager' is called as it is equivalent to withdrawal.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8589,
        "contract": "@opengsn/contracts/src/StakeManager.sol:StakeManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3294,
        "contract": "@opengsn/contracts/src/StakeManager.sol:StakeManager",
        "label": "versionSM",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3299,
        "contract": "@opengsn/contracts/src/StakeManager.sol:StakeManager",
        "label": "abandonedRelayServerConfig",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AbandonedRelayServerConfig)5744_storage"
      },
      {
        "astId": 3301,
        "contract": "@opengsn/contracts/src/StakeManager.sol:StakeManager",
        "label": "burnAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3309,
        "contract": "@opengsn/contracts/src/StakeManager.sol:StakeManager",
        "label": "stakes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(StakeInfo)5734_storage)"
      },
      {
        "astId": 3422,
        "contract": "@opengsn/contracts/src/StakeManager.sol:StakeManager",
        "label": "authorizedHubs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RelayHubInfo)5737_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)9362": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(RelayHubInfo)5737_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IStakeManager.RelayHubInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(RelayHubInfo)5737_storage)"
      },
      "t_mapping(t_address,t_struct(RelayHubInfo)5737_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStakeManager.RelayHubInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RelayHubInfo)5737_storage"
      },
      "t_mapping(t_address,t_struct(StakeInfo)5734_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStakeManager.StakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeInfo)5734_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AbandonedRelayServerConfig)5744_storage": {
        "encoding": "inplace",
        "label": "struct IStakeManager.AbandonedRelayServerConfig",
        "members": [
          {
            "astId": 5739,
            "contract": "@opengsn/contracts/src/StakeManager.sol:StakeManager",
            "label": "devAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5741,
            "contract": "@opengsn/contracts/src/StakeManager.sol:StakeManager",
            "label": "abandonmentDelay",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5743,
            "contract": "@opengsn/contracts/src/StakeManager.sol:StakeManager",
            "label": "escheatmentDelay",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RelayHubInfo)5737_storage": {
        "encoding": "inplace",
        "label": "struct IStakeManager.RelayHubInfo",
        "members": [
          {
            "astId": 5736,
            "contract": "@opengsn/contracts/src/StakeManager.sol:StakeManager",
            "label": "removalTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(StakeInfo)5734_storage": {
        "encoding": "inplace",
        "label": "struct IStakeManager.StakeInfo",
        "members": [
          {
            "astId": 5720,
            "contract": "@opengsn/contracts/src/StakeManager.sol:StakeManager",
            "label": "stake",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5722,
            "contract": "@opengsn/contracts/src/StakeManager.sol:StakeManager",
            "label": "unstakeDelay",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5724,
            "contract": "@opengsn/contracts/src/StakeManager.sol:StakeManager",
            "label": "withdrawTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5726,
            "contract": "@opengsn/contracts/src/StakeManager.sol:StakeManager",
            "label": "abandonedTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5728,
            "contract": "@opengsn/contracts/src/StakeManager.sol:StakeManager",
            "label": "keepaliveTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5731,
            "contract": "@opengsn/contracts/src/StakeManager.sol:StakeManager",
            "label": "token",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(IERC20)9362"
          },
          {
            "astId": 5733,
            "contract": "@opengsn/contracts/src/StakeManager.sol:StakeManager",
            "label": "owner",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}